ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"nau7802.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.nau7802_init,"ax",%progbits
  16              		.align	1
  17              		.global	nau7802_init
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	nau7802_init:
  25              	.LVL0:
  26              	.LFB322:
  27              		.file 1 "Core/Src/nau7802.c"
   1:Core/Src/nau7802.c **** /**
   2:Core/Src/nau7802.c ****  * @file nau7802.c
   3:Core/Src/nau7802.c ****  * @author irex
   4:Core/Src/nau7802.c ****  * @brief This driver provides support for the nuvoTon NAU7802 24-bit ADC.
   5:Core/Src/nau7802.c ****  * @version 0.1
   6:Core/Src/nau7802.c ****  * @date 2021-01-11
   7:Core/Src/nau7802.c ****  *
   8:Core/Src/nau7802.c ****  * @copyright Copyright (c) 2021
   9:Core/Src/nau7802.c ****  * TODO: Add lisence
  10:Core/Src/nau7802.c ****  *
  11:Core/Src/nau7802.c ****  */
  12:Core/Src/nau7802.c **** 
  13:Core/Src/nau7802.c **** #include "nau7802.h"
  14:Core/Src/nau7802.c **** 
  15:Core/Src/nau7802.c **** /**
  16:Core/Src/nau7802.c ****  * @brief Initializes and returns a point to the ADC instance. All fields are set to 0 except i2c, 
  17:Core/Src/nau7802.c ****  * passed pointer.
  18:Core/Src/nau7802.c ****  * TODO: Test
  19:Core/Src/nau7802.c ****  *
  20:Core/Src/nau7802.c ****  * @param i2c Handle to the I2C instance used for communication
  21:Core/Src/nau7802.c ****  * @return nau7802_t* Pointer to new nau7802 instance
  22:Core/Src/nau7802.c ****  */
  23:Core/Src/nau7802.c **** nau7802_t *nau7802_init(I2C_HandleTypeDef *i2c) {
  28              		.loc 1 23 49 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 23 49 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 2


  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38 0002 0400     		movs	r4, r0
  24:Core/Src/nau7802.c ****     nau7802_t *ret = (nau7802_t *)malloc(sizeof(nau7802_t));
  39              		.loc 1 24 5 is_stmt 1 view .LVU2
  40              		.loc 1 24 35 is_stmt 0 view .LVU3
  41 0004 0C20     		movs	r0, #12
  42              	.LVL1:
  43              		.loc 1 24 35 view .LVU4
  44 0006 FFF7FEFF 		bl	malloc
  45              	.LVL2:
  25:Core/Src/nau7802.c ****     ret->i2c = i2c;
  46              		.loc 1 25 5 is_stmt 1 view .LVU5
  47              		.loc 1 25 14 is_stmt 0 view .LVU6
  48 000a 0460     		str	r4, [r0]
  26:Core/Src/nau7802.c ****     ret->conversion = 0;
  49              		.loc 1 26 5 is_stmt 1 view .LVU7
  50              		.loc 1 26 21 is_stmt 0 view .LVU8
  51 000c 0023     		movs	r3, #0
  52 000e 4360     		str	r3, [r0, #4]
  27:Core/Src/nau7802.c ****     ret->cready = 0;
  53              		.loc 1 27 5 is_stmt 1 view .LVU9
  54              		.loc 1 27 17 is_stmt 0 view .LVU10
  55 0010 0372     		strb	r3, [r0, #8]
  28:Core/Src/nau7802.c ****     ret->puready = 0;
  56              		.loc 1 28 5 is_stmt 1 view .LVU11
  57              		.loc 1 28 18 is_stmt 0 view .LVU12
  58 0012 4372     		strb	r3, [r0, #9]
  29:Core/Src/nau7802.c ****     ret->cal_err = 0;
  59              		.loc 1 29 5 is_stmt 1 view .LVU13
  60              		.loc 1 29 18 is_stmt 0 view .LVU14
  61 0014 8372     		strb	r3, [r0, #10]
  30:Core/Src/nau7802.c **** 
  31:Core/Src/nau7802.c ****     return ret;
  62              		.loc 1 31 5 is_stmt 1 view .LVU15
  32:Core/Src/nau7802.c **** }
  63              		.loc 1 32 1 is_stmt 0 view .LVU16
  64              		@ sp needed
  65              	.LVL3:
  66              		.loc 1 32 1 view .LVU17
  67 0016 10BD     		pop	{r4, pc}
  68              		.cfi_endproc
  69              	.LFE322:
  71              		.section	.text.nau7802_conversion_read,"ax",%progbits
  72              		.align	1
  73              		.global	nau7802_conversion_read
  74              		.syntax unified
  75              		.code	16
  76              		.thumb_func
  77              		.fpu softvfp
  79              	nau7802_conversion_read:
  80              	.LVL4:
  81              	.LFB353:
  33:Core/Src/nau7802.c **** 
  34:Core/Src/nau7802.c **** /**
  35:Core/Src/nau7802.c ****  * @brief Sets the source voltage for the internal AVDD rail, either internal LDO or external AVDD 
  36:Core/Src/nau7802.c ****  * TODO: Test
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 3


  37:Core/Src/nau7802.c ****  *
  38:Core/Src/nau7802.c ****  * @param adc adc instance
  39:Core/Src/nau7802.c ****  * @param source 1 for internal LDO, 0 for AVDD pin
  40:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
  41:Core/Src/nau7802.c ****  */
  42:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_avdd_source(nau7802_t *adc, int source) {
  43:Core/Src/nau7802.c ****     uint8_t           reg_state;
  44:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
  45:Core/Src/nau7802.c **** 
  46:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
  47:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
  48:Core/Src/nau7802.c ****         return ret;
  49:Core/Src/nau7802.c ****     }
  50:Core/Src/nau7802.c **** 
  51:Core/Src/nau7802.c ****     if (source != 0) { // Set to AVDD pin
  52:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_AVDSS_BIT);
  53:Core/Src/nau7802.c **** 
  54:Core/Src/nau7802.c ****     } else { // Set to internal LDO
  55:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_AVDSS_BIT));
  56:Core/Src/nau7802.c ****     }
  57:Core/Src/nau7802.c **** }
  58:Core/Src/nau7802.c **** /**
  59:Core/Src/nau7802.c ****  * @brief Sets the ADC clock sorce, either external crystal or internal RC oscillator.
  60:Core/Src/nau7802.c ****  * TODO: Test
  61:Core/Src/nau7802.c ****  *
  62:Core/Src/nau7802.c ****  * @param adc adc instance
  63:Core/Src/nau7802.c ****  * @param source 1 for external oscillator, 0 for internal oscillator
  64:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
  65:Core/Src/nau7802.c ****  */
  66:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_oscs_source(nau7802_t *adc, int source) {
  67:Core/Src/nau7802.c ****     uint8_t           reg_state;
  68:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
  69:Core/Src/nau7802.c **** 
  70:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
  71:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
  72:Core/Src/nau7802.c ****         return ret;
  73:Core/Src/nau7802.c ****     }
  74:Core/Src/nau7802.c **** 
  75:Core/Src/nau7802.c ****     if (source != 0) { // Set external oscillator
  76:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_OSCS_BIT);
  77:Core/Src/nau7802.c ****     } else { // Set internal oscillator
  78:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_OSCS_BIT));
  79:Core/Src/nau7802.c ****     }
  80:Core/Src/nau7802.c **** }
  81:Core/Src/nau7802.c **** 
  82:Core/Src/nau7802.c **** /**
  83:Core/Src/nau7802.c ****  * @brief Sets the power state for the internal analog circuit. Note digital (PUD) must be powered 
  84:Core/Src/nau7802.c ****  * TODO: Test
  85:Core/Src/nau7802.c ****  *
  86:Core/Src/nau7802.c ****  * @param adc adc instance
  87:Core/Src/nau7802.c ****  * @param mode 1 for power up, 0 for power down
  88:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
  89:Core/Src/nau7802.c ****  */
  90:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pwr_analog(nau7802_t *adc, int mode) {
  91:Core/Src/nau7802.c ****     uint8_t           reg_state;
  92:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
  93:Core/Src/nau7802.c **** 
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 4


  94:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
  95:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
  96:Core/Src/nau7802.c ****         return ret;
  97:Core/Src/nau7802.c ****     }
  98:Core/Src/nau7802.c **** 
  99:Core/Src/nau7802.c ****     if (mode != 0) { // Power up
 100:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_PUA_BIT);
 101:Core/Src/nau7802.c ****     } else { // Power down
 102:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_PUA_BIT));
 103:Core/Src/nau7802.c ****     }
 104:Core/Src/nau7802.c **** }
 105:Core/Src/nau7802.c **** 
 106:Core/Src/nau7802.c **** /**
 107:Core/Src/nau7802.c ****  * @brief Sets the power state for the internal digital circuit.
 108:Core/Src/nau7802.c ****  * TODO: Test
 109:Core/Src/nau7802.c ****  *
 110:Core/Src/nau7802.c ****  * @param adc adc instance
 111:Core/Src/nau7802.c ****  * @param mode 1 for power up, 0 for power down
 112:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 113:Core/Src/nau7802.c ****  */
 114:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pwr_digital(nau7802_t *adc, int mode) {
 115:Core/Src/nau7802.c ****     uint8_t           reg_state;
 116:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 117:Core/Src/nau7802.c **** 
 118:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 119:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 120:Core/Src/nau7802.c ****         return ret;
 121:Core/Src/nau7802.c ****     }
 122:Core/Src/nau7802.c **** 
 123:Core/Src/nau7802.c ****     if (mode != 0) { // Power up
 124:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_PUD_BIT);
 125:Core/Src/nau7802.c **** 
 126:Core/Src/nau7802.c ****     } else { // Power down
 127:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_PUD_BIT));
 128:Core/Src/nau7802.c ****     }
 129:Core/Src/nau7802.c **** }
 130:Core/Src/nau7802.c **** 
 131:Core/Src/nau7802.c **** /**
 132:Core/Src/nau7802.c ****  * @brief Sets register reset bit. When set to 1, NAU7802 is in reset state, resseting all register
 133:Core/Src/nau7802.c ****  * to 0, leaves reset state and enters normal state.
 134:Core/Src/nau7802.c ****  * TODO: Test
 135:Core/Src/nau7802.c ****  *
 136:Core/Src/nau7802.c ****  * @param adc adc instance
 137:Core/Src/nau7802.c ****  * @param rst 1 for reset state, 0 for normal state
 138:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 139:Core/Src/nau7802.c ****  */
 140:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_reg_reset(nau7802_t *adc, int rst) {
 141:Core/Src/nau7802.c ****     uint8_t           reg_state;
 142:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 143:Core/Src/nau7802.c **** 
 144:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 145:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 146:Core/Src/nau7802.c ****         return ret;
 147:Core/Src/nau7802.c ****     }
 148:Core/Src/nau7802.c **** 
 149:Core/Src/nau7802.c ****     if (rst != 0) { // Reset
 150:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_RR_BIT);
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 5


 151:Core/Src/nau7802.c ****     } else { // Normal
 152:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_RR_BIT));
 153:Core/Src/nau7802.c ****     }
 154:Core/Src/nau7802.c **** }
 155:Core/Src/nau7802.c **** 
 156:Core/Src/nau7802.c **** /**
 157:Core/Src/nau7802.c ****  * @brief Sets the conversion ready pin polarity, either active high or active low.
 158:Core/Src/nau7802.c ****  * TODO: Test
 159:Core/Src/nau7802.c ****  *
 160:Core/Src/nau7802.c ****  * @param adc adc instance
 161:Core/Src/nau7802.c ****  * @param polarity 1 for active low, 0 for active high
 162:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 163:Core/Src/nau7802.c ****  */
 164:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_cready_polarity(nau7802_t *adc, int polarity) {
 165:Core/Src/nau7802.c ****     uint8_t           reg_state;
 166:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 167:Core/Src/nau7802.c **** 
 168:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 169:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 170:Core/Src/nau7802.c ****         return ret;
 171:Core/Src/nau7802.c ****     }
 172:Core/Src/nau7802.c **** 
 173:Core/Src/nau7802.c ****     if (polarity != 0) { // Active low
 174:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state | NAU7802_CTRL1_CRP_BIT);
 175:Core/Src/nau7802.c **** 
 176:Core/Src/nau7802.c ****     } else { // Active high
 177:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state & (~NAU7802_CTRL1_CRP_BIT));
 178:Core/Src/nau7802.c ****     }
 179:Core/Src/nau7802.c **** }
 180:Core/Src/nau7802.c **** 
 181:Core/Src/nau7802.c **** /**
 182:Core/Src/nau7802.c ****  * @brief Sets the function of the DRDY pin, either as a buffered clock output or a conversion read
 183:Core/Src/nau7802.c ****  * TODO: Test
 184:Core/Src/nau7802.c ****  *
 185:Core/Src/nau7802.c ****  * @param adc adc instance
 186:Core/Src/nau7802.c ****  * @param function 1 for buffered clock output, 0 for conversion ready
 187:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 188:Core/Src/nau7802.c ****  */
 189:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_drdy_function(nau7802_t *adc, int function) {
 190:Core/Src/nau7802.c ****     uint8_t           reg_state;
 191:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 192:Core/Src/nau7802.c **** 
 193:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 194:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 195:Core/Src/nau7802.c ****         return ret;
 196:Core/Src/nau7802.c ****     }
 197:Core/Src/nau7802.c **** 
 198:Core/Src/nau7802.c ****     if (function != 0) { // Clock output
 199:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state | NAU7802_CTRL1_DRDY_SEL_BIT);
 200:Core/Src/nau7802.c **** 
 201:Core/Src/nau7802.c ****     } else { // Conversion ready output
 202:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state & (~NAU7802_CTRL1_DRDY_SEL_BIT))
 203:Core/Src/nau7802.c ****     }
 204:Core/Src/nau7802.c **** }
 205:Core/Src/nau7802.c **** 
 206:Core/Src/nau7802.c **** /**
 207:Core/Src/nau7802.c ****  * @brief Sets the output voltage of the internal LDO. Options are:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 6


 208:Core/Src/nau7802.c ****  * 7 - 2.4 V
 209:Core/Src/nau7802.c ****  * 6 - 2.7 V
 210:Core/Src/nau7802.c ****  * 5 - 3.0 V
 211:Core/Src/nau7802.c ****  * 4 - 3.3 V
 212:Core/Src/nau7802.c ****  * 3 - 3.6 V
 213:Core/Src/nau7802.c ****  * 2 - 3.9 V
 214:Core/Src/nau7802.c ****  * 1 - 4.2 V
 215:Core/Src/nau7802.c ****  * 0 - 4.5 V
 216:Core/Src/nau7802.c ****  * TODO: Test
 217:Core/Src/nau7802.c ****  *
 218:Core/Src/nau7802.c ****  * Returns without setting if vsetting is outside valid range
 219:Core/Src/nau7802.c ****  *
 220:Core/Src/nau7802.c ****  * @param adc adc instance
 221:Core/Src/nau7802.c ****  * @param vsetting voltage setting, valid range is 0 to 7
 222:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 223:Core/Src/nau7802.c ****  */
 224:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_vldo_volts(nau7802_t *adc, int vsetting) {
 225:Core/Src/nau7802.c ****     uint8_t           reg_state;
 226:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 227:Core/Src/nau7802.c **** 
 228:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 229:Core/Src/nau7802.c ****     if (ret != HAL_OK || (vsetting < 0 || vsetting > 7)) {
 230:Core/Src/nau7802.c ****         // Return if vsetting is outside valid range
 231:Core/Src/nau7802.c ****         return ret;
 232:Core/Src/nau7802.c ****     }
 233:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_CTRL1_VLDO(vsetting));
 234:Core/Src/nau7802.c **** }
 235:Core/Src/nau7802.c **** 
 236:Core/Src/nau7802.c **** /**
 237:Core/Src/nau7802.c ****  * @brief Sets the PGA's gain. Options are:
 238:Core/Src/nau7802.c ****  * 7 - x128
 239:Core/Src/nau7802.c ****  * 6 - x64
 240:Core/Src/nau7802.c ****  * 5 - x32
 241:Core/Src/nau7802.c ****  * 4 - x16
 242:Core/Src/nau7802.c ****  * 3 - x8
 243:Core/Src/nau7802.c ****  * 2 - x4
 244:Core/Src/nau7802.c ****  * 1 - x2
 245:Core/Src/nau7802.c ****  * 0 - x1
 246:Core/Src/nau7802.c ****  * TODO: Test
 247:Core/Src/nau7802.c ****  *
 248:Core/Src/nau7802.c ****  * Returns without setting if gsetting is outside valid range.
 249:Core/Src/nau7802.c ****  *
 250:Core/Src/nau7802.c ****  * @param adc adc instance
 251:Core/Src/nau7802.c ****  * @param gsetting gain setting, valid range is 0 to 7
 252:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 253:Core/Src/nau7802.c ****  */
 254:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_gain(nau7802_t *adc, int gsetting) {
 255:Core/Src/nau7802.c ****     uint8_t           reg_state;
 256:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 257:Core/Src/nau7802.c **** 
 258:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 259:Core/Src/nau7802.c ****     if (ret != HAL_OK || (gsetting < 0 || gsetting > 7)) {
 260:Core/Src/nau7802.c ****         // Return if gsetting is outside valid range
 261:Core/Src/nau7802.c ****         return ret;
 262:Core/Src/nau7802.c ****     }
 263:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_CTRL1_GAINS(gsetting));
 264:Core/Src/nau7802.c **** }
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 7


 265:Core/Src/nau7802.c **** 
 266:Core/Src/nau7802.c **** /**
 267:Core/Src/nau7802.c ****  * @brief Selects the input channel for conversion
 268:Core/Src/nau7802.c ****  *
 269:Core/Src/nau7802.c ****  * @param adc adc instance
 270:Core/Src/nau7802.c ****  * @param channel input channel, 0 for CH1, 1 for CH2
 271:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 272:Core/Src/nau7802.c ****  */
 273:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_ch_sel(nau7802_t *adc, int channel) {
 274:Core/Src/nau7802.c ****     uint8_t           reg_state;
 275:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 276:Core/Src/nau7802.c **** 
 277:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 278:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 279:Core/Src/nau7802.c ****         return ret;
 280:Core/Src/nau7802.c ****     }
 281:Core/Src/nau7802.c ****     if (channel == NAU7802_CH1) {
 282:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL2, ret & (~NAU7802_CTRL2_CHS_BIT));
 283:Core/Src/nau7802.c ****     } else if (channel == NAU7802_CH2) {
 284:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL2, ret | NAU7802_CTRL2_CHS_BIT);
 285:Core/Src/nau7802.c ****     } else {
 286:Core/Src/nau7802.c ****         // Not a valid channel
 287:Core/Src/nau7802.c ****         return ret;
 288:Core/Src/nau7802.c ****     }
 289:Core/Src/nau7802.c **** }
 290:Core/Src/nau7802.c **** 
 291:Core/Src/nau7802.c **** /**
 292:Core/Src/nau7802.c ****  * @brief Sets the ADC sample rate. Options are:
 293:Core/Src/nau7802.c ****  * 7 - 320SPS
 294:Core/Src/nau7802.c ****  * 3 - 80SPS
 295:Core/Src/nau7802.c ****  * 2 - 40SPS
 296:Core/Src/nau7802.c ****  * 1 - 20SPS
 297:Core/Src/nau7802.c ****  * 0 - 10SPS
 298:Core/Src/nau7802.c ****  * TODO: Test
 299:Core/Src/nau7802.c ****  *
 300:Core/Src/nau7802.c ****  * Returns without setting if rsetting is not a valid option
 301:Core/Src/nau7802.c ****  *
 302:Core/Src/nau7802.c ****  * @param adc adc instance
 303:Core/Src/nau7802.c ****  * @param rsetting sample rate setting, either 0, 1, 2, 3, or 7
 304:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 305:Core/Src/nau7802.c ****  */
 306:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_samplerate(nau7802_t *adc, int rsetting) {
 307:Core/Src/nau7802.c ****     uint8_t           reg_state;
 308:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 309:Core/Src/nau7802.c **** 
 310:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 311:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 312:Core/Src/nau7802.c ****         return ret;
 313:Core/Src/nau7802.c ****     }
 314:Core/Src/nau7802.c **** 
 315:Core/Src/nau7802.c ****     switch (rsetting) { // Check that given rate is valid
 316:Core/Src/nau7802.c ****     case NAU7802_CRS_320:
 317:Core/Src/nau7802.c ****         break;
 318:Core/Src/nau7802.c ****     case NAU7802_CRS_80:
 319:Core/Src/nau7802.c ****         break;
 320:Core/Src/nau7802.c ****     case NAU7802_CRS_40:
 321:Core/Src/nau7802.c ****         break;
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 8


 322:Core/Src/nau7802.c ****     case NAU7802_CRS_20:
 323:Core/Src/nau7802.c ****         break;
 324:Core/Src/nau7802.c ****     case NAU7802_CRS_10:
 325:Core/Src/nau7802.c ****         break;
 326:Core/Src/nau7802.c ****     default:
 327:Core/Src/nau7802.c ****         return ret;
 328:Core/Src/nau7802.c ****     }
 329:Core/Src/nau7802.c **** 
 330:Core/Src/nau7802.c ****     reg_state &= ~NAU7802_CTRL1_CRP(0x07); // Clear current setting
 331:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CRS(rsetting));
 332:Core/Src/nau7802.c **** }
 333:Core/Src/nau7802.c **** 
 334:Core/Src/nau7802.c **** /**
 335:Core/Src/nau7802.c ****  * @brief Start a calibration in the given mode. Options are:
 336:Core/Src/nau7802.c ****  * 3 - System gain calibration
 337:Core/Src/nau7802.c ****  * 2 - System offset calibration
 338:Core/Src/nau7802.c ****  * 0 - Internal offset calibration
 339:Core/Src/nau7802.c ****  *
 340:Core/Src/nau7802.c ****  * This function waits for the calibration to finish then updates the cal_err field of the adc inst
 341:Core/Src/nau7802.c ****  * indicates there is an error in the calibration.
 342:Core/Src/nau7802.c ****  * TODO: Test
 343:Core/Src/nau7802.c ****  *
 344:Core/Src/nau7802.c ****  * @param adc adc instance
 345:Core/Src/nau7802.c ****  * @param mode calibration mode, either 0, 2, or 3
 346:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 347:Core/Src/nau7802.c ****  */
 348:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_calibrate(nau7802_t *adc, int mode) {
 349:Core/Src/nau7802.c ****     uint8_t           reg_state;
 350:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 351:Core/Src/nau7802.c **** 
 352:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 353:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 354:Core/Src/nau7802.c ****         return ret;
 355:Core/Src/nau7802.c ****     }
 356:Core/Src/nau7802.c **** 
 357:Core/Src/nau7802.c ****     switch (mode) { // Check that given mode is valid
 358:Core/Src/nau7802.c ****     case NAU7802_CALMOD_GAIN_SYS:
 359:Core/Src/nau7802.c ****         break;
 360:Core/Src/nau7802.c ****     case NAU7802_CALMOD_OS_SYS:
 361:Core/Src/nau7802.c ****         break;
 362:Core/Src/nau7802.c ****     case NAU7802_CALMOD_OS_INT:
 363:Core/Src/nau7802.c ****         break;
 364:Core/Src/nau7802.c ****     default:
 365:Core/Src/nau7802.c ****         return ret;
 366:Core/Src/nau7802.c ****     }
 367:Core/Src/nau7802.c **** 
 368:Core/Src/nau7802.c ****     // Set the calibration mode
 369:Core/Src/nau7802.c ****     reg_state &= ~NAU7802_CTRL2_CALMOD(0x03); // Clear current setting
 370:Core/Src/nau7802.c ****     ret = nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CALMOD(mode));
 371:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 372:Core/Src/nau7802.c ****         return ret;
 373:Core/Src/nau7802.c ****     }
 374:Core/Src/nau7802.c **** 
 375:Core/Src/nau7802.c ****     // Start calibration
 376:Core/Src/nau7802.c ****     nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 377:Core/Src/nau7802.c ****     ret = nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CALS_BIT);
 378:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 9


 379:Core/Src/nau7802.c ****         return ret;
 380:Core/Src/nau7802.c ****     }
 381:Core/Src/nau7802.c **** 
 382:Core/Src/nau7802.c ****     // Wait for calibration to finish
 383:Core/Src/nau7802.c ****     int cals = 1; // CALS == 1 indicates the chip is still calibrating
 384:Core/Src/nau7802.c ****     while (cals != 0) {
 385:Core/Src/nau7802.c ****         HAL_Delay(5);
 386:Core/Src/nau7802.c ****         ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 387:Core/Src/nau7802.c ****         if (ret != HAL_OK) {
 388:Core/Src/nau7802.c ****             return ret;
 389:Core/Src/nau7802.c ****         }
 390:Core/Src/nau7802.c ****         cals = reg_state & NAU7802_CTRL2_CALS_BIT;
 391:Core/Src/nau7802.c ****     }
 392:Core/Src/nau7802.c **** 
 393:Core/Src/nau7802.c ****     // Get cal_err status
 394:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 395:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 396:Core/Src/nau7802.c ****         return ret;
 397:Core/Src/nau7802.c ****     }
 398:Core/Src/nau7802.c **** 
 399:Core/Src/nau7802.c ****     adc->cal_err = reg_state & NAU7802_CTRL2_CAL_ERR_BIT;
 400:Core/Src/nau7802.c ****     return ret;
 401:Core/Src/nau7802.c **** }
 402:Core/Src/nau7802.c **** 
 403:Core/Src/nau7802.c **** /**
 404:Core/Src/nau7802.c ****  * @brief Enables pulling SDA low when a conversion completes. This is a non-standard I2C function.
 405:Core/Src/nau7802.c ****  * special handling of the I2C protocol once enabled.
 406:Core/Src/nau7802.c ****  * TODO: Test
 407:Core/Src/nau7802.c ****  *
 408:Core/Src/nau7802.c ****  * @param adc adc instance
 409:Core/Src/nau7802.c ****  * @param mode 1 for enable, 0 for disable
 410:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 411:Core/Src/nau7802.c ****  */
 412:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_crsd_en(nau7802_t *adc, int mode) {
 413:Core/Src/nau7802.c ****     uint8_t           reg_state;
 414:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 415:Core/Src/nau7802.c **** 
 416:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 417:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 418:Core/Src/nau7802.c ****         return ret;
 419:Core/Src/nau7802.c ****     }
 420:Core/Src/nau7802.c **** 
 421:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 422:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_CRSD_BIT);
 423:Core/Src/nau7802.c **** 
 424:Core/Src/nau7802.c ****     } else { // Disable
 425:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_CRSD_BIT));
 426:Core/Src/nau7802.c ****     }
 427:Core/Src/nau7802.c **** }
 428:Core/Src/nau7802.c **** 
 429:Core/Src/nau7802.c **** /**
 430:Core/Src/nau7802.c ****  * @brief Enables non-standard I2C fast read mode. Note this requires special handling of the I2C p
 431:Core/Src/nau7802.c ****  * TODO: Test
 432:Core/Src/nau7802.c ****  *
 433:Core/Src/nau7802.c ****  * @param adc adc instance
 434:Core/Src/nau7802.c ****  * @param mode 1 to enable, 0 to disable
 435:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 10


 436:Core/Src/nau7802.c ****  */
 437:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_fast_i2c_en(nau7802_t *adc, int mode) {
 438:Core/Src/nau7802.c ****     uint8_t           reg_state;
 439:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 440:Core/Src/nau7802.c **** 
 441:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 442:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 443:Core/Src/nau7802.c ****         return ret;
 444:Core/Src/nau7802.c ****     }
 445:Core/Src/nau7802.c **** 
 446:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 447:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_FRD_BIT);
 448:Core/Src/nau7802.c **** 
 449:Core/Src/nau7802.c ****     } else { // Disable
 450:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_FRD_BIT));
 451:Core/Src/nau7802.c ****     }
 452:Core/Src/nau7802.c **** }
 453:Core/Src/nau7802.c **** 
 454:Core/Src/nau7802.c **** /**
 455:Core/Src/nau7802.c ****  * @brief Sets the enable state for the internal strong I2C pull-ups (1.6k ohm).
 456:Core/Src/nau7802.c ****  * TODO: Test
 457:Core/Src/nau7802.c ****  *
 458:Core/Src/nau7802.c ****  * @param adc adc instance
 459:Core/Src/nau7802.c ****  * @param mode 1 to enable, 0 to disable
 460:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 461:Core/Src/nau7802.c ****  */
 462:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_strong_i2c_pu_en(nau7802_t *adc, int mode) {
 463:Core/Src/nau7802.c ****     uint8_t           reg_state;
 464:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 465:Core/Src/nau7802.c **** 
 466:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 467:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 468:Core/Src/nau7802.c ****         return ret;
 469:Core/Src/nau7802.c ****     }
 470:Core/Src/nau7802.c **** 
 471:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 472:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SPE_BIT);
 473:Core/Src/nau7802.c **** 
 474:Core/Src/nau7802.c ****     } else { // Disable
 475:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SPE_BIT));
 476:Core/Src/nau7802.c ****     }
 477:Core/Src/nau7802.c **** }
 478:Core/Src/nau7802.c **** 
 479:Core/Src/nau7802.c **** /**
 480:Core/Src/nau7802.c ****  * @brief Sets the enable state for the internal weak I2C pull-ups (50k ohm).
 481:Core/Src/nau7802.c ****  * TODO: Test
 482:Core/Src/nau7802.c ****  *
 483:Core/Src/nau7802.c ****  * @param adc adc instance
 484:Core/Src/nau7802.c ****  * @param mode 1 to disable, 0 to enable
 485:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 486:Core/Src/nau7802.c ****  */
 487:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_weak_i2c_pu_den(nau7802_t *adc, int mode) {
 488:Core/Src/nau7802.c ****     uint8_t           reg_state;
 489:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 490:Core/Src/nau7802.c **** 
 491:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 492:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 11


 493:Core/Src/nau7802.c ****         return ret;
 494:Core/Src/nau7802.c ****     }
 495:Core/Src/nau7802.c **** 
 496:Core/Src/nau7802.c ****     if (mode != 0) { // Disable
 497:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SPE_BIT);
 498:Core/Src/nau7802.c **** 
 499:Core/Src/nau7802.c ****     } else { // Enable
 500:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SPE_BIT));
 501:Core/Src/nau7802.c ****     }
 502:Core/Src/nau7802.c **** }
 503:Core/Src/nau7802.c **** 
 504:Core/Src/nau7802.c **** /**
 505:Core/Src/nau7802.c ****  * @brief Shorts the ADC inputs together to measure offset.
 506:Core/Src/nau7802.c ****  * TODO: Test
 507:Core/Src/nau7802.c ****  *
 508:Core/Src/nau7802.c ****  * @param adc adc instance
 509:Core/Src/nau7802.c ****  * @param mode 1 for short, 0 for normal
 510:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 511:Core/Src/nau7802.c ****  */
 512:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_short_input(nau7802_t *adc, int mode) {
 513:Core/Src/nau7802.c ****     uint8_t           reg_state;
 514:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 515:Core/Src/nau7802.c **** 
 516:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 517:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 518:Core/Src/nau7802.c ****         return ret;
 519:Core/Src/nau7802.c ****     }
 520:Core/Src/nau7802.c **** 
 521:Core/Src/nau7802.c ****     if (mode != 0) { // Short
 522:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_WPD_BIT);
 523:Core/Src/nau7802.c **** 
 524:Core/Src/nau7802.c ****     } else { // Normal
 525:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_WPD_BIT));
 526:Core/Src/nau7802.c ****     }
 527:Core/Src/nau7802.c **** }
 528:Core/Src/nau7802.c **** 
 529:Core/Src/nau7802.c **** /**
 530:Core/Src/nau7802.c ****  * @brief Enable the 2.5uA burnout current source connected to the PGA postiive input.
 531:Core/Src/nau7802.c ****  * TODO: Test
 532:Core/Src/nau7802.c ****  *
 533:Core/Src/nau7802.c ****  * @param adc adc instance
 534:Core/Src/nau7802.c ****  * @param mode 1 to enable, 0 to disable
 535:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 536:Core/Src/nau7802.c ****  */
 537:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_burnout_cs_en(nau7802_t *adc, int mode) {
 538:Core/Src/nau7802.c ****     uint8_t           reg_state;
 539:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 540:Core/Src/nau7802.c **** 
 541:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 542:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 543:Core/Src/nau7802.c ****         return ret;
 544:Core/Src/nau7802.c ****     }
 545:Core/Src/nau7802.c **** 
 546:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 547:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SI_BIT);
 548:Core/Src/nau7802.c **** 
 549:Core/Src/nau7802.c ****     } else { // Disable
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 12


 550:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SI_BIT));
 551:Core/Src/nau7802.c ****     }
 552:Core/Src/nau7802.c **** }
 553:Core/Src/nau7802.c **** 
 554:Core/Src/nau7802.c **** /**
 555:Core/Src/nau7802.c ****  * @brief Switches the PGA inputs to the internal temperature sensor.
 556:Core/Src/nau7802.c ****  * TODO: Test
 557:Core/Src/nau7802.c ****  *
 558:Core/Src/nau7802.c ****  * @param adc adc instnace
 559:Core/Src/nau7802.c ****  * @param mode 1 for temperature sensor, 0 for normal operation
 560:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 561:Core/Src/nau7802.c ****  */
 562:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_temp_sense_en(nau7802_t *adc, int mode) {
 563:Core/Src/nau7802.c ****     uint8_t           reg_state;
 564:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 565:Core/Src/nau7802.c **** 
 566:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 567:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 568:Core/Src/nau7802.c ****         return ret;
 569:Core/Src/nau7802.c ****     }
 570:Core/Src/nau7802.c **** 
 571:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 572:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_TS_BIT);
 573:Core/Src/nau7802.c **** 
 574:Core/Src/nau7802.c ****     } else { // Disable
 575:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_TS_BIT));
 576:Core/Src/nau7802.c ****     }
 577:Core/Src/nau7802.c **** }
 578:Core/Src/nau7802.c **** 
 579:Core/Src/nau7802.c **** /**
 580:Core/Src/nau7802.c ****  * @brief Sets the enable state for the badgap chopper.
 581:Core/Src/nau7802.c ****  * TODO: Test
 582:Core/Src/nau7802.c ****  *
 583:Core/Src/nau7802.c ****  * @param adc adc instance
 584:Core/Src/nau7802.c ****  * @param mode 1 to disable bandgap chopper, 0 to enable
 585:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 586:Core/Src/nau7802.c ****  */
 587:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_bandgap_chop_en(nau7802_t *adc, int mode) {
 588:Core/Src/nau7802.c ****     uint8_t           reg_state;
 589:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 590:Core/Src/nau7802.c **** 
 591:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 592:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 593:Core/Src/nau7802.c ****         return ret;
 594:Core/Src/nau7802.c ****     }
 595:Core/Src/nau7802.c **** 
 596:Core/Src/nau7802.c ****     if (mode != 0) { // Disable
 597:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_BGPCP_BIT);
 598:Core/Src/nau7802.c **** 
 599:Core/Src/nau7802.c ****     } else { // Enable
 600:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_BGPCP_BIT));
 601:Core/Src/nau7802.c ****     }
 602:Core/Src/nau7802.c **** }
 603:Core/Src/nau7802.c **** 
 604:Core/Src/nau7802.c **** /**
 605:Core/Src/nau7802.c ****  * @brief Enables extened common mode range for unipolar configuration. See datasheet for details. 
 606:Core/Src/nau7802.c ****  * 0 - Disabled
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 13


 607:Core/Src/nau7802.c ****  * 1 - Disabled
 608:Core/Src/nau7802.c ****  * 2 - Voltage range close to REFN
 609:Core/Src/nau7802.c ****  * 3 - Voltage range close to REFP
 610:Core/Src/nau7802.c ****  * TODO: Test
 611:Core/Src/nau7802.c ****  *
 612:Core/Src/nau7802.c ****  * @param adc adc instance
 613:Core/Src/nau7802.c ****  * @param mode mode selection, range from 0 to 3
 614:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 615:Core/Src/nau7802.c ****  */
 616:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_extended_cm(nau7802_t *adc, int mode) {
 617:Core/Src/nau7802.c ****     uint8_t           reg_state;
 618:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 619:Core/Src/nau7802.c **** 
 620:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_ADC, &reg_state);
 621:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 622:Core/Src/nau7802.c ****         // Return if gsetting is outside valid range
 623:Core/Src/nau7802.c ****         return ret;
 624:Core/Src/nau7802.c ****     }
 625:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_ADC_ADC_VCM(mode));
 626:Core/Src/nau7802.c **** }
 627:Core/Src/nau7802.c **** 
 628:Core/Src/nau7802.c **** /**
 629:Core/Src/nau7802.c ****  * @brief Sets the LDO output mode, improved stability and lower gain or improved accurary and high
 630:Core/Src/nau7802.c ****  * TODO: Test
 631:Core/Src/nau7802.c ****  *
 632:Core/Src/nau7802.c ****  * @param adc adc instance
 633:Core/Src/nau7802.c ****  * @param mode 1 for improved stability, 0 for improved accuracy
 634:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 635:Core/Src/nau7802.c ****  */
 636:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_ldomode(nau7802_t *adc, int mode) {
 637:Core/Src/nau7802.c ****     uint8_t           reg_state;
 638:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 639:Core/Src/nau7802.c **** 
 640:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 641:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 642:Core/Src/nau7802.c ****         return ret;
 643:Core/Src/nau7802.c ****     }
 644:Core/Src/nau7802.c **** 
 645:Core/Src/nau7802.c ****     if (mode != 0) { // Improved stability
 646:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_REG_BGPCP_BIT);
 647:Core/Src/nau7802.c **** 
 648:Core/Src/nau7802.c ****     } else { // Improved accuracy
 649:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_REG_BGPCP_BIT));
 650:Core/Src/nau7802.c ****     }
 651:Core/Src/nau7802.c **** }
 652:Core/Src/nau7802.c **** 
 653:Core/Src/nau7802.c **** /**
 654:Core/Src/nau7802.c ****  * @brief Sets the enable state of the PGA output buffer.
 655:Core/Src/nau7802.c ****  * TODO: Test
 656:Core/Src/nau7802.c ****  *
 657:Core/Src/nau7802.c ****  * @param adc adc instance
 658:Core/Src/nau7802.c ****  * @param mode 1 for enable output buffer, 0 for disable
 659:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 660:Core/Src/nau7802.c ****  */
 661:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_buff_en(nau7802_t *adc, int mode) {
 662:Core/Src/nau7802.c ****     uint8_t           reg_state;
 663:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 14


 664:Core/Src/nau7802.c **** 
 665:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 666:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 667:Core/Src/nau7802.c ****         return ret;
 668:Core/Src/nau7802.c ****     }
 669:Core/Src/nau7802.c **** 
 670:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 671:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_BUFF_EN_BIT);
 672:Core/Src/nau7802.c **** 
 673:Core/Src/nau7802.c ****     } else { // Disable
 674:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_BUFF_EN_BIT));
 675:Core/Src/nau7802.c ****     }
 676:Core/Src/nau7802.c **** }
 677:Core/Src/nau7802.c **** /**
 678:Core/Src/nau7802.c ****  * @brief Sets the enable state of the PGA bypass.
 679:Core/Src/nau7802.c ****  * TODO: Test
 680:Core/Src/nau7802.c ****  *
 681:Core/Src/nau7802.c ****  * @param adc adc instance
 682:Core/Src/nau7802.c ****  * @param mode 1 to enable PGA bypass, 0 to disable bypass
 683:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 684:Core/Src/nau7802.c ****  */
 685:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_bypass_en(nau7802_t *adc, int mode) {
 686:Core/Src/nau7802.c ****     uint8_t           reg_state;
 687:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 688:Core/Src/nau7802.c **** 
 689:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 690:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 691:Core/Src/nau7802.c ****         return ret;
 692:Core/Src/nau7802.c ****     }
 693:Core/Src/nau7802.c **** 
 694:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 695:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_BYPASS_EN_BIT);
 696:Core/Src/nau7802.c **** 
 697:Core/Src/nau7802.c ****     } else { // Disable
 698:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_BYPASS_EN_BIT));
 699:Core/Src/nau7802.c ****     }
 700:Core/Src/nau7802.c **** }
 701:Core/Src/nau7802.c **** 
 702:Core/Src/nau7802.c **** /**
 703:Core/Src/nau7802.c ****  * @brief Sets the enable state of the PGA input phase inversion.
 704:Core/Src/nau7802.c ****  * TODO: Test
 705:Core/Src/nau7802.c ****  *
 706:Core/Src/nau7802.c ****  * @param adc adc instance
 707:Core/Src/nau7802.c ****  * @param mode 1 to invert PGA input phase, 0 for normal mode
 708:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 709:Core/Src/nau7802.c ****  */
 710:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_inv_en(nau7802_t *adc, int mode) {
 711:Core/Src/nau7802.c ****     uint8_t           reg_state;
 712:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 713:Core/Src/nau7802.c **** 
 714:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 715:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 716:Core/Src/nau7802.c ****         return ret;
 717:Core/Src/nau7802.c ****     }
 718:Core/Src/nau7802.c **** 
 719:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 720:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_PGAINV_BIT);
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 15


 721:Core/Src/nau7802.c **** 
 722:Core/Src/nau7802.c ****     } else { // Disable
 723:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_PGAINV_BIT));
 724:Core/Src/nau7802.c ****     }
 725:Core/Src/nau7802.c **** }
 726:Core/Src/nau7802.c **** 
 727:Core/Src/nau7802.c **** /**
 728:Core/Src/nau7802.c ****  * @brief Sets the enable state for the PGA chopper.
 729:Core/Src/nau7802.c ****  * TODO: Test
 730:Core/Src/nau7802.c ****  *
 731:Core/Src/nau7802.c ****  * @param adc adc instance
 732:Core/Src/nau7802.c ****  * @param mode 1 to disable chopper, 0 for normal mode
 733:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 734:Core/Src/nau7802.c ****  */
 735:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_chop_den(nau7802_t *adc, int mode) {
 736:Core/Src/nau7802.c ****     uint8_t           reg_state;
 737:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 738:Core/Src/nau7802.c **** 
 739:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 740:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 741:Core/Src/nau7802.c ****         return ret;
 742:Core/Src/nau7802.c ****     }
 743:Core/Src/nau7802.c **** 
 744:Core/Src/nau7802.c ****     if (mode != 0) { // Disable
 745:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_PGAINV_BIT);
 746:Core/Src/nau7802.c **** 
 747:Core/Src/nau7802.c ****     } else { // Enable
 748:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_PGAINV_BIT));
 749:Core/Src/nau7802.c ****     }
 750:Core/Src/nau7802.c **** }
 751:Core/Src/nau7802.c **** 
 752:Core/Src/nau7802.c **** /**
 753:Core/Src/nau7802.c ****  * @brief Sets the PGA output bypass capacitor state. Capacitor is external and placed across Vin2P
 754:Core/Src/nau7802.c ****  * TODO: Test
 755:Core/Src/nau7802.c ****  *
 756:Core/Src/nau7802.c ****  * @param adc adc instance
 757:Core/Src/nau7802.c ****  * @param mode 1 for external bypass capacitor, 0 for normal
 758:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 759:Core/Src/nau7802.c ****  */
 760:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_cap_en(nau7802_t *adc, int mode) {
 761:Core/Src/nau7802.c ****     uint8_t           reg_state;
 762:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 763:Core/Src/nau7802.c **** 
 764:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 765:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 766:Core/Src/nau7802.c ****         return ret;
 767:Core/Src/nau7802.c ****     }
 768:Core/Src/nau7802.c **** 
 769:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 770:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, reg_state | NAU7802_PWR_CTRL_PGA_CAP_EN
 771:Core/Src/nau7802.c **** 
 772:Core/Src/nau7802.c ****     } else { // Disable
 773:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, reg_state & (~NAU7802_PWR_CTRL_PGA_CAP_
 774:Core/Src/nau7802.c ****     }
 775:Core/Src/nau7802.c **** }
 776:Core/Src/nau7802.c **** 
 777:Core/Src/nau7802.c **** /**
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 16


 778:Core/Src/nau7802.c ****  * @brief Sets the master bias current for the device. Lower power modes reduce accuracy. Valid mod
 779:Core/Src/nau7802.c ****  * 7 - 54%
 780:Core/Src/nau7802.c ****  * 6 - 58%
 781:Core/Src/nau7802.c ****  * 5 - 62%
 782:Core/Src/nau7802.c ****  * 4 - 67%
 783:Core/Src/nau7802.c ****  * 3 - 73%
 784:Core/Src/nau7802.c ****  * 2 - 80%
 785:Core/Src/nau7802.c ****  * 1 - 90%
 786:Core/Src/nau7802.c ****  * 0 - 100%
 787:Core/Src/nau7802.c ****  * Returns without setting if given mode is not valid.
 788:Core/Src/nau7802.c ****  * TODO: Test
 789:Core/Src/nau7802.c ****  *
 790:Core/Src/nau7802.c ****  * @param adc adc instance
 791:Core/Src/nau7802.c ****  * @param mode master current setting. Valid range is 0 to 7
 792:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 793:Core/Src/nau7802.c ****  */
 794:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_biase_curr(nau7802_t *adc, int mode) {
 795:Core/Src/nau7802.c ****     uint8_t           reg_state;
 796:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 797:Core/Src/nau7802.c **** 
 798:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 799:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 7)) {
 800:Core/Src/nau7802.c ****         // Return if mode is outside valid range
 801:Core/Src/nau7802.c ****         return ret;
 802:Core/Src/nau7802.c ****     }
 803:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_MASTER_BIAS_CURR(mode));
 804:Core/Src/nau7802.c **** }
 805:Core/Src/nau7802.c **** 
 806:Core/Src/nau7802.c **** /**
 807:Core/Src/nau7802.c ****  * @brief Sets the ADC bias current as a percentage of the master current. Lower power modes reduce
 808:Core/Src/nau7802.c ****  * modes are:
 809:Core/Src/nau7802.c ****  * 3 - 25%
 810:Core/Src/nau7802.c ****  * 2 - 50%
 811:Core/Src/nau7802.c ****  * 1 - 75%
 812:Core/Src/nau7802.c ****  * 0 - 100%
 813:Core/Src/nau7802.c ****  * Returns without setting if given mode is not valid.
 814:Core/Src/nau7802.c ****  * TODO: Test
 815:Core/Src/nau7802.c ****  *
 816:Core/Src/nau7802.c ****  * @param adc adc instance
 817:Core/Src/nau7802.c ****  * @param mode ADC bias current setting. Valid range is 0 to 3
 818:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 819:Core/Src/nau7802.c ****  */
 820:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_adc_curr(nau7802_t *adc, int mode) {
 821:Core/Src/nau7802.c ****     uint8_t           reg_state;
 822:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 823:Core/Src/nau7802.c **** 
 824:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 825:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 826:Core/Src/nau7802.c ****         // Return if mode is outside valid range
 827:Core/Src/nau7802.c ****         return ret;
 828:Core/Src/nau7802.c ****     }
 829:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_ADC_CURR(mode));
 830:Core/Src/nau7802.c **** }
 831:Core/Src/nau7802.c **** 
 832:Core/Src/nau7802.c **** /**
 833:Core/Src/nau7802.c ****  * @brief Sets the PGA bias current as a percentage of the master bias current. Valid modes are:
 834:Core/Src/nau7802.c ****  * 3 - 70%
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 17


 835:Core/Src/nau7802.c ****  * 2 - 86%
 836:Core/Src/nau7802.c ****  * 1 - 95%
 837:Core/Src/nau7802.c ****  * 0 - 100%
 838:Core/Src/nau7802.c ****  * Returns without setting if given mode is not valid
 839:Core/Src/nau7802.c ****  * TODO: Test
 840:Core/Src/nau7802.c ****  *
 841:Core/Src/nau7802.c ****  * @param adc adc instance
 842:Core/Src/nau7802.c ****  * @param mode PGA bias current setting. Valid range is 0 to 3
 843:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 844:Core/Src/nau7802.c ****  */
 845:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_curr(nau7802_t *adc, int mode) {
 846:Core/Src/nau7802.c ****     uint8_t           reg_state;
 847:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 848:Core/Src/nau7802.c **** 
 849:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 850:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 851:Core/Src/nau7802.c ****         // Return if mode is outside valid range
 852:Core/Src/nau7802.c ****         return ret;
 853:Core/Src/nau7802.c ****     }
 854:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_PGA_CURR(mode));
 855:Core/Src/nau7802.c **** }
 856:Core/Src/nau7802.c **** 
 857:Core/Src/nau7802.c **** /**
 858:Core/Src/nau7802.c ****  * @brief Reads the most recent complete conversion from the ADC. Stores the 24-bit result in the c
 859:Core/Src/nau7802.c ****  * the adc instance. Data is read using "I2C Burst Read 3 byte" mode. The CS bit is not set by this
 860:Core/Src/nau7802.c ****  * bit is not checked. This results in reading the conversion last latched by the ADC.
 861:Core/Src/nau7802.c ****  * TODO: Test
 862:Core/Src/nau7802.c ****  *
 863:Core/Src/nau7802.c ****  * @param adc adc instance
 864:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 865:Core/Src/nau7802.c ****  */
 866:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_conversion_read(nau7802_t *adc) {
  82              		.loc 1 866 59 is_stmt 1 view -0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 8
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		.loc 1 866 59 is_stmt 0 view .LVU19
  87 0000 30B5     		push	{r4, r5, lr}
  88              	.LCFI1:
  89              		.cfi_def_cfa_offset 12
  90              		.cfi_offset 4, -12
  91              		.cfi_offset 5, -8
  92              		.cfi_offset 14, -4
  93 0002 87B0     		sub	sp, sp, #28
  94              	.LCFI2:
  95              		.cfi_def_cfa_offset 40
  96 0004 0500     		movs	r5, r0
 867:Core/Src/nau7802.c ****     uint8_t           reading[3]; // Holds each of the 8 bit register reads
  97              		.loc 1 867 5 is_stmt 1 view .LVU20
 868:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
  98              		.loc 1 868 5 view .LVU21
 869:Core/Src/nau7802.c **** 
 870:Core/Src/nau7802.c ****     ret = HAL_I2C_Mem_Read(adc->i2c, NAU7802_I2C_BASEADDR << 1, NAU7802_REG_ADCO_B2, 1, reading, 3,
  99              		.loc 1 870 5 view .LVU22
 100              		.loc 1 870 11 is_stmt 0 view .LVU23
 101 0006 3223     		movs	r3, #50
 102 0008 0293     		str	r3, [sp, #8]
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 18


 103 000a 2F3B     		subs	r3, r3, #47
 104 000c 0193     		str	r3, [sp, #4]
 105 000e 05AC     		add	r4, sp, #20
 106 0010 0094     		str	r4, [sp]
 107 0012 023B     		subs	r3, r3, #2
 108 0014 1222     		movs	r2, #18
 109 0016 5421     		movs	r1, #84
 110 0018 0068     		ldr	r0, [r0]
 111              	.LVL5:
 112              		.loc 1 870 11 view .LVU24
 113 001a FFF7FEFF 		bl	HAL_I2C_Mem_Read
 114              	.LVL6:
 871:Core/Src/nau7802.c ****                            NAU7802_I2C_TIMEOUT_MS);
 872:Core/Src/nau7802.c ****     // Need to shift MSB of 24-bit all the way to MSB of 32-bit type then shift back because result
 873:Core/Src/nau7802.c ****     // maintain the signedness
 874:Core/Src/nau7802.c ****     adc->conversion = ((reading[0] << 24) | (reading[1] << 16) | (reading[2] << 8)) >> 8;
 115              		.loc 1 874 5 is_stmt 1 view .LVU25
 116              		.loc 1 874 32 is_stmt 0 view .LVU26
 117 001e 2378     		ldrb	r3, [r4]
 118              		.loc 1 874 36 view .LVU27
 119 0020 1B06     		lsls	r3, r3, #24
 120              		.loc 1 874 53 view .LVU28
 121 0022 6278     		ldrb	r2, [r4, #1]
 122              		.loc 1 874 57 view .LVU29
 123 0024 1204     		lsls	r2, r2, #16
 124              		.loc 1 874 43 view .LVU30
 125 0026 1343     		orrs	r3, r2
 126              		.loc 1 874 74 view .LVU31
 127 0028 A278     		ldrb	r2, [r4, #2]
 128              		.loc 1 874 78 view .LVU32
 129 002a 1202     		lsls	r2, r2, #8
 130              		.loc 1 874 64 view .LVU33
 131 002c 1343     		orrs	r3, r2
 132              		.loc 1 874 85 view .LVU34
 133 002e 1B12     		asrs	r3, r3, #8
 134              		.loc 1 874 21 view .LVU35
 135 0030 6B60     		str	r3, [r5, #4]
 875:Core/Src/nau7802.c **** 
 876:Core/Src/nau7802.c ****     return ret;
 136              		.loc 1 876 5 is_stmt 1 view .LVU36
 877:Core/Src/nau7802.c **** }
 137              		.loc 1 877 1 is_stmt 0 view .LVU37
 138 0032 07B0     		add	sp, sp, #28
 139              		@ sp needed
 140              	.LVL7:
 141              		.loc 1 877 1 view .LVU38
 142 0034 30BD     		pop	{r4, r5, pc}
 143              		.cfi_endproc
 144              	.LFE353:
 146              		.section	.text.nau7802_reg_write,"ax",%progbits
 147              		.align	1
 148              		.global	nau7802_reg_write
 149              		.syntax unified
 150              		.code	16
 151              		.thumb_func
 152              		.fpu softvfp
 154              	nau7802_reg_write:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 19


 155              	.LVL8:
 156              	.LFB358:
 878:Core/Src/nau7802.c **** 
 879:Core/Src/nau7802.c **** /**
 880:Core/Src/nau7802.c ****  * @brief Reads the CR (conversion ready) bit and stores the result in the cready field of the adc 
 881:Core/Src/nau7802.c ****  * indicates a new data conversion is ready to be read.
 882:Core/Src/nau7802.c ****  * TODO: Test
 883:Core/Src/nau7802.c ****  *
 884:Core/Src/nau7802.c ****  * @param adc adc instance
 885:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 886:Core/Src/nau7802.c ****  */
 887:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_cready_read(nau7802_t *adc) {
 888:Core/Src/nau7802.c ****     uint8_t           reg_state;
 889:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 890:Core/Src/nau7802.c **** 
 891:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 892:Core/Src/nau7802.c ****     adc->cready = (reg_state & NAU7802_PUCTRL_CR_BIT) > 0;
 893:Core/Src/nau7802.c **** 
 894:Core/Src/nau7802.c ****     return ret;
 895:Core/Src/nau7802.c **** }
 896:Core/Src/nau7802.c **** 
 897:Core/Src/nau7802.c **** /**
 898:Core/Src/nau7802.c ****  * @brief Reads the PUR (Power up ready) bit and stores the result in the puready field of the adc 
 899:Core/Src/nau7802.c ****  * indicates powered up and read.
 900:Core/Src/nau7802.c ****  * TODO: Test
 901:Core/Src/nau7802.c ****  *
 902:Core/Src/nau7802.c ****  * @param adc adc instance
 903:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 904:Core/Src/nau7802.c ****  */
 905:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_puready_read(nau7802_t *adc) {
 906:Core/Src/nau7802.c ****     uint8_t           reg_state;
 907:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 908:Core/Src/nau7802.c **** 
 909:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 910:Core/Src/nau7802.c ****     adc->puready = (reg_state & NAU7802_PUCTRL_PUR_BIT) > 0;
 911:Core/Src/nau7802.c **** 
 912:Core/Src/nau7802.c ****     return ret;
 913:Core/Src/nau7802.c **** }
 914:Core/Src/nau7802.c **** 
 915:Core/Src/nau7802.c **** /**
 916:Core/Src/nau7802.c ****  * @brief Reads 24-bit the offset calibration number and stores it at location pointed to by *readi
 917:Core/Src/nau7802.c ****  * its own calibration registers, specify either channel 1 or channel 2. If specified channel is no
 918:Core/Src/nau7802.c ****  * returns without updating *reading.
 919:Core/Src/nau7802.c ****  * TODO: Test, not sure if B0 is MSB or LSB
 920:Core/Src/nau7802.c ****  *
 921:Core/Src/nau7802.c ****  * @param adc adc instance
 922:Core/Src/nau7802.c ****  * @param channel channel for calibration
 923:Core/Src/nau7802.c ****  * @param reading pointer to variable to update with offset value
 924:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 925:Core/Src/nau7802.c ****  */
 926:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_offset_cal_read(nau7802_t *adc, int channel, int *reading) {
 927:Core/Src/nau7802.c ****     uint8_t           reg_state;
 928:Core/Src/nau7802.c ****     uint8_t           chan_n_regs[3];
 929:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 930:Core/Src/nau7802.c ****     int32_t          call_offset = 0;
 931:Core/Src/nau7802.c **** 
 932:Core/Src/nau7802.c ****     switch (channel) {
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 20


 933:Core/Src/nau7802.c ****     case NAU7802_CH1:
 934:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_OCAL1_B0;
 935:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_OCAL1_B1;
 936:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_OCAL1_B2;
 937:Core/Src/nau7802.c ****         break;
 938:Core/Src/nau7802.c **** 
 939:Core/Src/nau7802.c ****     case NAU7802_CH2:
 940:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_OCAL2_B0;
 941:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_OCAL2_B1;
 942:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_OCAL2_B2;
 943:Core/Src/nau7802.c ****         break;
 944:Core/Src/nau7802.c **** 
 945:Core/Src/nau7802.c ****     default:
 946:Core/Src/nau7802.c ****         return HAL_OK;
 947:Core/Src/nau7802.c ****     }
 948:Core/Src/nau7802.c **** 
 949:Core/Src/nau7802.c ****     // Read each register (returning if an error occurs)
 950:Core/Src/nau7802.c ****     int i;
 951:Core/Src/nau7802.c ****     for (i = 0; i < 3; i++) {
 952:Core/Src/nau7802.c ****         ret = nau7802_reg_read(adc, chan_n_regs[i], &reg_state);
 953:Core/Src/nau7802.c ****         if (ret != HAL_OK) {
 954:Core/Src/nau7802.c ****             return ret;
 955:Core/Src/nau7802.c ****         }
 956:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
 957:Core/Src/nau7802.c ****     }
 958:Core/Src/nau7802.c **** 
 959:Core/Src/nau7802.c ****     // We put the 24-bit value in the MSBs of the call_offset variable to preserve signedness. Shif
 960:Core/Src/nau7802.c ****     // lower bytes here
 961:Core/Src/nau7802.c ****     *reading = call_offset >> 8;
 962:Core/Src/nau7802.c ****     return ret;
 963:Core/Src/nau7802.c **** }
 964:Core/Src/nau7802.c **** 
 965:Core/Src/nau7802.c **** /**
 966:Core/Src/nau7802.c ****  * @brief Reads the 24-bit gain calibration number and stores it at location pointed to by *reading
 967:Core/Src/nau7802.c ****  * its own calibration registers, specify either channel 1 or channel 2. If specified channel is no
 968:Core/Src/nau7802.c ****  * returns without updating *reading.
 969:Core/Src/nau7802.c ****  * TODO: Test, not sure if B0 is MSB or LSB
 970:Core/Src/nau7802.c ****  *
 971:Core/Src/nau7802.c ****  * @param adc adc instance
 972:Core/Src/nau7802.c ****  * @param channel channel for calibration
 973:Core/Src/nau7802.c ****  * @param reading pointer to variable to update with offset value
 974:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
 975:Core/Src/nau7802.c ****  */
 976:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_gain_cal_read(nau7802_t *adc, int channel, int *reading) {
 977:Core/Src/nau7802.c ****     uint8_t           reg_state;
 978:Core/Src/nau7802.c ****     uint8_t           chan_n_regs[3];
 979:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 980:Core/Src/nau7802.c ****     int32_t          call_offset = 0;
 981:Core/Src/nau7802.c **** 
 982:Core/Src/nau7802.c ****     switch (channel) {
 983:Core/Src/nau7802.c ****     case NAU7802_CH1:
 984:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_GCAL1_B0;
 985:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_GCAL1_B1;
 986:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_GCAL1_B2;
 987:Core/Src/nau7802.c ****         break;
 988:Core/Src/nau7802.c **** 
 989:Core/Src/nau7802.c ****     case NAU7802_CH2:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 21


 990:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_GCAL2_B0;
 991:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_GCAL2_B1;
 992:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_GCAL2_B2;
 993:Core/Src/nau7802.c ****         break;
 994:Core/Src/nau7802.c **** 
 995:Core/Src/nau7802.c ****     default:
 996:Core/Src/nau7802.c ****         return HAL_OK;
 997:Core/Src/nau7802.c ****     }
 998:Core/Src/nau7802.c **** 
 999:Core/Src/nau7802.c ****     // Read each register (returning if an error occurs)
1000:Core/Src/nau7802.c ****     int i;
1001:Core/Src/nau7802.c ****     for (i = 0; i < 3; i++) {
1002:Core/Src/nau7802.c ****         ret = nau7802_reg_read(adc, chan_n_regs[i], &reg_state);
1003:Core/Src/nau7802.c ****         if (ret != HAL_OK) {
1004:Core/Src/nau7802.c ****             return ret;
1005:Core/Src/nau7802.c ****         }
1006:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
1007:Core/Src/nau7802.c ****     }
1008:Core/Src/nau7802.c **** 
1009:Core/Src/nau7802.c ****     // We put the 24-bit value in the MSBs of the call_offset variable to preserve signedness. Shif
1010:Core/Src/nau7802.c ****     // lower bytes here
1011:Core/Src/nau7802.c ****     *reading = call_offset >> 8;
1012:Core/Src/nau7802.c ****     return ret;
1013:Core/Src/nau7802.c **** }
1014:Core/Src/nau7802.c **** 
1015:Core/Src/nau7802.c **** /**
1016:Core/Src/nau7802.c ****  * @brief Writes the value given by val to the address at reg.
1017:Core/Src/nau7802.c ****  * TODO: Test
1018:Core/Src/nau7802.c ****  *
1019:Core/Src/nau7802.c ****  * @param adc adc instance
1020:Core/Src/nau7802.c ****  * @param reg adc register to write to
1021:Core/Src/nau7802.c ****  * @param val value to write to reg
1022:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
1023:Core/Src/nau7802.c ****  */
1024:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_reg_write(nau7802_t *adc, uint8_t reg, uint8_t val) {
 157              		.loc 1 1024 79 is_stmt 1 view -0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 8
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              		.loc 1 1024 79 is_stmt 0 view .LVU40
 162 0000 00B5     		push	{lr}
 163              	.LCFI3:
 164              		.cfi_def_cfa_offset 4
 165              		.cfi_offset 14, -4
 166 0002 87B0     		sub	sp, sp, #28
 167              	.LCFI4:
 168              		.cfi_def_cfa_offset 32
 169 0004 1723     		movs	r3, #23
 170 0006 6B44     		add	r3, r3, sp
 171 0008 1A70     		strb	r2, [r3]
1025:Core/Src/nau7802.c ****     return HAL_I2C_Mem_Write(adc->i2c, NAU7802_I2C_BASEADDR, reg, 1, &val, 1, NAU7802_I2C_TIMEOUT_M
 172              		.loc 1 1025 5 is_stmt 1 view .LVU41
 173              		.loc 1 1025 12 is_stmt 0 view .LVU42
 174 000a 0A00     		movs	r2, r1
 175              	.LVL9:
 176              		.loc 1 1025 12 view .LVU43
 177 000c 0068     		ldr	r0, [r0]
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 22


 178              	.LVL10:
 179              		.loc 1 1025 12 view .LVU44
 180 000e 3221     		movs	r1, #50
 181              	.LVL11:
 182              		.loc 1 1025 12 view .LVU45
 183 0010 0291     		str	r1, [sp, #8]
 184              	.LVL12:
 185              		.loc 1 1025 12 view .LVU46
 186 0012 3139     		subs	r1, r1, #49
 187 0014 0191     		str	r1, [sp, #4]
 188 0016 0093     		str	r3, [sp]
 189 0018 0123     		movs	r3, #1
 190 001a 2931     		adds	r1, r1, #41
 191 001c FFF7FEFF 		bl	HAL_I2C_Mem_Write
 192              	.LVL13:
1026:Core/Src/nau7802.c **** }
 193              		.loc 1 1026 1 view .LVU47
 194 0020 07B0     		add	sp, sp, #28
 195              		@ sp needed
 196 0022 00BD     		pop	{pc}
 197              		.cfi_endproc
 198              	.LFE358:
 200              		.section	.text.nau7802_reg_read,"ax",%progbits
 201              		.align	1
 202              		.global	nau7802_reg_read
 203              		.syntax unified
 204              		.code	16
 205              		.thumb_func
 206              		.fpu softvfp
 208              	nau7802_reg_read:
 209              	.LVL14:
 210              	.LFB359:
1027:Core/Src/nau7802.c **** 
1028:Core/Src/nau7802.c **** /**
1029:Core/Src/nau7802.c ****  * @brief Reads the value at address reg and stores it at variable pointed to by val.
1030:Core/Src/nau7802.c ****  * TODO: Test
1031:Core/Src/nau7802.c ****  *
1032:Core/Src/nau7802.c ****  * @param adc adc instance
1033:Core/Src/nau7802.c ****  * @param reg adc register to read from
1034:Core/Src/nau7802.c ****  * @param val pointer to variable to store the reading
1035:Core/Src/nau7802.c ****  * @return HAL_StatusTypeDef HAL I2C status message
1036:Core/Src/nau7802.c ****  */
1037:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_reg_read(nau7802_t *adc, uint8_t reg, uint8_t *val) {
 211              		.loc 1 1037 79 is_stmt 1 view -0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215              		.loc 1 1037 79 is_stmt 0 view .LVU49
 216 0000 00B5     		push	{lr}
 217              	.LCFI5:
 218              		.cfi_def_cfa_offset 4
 219              		.cfi_offset 14, -4
 220 0002 85B0     		sub	sp, sp, #20
 221              	.LCFI6:
 222              		.cfi_def_cfa_offset 24
1038:Core/Src/nau7802.c ****     return HAL_I2C_Mem_Read(adc->i2c, NAU7802_I2C_BASEADDR, reg, 1, val, 1, NAU7802_I2C_TIMEOUT_MS)
 223              		.loc 1 1038 5 is_stmt 1 view .LVU50
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 23


 224              		.loc 1 1038 12 is_stmt 0 view .LVU51
 225 0004 0068     		ldr	r0, [r0]
 226              	.LVL15:
 227              		.loc 1 1038 12 view .LVU52
 228 0006 3223     		movs	r3, #50
 229 0008 0293     		str	r3, [sp, #8]
 230 000a 313B     		subs	r3, r3, #49
 231 000c 0193     		str	r3, [sp, #4]
 232 000e 0092     		str	r2, [sp]
 233 0010 0A00     		movs	r2, r1
 234              	.LVL16:
 235              		.loc 1 1038 12 view .LVU53
 236 0012 2A21     		movs	r1, #42
 237              	.LVL17:
 238              		.loc 1 1038 12 view .LVU54
 239 0014 FFF7FEFF 		bl	HAL_I2C_Mem_Read
 240              	.LVL18:
1039:Core/Src/nau7802.c **** }...
 241              		.loc 1 1039 1 view .LVU55
 242 0018 05B0     		add	sp, sp, #20
 243              		@ sp needed
 244 001a 00BD     		pop	{pc}
 245              		.cfi_endproc
 246              	.LFE359:
 248              		.section	.text.nau7802_avdd_source,"ax",%progbits
 249              		.align	1
 250              		.global	nau7802_avdd_source
 251              		.syntax unified
 252              		.code	16
 253              		.thumb_func
 254              		.fpu softvfp
 256              	nau7802_avdd_source:
 257              	.LVL19:
 258              	.LFB323:
  42:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_avdd_source(nau7802_t *adc, int source) {
 259              		.loc 1 42 67 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 8
 262              		@ frame_needed = 0, uses_anonymous_args = 0
  42:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_avdd_source(nau7802_t *adc, int source) {
 263              		.loc 1 42 67 is_stmt 0 view .LVU57
 264 0000 30B5     		push	{r4, r5, lr}
 265              	.LCFI7:
 266              		.cfi_def_cfa_offset 12
 267              		.cfi_offset 4, -12
 268              		.cfi_offset 5, -8
 269              		.cfi_offset 14, -4
 270 0002 83B0     		sub	sp, sp, #12
 271              	.LCFI8:
 272              		.cfi_def_cfa_offset 24
 273 0004 0400     		movs	r4, r0
 274 0006 0D00     		movs	r5, r1
  43:Core/Src/nau7802.c ****     uint8_t           reg_state;
 275              		.loc 1 43 5 is_stmt 1 view .LVU58
  44:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 276              		.loc 1 44 5 view .LVU59
  46:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 24


 277              		.loc 1 46 5 view .LVU60
  46:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 278              		.loc 1 46 11 is_stmt 0 view .LVU61
 279 0008 6B46     		mov	r3, sp
 280 000a DA1D     		adds	r2, r3, #7
 281 000c 0021     		movs	r1, #0
 282              	.LVL20:
  46:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 283              		.loc 1 46 11 view .LVU62
 284 000e FFF7FEFF 		bl	nau7802_reg_read
 285              	.LVL21:
  47:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 286              		.loc 1 47 5 is_stmt 1 view .LVU63
  47:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 287              		.loc 1 47 8 is_stmt 0 view .LVU64
 288 0012 0028     		cmp	r0, #0
 289 0014 0CD1     		bne	.L6
  51:Core/Src/nau7802.c ****     if (source != 0) { // Set to AVDD pin
 290              		.loc 1 51 5 is_stmt 1 view .LVU65
  51:Core/Src/nau7802.c ****     if (source != 0) { // Set to AVDD pin
 291              		.loc 1 51 8 is_stmt 0 view .LVU66
 292 0016 002D     		cmp	r5, #0
 293 0018 0CD0     		beq	.L7
  52:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_AVDSS_BIT);
 294              		.loc 1 52 9 is_stmt 1 view .LVU67
  52:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_AVDSS_BIT);
 295              		.loc 1 52 16 is_stmt 0 view .LVU68
 296 001a 6B46     		mov	r3, sp
 297 001c 0733     		adds	r3, r3, #7
 298 001e 1B78     		ldrb	r3, [r3]
 299 0020 8022     		movs	r2, #128
 300 0022 5242     		rsbs	r2, r2, #0
 301 0024 1A43     		orrs	r2, r3
 302 0026 D2B2     		uxtb	r2, r2
 303 0028 0021     		movs	r1, #0
 304 002a 2000     		movs	r0, r4
 305              	.LVL22:
  52:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_AVDSS_BIT);
 306              		.loc 1 52 16 view .LVU69
 307 002c FFF7FEFF 		bl	nau7802_reg_write
 308              	.LVL23:
 309              	.L6:
  57:Core/Src/nau7802.c **** }
 310              		.loc 1 57 1 view .LVU70
 311 0030 03B0     		add	sp, sp, #12
 312              		@ sp needed
 313              	.LVL24:
 314              	.LVL25:
  57:Core/Src/nau7802.c **** }
 315              		.loc 1 57 1 view .LVU71
 316 0032 30BD     		pop	{r4, r5, pc}
 317              	.LVL26:
 318              	.L7:
  55:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_AVDSS_BIT));
 319              		.loc 1 55 9 is_stmt 1 view .LVU72
  55:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_AVDSS_BIT));
 320              		.loc 1 55 16 is_stmt 0 view .LVU73
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 25


 321 0034 6B46     		mov	r3, sp
 322 0036 0733     		adds	r3, r3, #7
 323 0038 1B78     		ldrb	r3, [r3]
 324 003a 7F22     		movs	r2, #127
 325 003c 1A40     		ands	r2, r3
 326 003e 0021     		movs	r1, #0
 327 0040 2000     		movs	r0, r4
 328              	.LVL27:
  55:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_AVDSS_BIT));
 329              		.loc 1 55 16 view .LVU74
 330 0042 FFF7FEFF 		bl	nau7802_reg_write
 331              	.LVL28:
 332 0046 F3E7     		b	.L6
 333              		.cfi_endproc
 334              	.LFE323:
 336              		.section	.text.nau7802_oscs_source,"ax",%progbits
 337              		.align	1
 338              		.global	nau7802_oscs_source
 339              		.syntax unified
 340              		.code	16
 341              		.thumb_func
 342              		.fpu softvfp
 344              	nau7802_oscs_source:
 345              	.LVL29:
 346              	.LFB324:
  66:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_oscs_source(nau7802_t *adc, int source) {
 347              		.loc 1 66 67 is_stmt 1 view -0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 8
 350              		@ frame_needed = 0, uses_anonymous_args = 0
  66:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_oscs_source(nau7802_t *adc, int source) {
 351              		.loc 1 66 67 is_stmt 0 view .LVU76
 352 0000 30B5     		push	{r4, r5, lr}
 353              	.LCFI9:
 354              		.cfi_def_cfa_offset 12
 355              		.cfi_offset 4, -12
 356              		.cfi_offset 5, -8
 357              		.cfi_offset 14, -4
 358 0002 83B0     		sub	sp, sp, #12
 359              	.LCFI10:
 360              		.cfi_def_cfa_offset 24
 361 0004 0400     		movs	r4, r0
 362 0006 0D00     		movs	r5, r1
  67:Core/Src/nau7802.c ****     uint8_t           reg_state;
 363              		.loc 1 67 5 is_stmt 1 view .LVU77
  68:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 364              		.loc 1 68 5 view .LVU78
  70:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 365              		.loc 1 70 5 view .LVU79
  70:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 366              		.loc 1 70 11 is_stmt 0 view .LVU80
 367 0008 6B46     		mov	r3, sp
 368 000a DA1D     		adds	r2, r3, #7
 369 000c 0021     		movs	r1, #0
 370              	.LVL30:
  70:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 371              		.loc 1 70 11 view .LVU81
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 26


 372 000e FFF7FEFF 		bl	nau7802_reg_read
 373              	.LVL31:
  71:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 374              		.loc 1 71 5 is_stmt 1 view .LVU82
  71:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 375              		.loc 1 71 8 is_stmt 0 view .LVU83
 376 0012 0028     		cmp	r0, #0
 377 0014 0AD1     		bne	.L9
  75:Core/Src/nau7802.c ****     if (source != 0) { // Set external oscillator
 378              		.loc 1 75 5 is_stmt 1 view .LVU84
  75:Core/Src/nau7802.c ****     if (source != 0) { // Set external oscillator
 379              		.loc 1 75 8 is_stmt 0 view .LVU85
 380 0016 002D     		cmp	r5, #0
 381 0018 0AD0     		beq	.L10
  76:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_OSCS_BIT);
 382              		.loc 1 76 9 is_stmt 1 view .LVU86
  76:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_OSCS_BIT);
 383              		.loc 1 76 16 is_stmt 0 view .LVU87
 384 001a 6B46     		mov	r3, sp
 385 001c DA79     		ldrb	r2, [r3, #7]
 386 001e 4023     		movs	r3, #64
 387 0020 1A43     		orrs	r2, r3
 388 0022 D2B2     		uxtb	r2, r2
 389 0024 0021     		movs	r1, #0
 390 0026 2000     		movs	r0, r4
 391              	.LVL32:
  76:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_OSCS_BIT);
 392              		.loc 1 76 16 view .LVU88
 393 0028 FFF7FEFF 		bl	nau7802_reg_write
 394              	.LVL33:
 395              	.L9:
  80:Core/Src/nau7802.c **** }
 396              		.loc 1 80 1 view .LVU89
 397 002c 03B0     		add	sp, sp, #12
 398              		@ sp needed
 399              	.LVL34:
 400              	.LVL35:
  80:Core/Src/nau7802.c **** }
 401              		.loc 1 80 1 view .LVU90
 402 002e 30BD     		pop	{r4, r5, pc}
 403              	.LVL36:
 404              	.L10:
  78:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_OSCS_BIT));
 405              		.loc 1 78 9 is_stmt 1 view .LVU91
  78:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_OSCS_BIT));
 406              		.loc 1 78 16 is_stmt 0 view .LVU92
 407 0030 6B46     		mov	r3, sp
 408 0032 DA79     		ldrb	r2, [r3, #7]
 409 0034 4023     		movs	r3, #64
 410 0036 9A43     		bics	r2, r3
 411 0038 0021     		movs	r1, #0
 412 003a 2000     		movs	r0, r4
 413              	.LVL37:
  78:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_OSCS_BIT));
 414              		.loc 1 78 16 view .LVU93
 415 003c FFF7FEFF 		bl	nau7802_reg_write
 416              	.LVL38:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 27


 417 0040 F4E7     		b	.L9
 418              		.cfi_endproc
 419              	.LFE324:
 421              		.section	.text.nau7802_pwr_analog,"ax",%progbits
 422              		.align	1
 423              		.global	nau7802_pwr_analog
 424              		.syntax unified
 425              		.code	16
 426              		.thumb_func
 427              		.fpu softvfp
 429              	nau7802_pwr_analog:
 430              	.LVL39:
 431              	.LFB325:
  90:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pwr_analog(nau7802_t *adc, int mode) {
 432              		.loc 1 90 64 is_stmt 1 view -0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 8
 435              		@ frame_needed = 0, uses_anonymous_args = 0
  90:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pwr_analog(nau7802_t *adc, int mode) {
 436              		.loc 1 90 64 is_stmt 0 view .LVU95
 437 0000 30B5     		push	{r4, r5, lr}
 438              	.LCFI11:
 439              		.cfi_def_cfa_offset 12
 440              		.cfi_offset 4, -12
 441              		.cfi_offset 5, -8
 442              		.cfi_offset 14, -4
 443 0002 83B0     		sub	sp, sp, #12
 444              	.LCFI12:
 445              		.cfi_def_cfa_offset 24
 446 0004 0400     		movs	r4, r0
 447 0006 0D00     		movs	r5, r1
  91:Core/Src/nau7802.c ****     uint8_t           reg_state;
 448              		.loc 1 91 5 is_stmt 1 view .LVU96
  92:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 449              		.loc 1 92 5 view .LVU97
  94:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 450              		.loc 1 94 5 view .LVU98
  94:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 451              		.loc 1 94 11 is_stmt 0 view .LVU99
 452 0008 6B46     		mov	r3, sp
 453 000a DA1D     		adds	r2, r3, #7
 454 000c 0021     		movs	r1, #0
 455              	.LVL40:
  94:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 456              		.loc 1 94 11 view .LVU100
 457 000e FFF7FEFF 		bl	nau7802_reg_read
 458              	.LVL41:
  95:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 459              		.loc 1 95 5 is_stmt 1 view .LVU101
  95:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 460              		.loc 1 95 8 is_stmt 0 view .LVU102
 461 0012 0028     		cmp	r0, #0
 462 0014 0AD1     		bne	.L12
  99:Core/Src/nau7802.c ****     if (mode != 0) { // Power up
 463              		.loc 1 99 5 is_stmt 1 view .LVU103
  99:Core/Src/nau7802.c ****     if (mode != 0) { // Power up
 464              		.loc 1 99 8 is_stmt 0 view .LVU104
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 28


 465 0016 002D     		cmp	r5, #0
 466 0018 0AD0     		beq	.L13
 100:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_PUA_BIT);
 467              		.loc 1 100 9 is_stmt 1 view .LVU105
 100:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_PUA_BIT);
 468              		.loc 1 100 16 is_stmt 0 view .LVU106
 469 001a 6B46     		mov	r3, sp
 470 001c DA79     		ldrb	r2, [r3, #7]
 471 001e 0423     		movs	r3, #4
 472 0020 1A43     		orrs	r2, r3
 473 0022 D2B2     		uxtb	r2, r2
 474 0024 0021     		movs	r1, #0
 475 0026 2000     		movs	r0, r4
 476              	.LVL42:
 100:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_PUA_BIT);
 477              		.loc 1 100 16 view .LVU107
 478 0028 FFF7FEFF 		bl	nau7802_reg_write
 479              	.LVL43:
 480              	.L12:
 104:Core/Src/nau7802.c **** }
 481              		.loc 1 104 1 view .LVU108
 482 002c 03B0     		add	sp, sp, #12
 483              		@ sp needed
 484              	.LVL44:
 485              	.LVL45:
 104:Core/Src/nau7802.c **** }
 486              		.loc 1 104 1 view .LVU109
 487 002e 30BD     		pop	{r4, r5, pc}
 488              	.LVL46:
 489              	.L13:
 102:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_PUA_BIT));
 490              		.loc 1 102 9 is_stmt 1 view .LVU110
 102:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_PUA_BIT));
 491              		.loc 1 102 16 is_stmt 0 view .LVU111
 492 0030 6B46     		mov	r3, sp
 493 0032 DA79     		ldrb	r2, [r3, #7]
 494 0034 0423     		movs	r3, #4
 495 0036 9A43     		bics	r2, r3
 496 0038 0021     		movs	r1, #0
 497 003a 2000     		movs	r0, r4
 498              	.LVL47:
 102:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_PUA_BIT));
 499              		.loc 1 102 16 view .LVU112
 500 003c FFF7FEFF 		bl	nau7802_reg_write
 501              	.LVL48:
 502 0040 F4E7     		b	.L12
 503              		.cfi_endproc
 504              	.LFE325:
 506              		.section	.text.nau7802_pwr_digital,"ax",%progbits
 507              		.align	1
 508              		.global	nau7802_pwr_digital
 509              		.syntax unified
 510              		.code	16
 511              		.thumb_func
 512              		.fpu softvfp
 514              	nau7802_pwr_digital:
 515              	.LVL49:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 29


 516              	.LFB326:
 114:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pwr_digital(nau7802_t *adc, int mode) {
 517              		.loc 1 114 65 is_stmt 1 view -0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 8
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 114:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pwr_digital(nau7802_t *adc, int mode) {
 521              		.loc 1 114 65 is_stmt 0 view .LVU114
 522 0000 30B5     		push	{r4, r5, lr}
 523              	.LCFI13:
 524              		.cfi_def_cfa_offset 12
 525              		.cfi_offset 4, -12
 526              		.cfi_offset 5, -8
 527              		.cfi_offset 14, -4
 528 0002 83B0     		sub	sp, sp, #12
 529              	.LCFI14:
 530              		.cfi_def_cfa_offset 24
 531 0004 0400     		movs	r4, r0
 532 0006 0D00     		movs	r5, r1
 115:Core/Src/nau7802.c ****     uint8_t           reg_state;
 533              		.loc 1 115 5 is_stmt 1 view .LVU115
 116:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 534              		.loc 1 116 5 view .LVU116
 118:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 535              		.loc 1 118 5 view .LVU117
 118:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 536              		.loc 1 118 11 is_stmt 0 view .LVU118
 537 0008 6B46     		mov	r3, sp
 538 000a DA1D     		adds	r2, r3, #7
 539 000c 0021     		movs	r1, #0
 540              	.LVL50:
 118:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 541              		.loc 1 118 11 view .LVU119
 542 000e FFF7FEFF 		bl	nau7802_reg_read
 543              	.LVL51:
 119:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 544              		.loc 1 119 5 is_stmt 1 view .LVU120
 119:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 545              		.loc 1 119 8 is_stmt 0 view .LVU121
 546 0012 0028     		cmp	r0, #0
 547 0014 0AD1     		bne	.L15
 123:Core/Src/nau7802.c ****     if (mode != 0) { // Power up
 548              		.loc 1 123 5 is_stmt 1 view .LVU122
 123:Core/Src/nau7802.c ****     if (mode != 0) { // Power up
 549              		.loc 1 123 8 is_stmt 0 view .LVU123
 550 0016 002D     		cmp	r5, #0
 551 0018 0AD0     		beq	.L16
 124:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_PUD_BIT);
 552              		.loc 1 124 9 is_stmt 1 view .LVU124
 124:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_PUD_BIT);
 553              		.loc 1 124 16 is_stmt 0 view .LVU125
 554 001a 6B46     		mov	r3, sp
 555 001c DA79     		ldrb	r2, [r3, #7]
 556 001e 0223     		movs	r3, #2
 557 0020 1A43     		orrs	r2, r3
 558 0022 D2B2     		uxtb	r2, r2
 559 0024 0021     		movs	r1, #0
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 30


 560 0026 2000     		movs	r0, r4
 561              	.LVL52:
 124:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_PUD_BIT);
 562              		.loc 1 124 16 view .LVU126
 563 0028 FFF7FEFF 		bl	nau7802_reg_write
 564              	.LVL53:
 565              	.L15:
 129:Core/Src/nau7802.c **** }
 566              		.loc 1 129 1 view .LVU127
 567 002c 03B0     		add	sp, sp, #12
 568              		@ sp needed
 569              	.LVL54:
 570              	.LVL55:
 129:Core/Src/nau7802.c **** }
 571              		.loc 1 129 1 view .LVU128
 572 002e 30BD     		pop	{r4, r5, pc}
 573              	.LVL56:
 574              	.L16:
 127:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_PUD_BIT));
 575              		.loc 1 127 9 is_stmt 1 view .LVU129
 127:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_PUD_BIT));
 576              		.loc 1 127 16 is_stmt 0 view .LVU130
 577 0030 6B46     		mov	r3, sp
 578 0032 DA79     		ldrb	r2, [r3, #7]
 579 0034 0223     		movs	r3, #2
 580 0036 9A43     		bics	r2, r3
 581 0038 0021     		movs	r1, #0
 582 003a 2000     		movs	r0, r4
 583              	.LVL57:
 127:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_PUD_BIT));
 584              		.loc 1 127 16 view .LVU131
 585 003c FFF7FEFF 		bl	nau7802_reg_write
 586              	.LVL58:
 587 0040 F4E7     		b	.L15
 588              		.cfi_endproc
 589              	.LFE326:
 591              		.section	.text.nau7802_reg_reset,"ax",%progbits
 592              		.align	1
 593              		.global	nau7802_reg_reset
 594              		.syntax unified
 595              		.code	16
 596              		.thumb_func
 597              		.fpu softvfp
 599              	nau7802_reg_reset:
 600              	.LVL59:
 601              	.LFB327:
 140:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_reg_reset(nau7802_t *adc, int rst) {
 602              		.loc 1 140 62 is_stmt 1 view -0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 8
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 140:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_reg_reset(nau7802_t *adc, int rst) {
 606              		.loc 1 140 62 is_stmt 0 view .LVU133
 607 0000 30B5     		push	{r4, r5, lr}
 608              	.LCFI15:
 609              		.cfi_def_cfa_offset 12
 610              		.cfi_offset 4, -12
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 31


 611              		.cfi_offset 5, -8
 612              		.cfi_offset 14, -4
 613 0002 83B0     		sub	sp, sp, #12
 614              	.LCFI16:
 615              		.cfi_def_cfa_offset 24
 616 0004 0400     		movs	r4, r0
 617 0006 0D00     		movs	r5, r1
 141:Core/Src/nau7802.c ****     uint8_t           reg_state;
 618              		.loc 1 141 5 is_stmt 1 view .LVU134
 142:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 619              		.loc 1 142 5 view .LVU135
 144:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 620              		.loc 1 144 5 view .LVU136
 144:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 621              		.loc 1 144 11 is_stmt 0 view .LVU137
 622 0008 6B46     		mov	r3, sp
 623 000a DA1D     		adds	r2, r3, #7
 624 000c 0021     		movs	r1, #0
 625              	.LVL60:
 144:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 626              		.loc 1 144 11 view .LVU138
 627 000e FFF7FEFF 		bl	nau7802_reg_read
 628              	.LVL61:
 145:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 629              		.loc 1 145 5 is_stmt 1 view .LVU139
 145:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 630              		.loc 1 145 8 is_stmt 0 view .LVU140
 631 0012 0028     		cmp	r0, #0
 632 0014 0AD1     		bne	.L18
 149:Core/Src/nau7802.c ****     if (rst != 0) { // Reset
 633              		.loc 1 149 5 is_stmt 1 view .LVU141
 149:Core/Src/nau7802.c ****     if (rst != 0) { // Reset
 634              		.loc 1 149 8 is_stmt 0 view .LVU142
 635 0016 002D     		cmp	r5, #0
 636 0018 0AD0     		beq	.L19
 150:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_RR_BIT);
 637              		.loc 1 150 9 is_stmt 1 view .LVU143
 150:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_RR_BIT);
 638              		.loc 1 150 16 is_stmt 0 view .LVU144
 639 001a 6B46     		mov	r3, sp
 640 001c DA79     		ldrb	r2, [r3, #7]
 641 001e 0123     		movs	r3, #1
 642 0020 1A43     		orrs	r2, r3
 643 0022 D2B2     		uxtb	r2, r2
 644 0024 0021     		movs	r1, #0
 645 0026 2000     		movs	r0, r4
 646              	.LVL62:
 150:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state | NAU7802_PUCTRL_RR_BIT);
 647              		.loc 1 150 16 view .LVU145
 648 0028 FFF7FEFF 		bl	nau7802_reg_write
 649              	.LVL63:
 650              	.L18:
 154:Core/Src/nau7802.c **** }
 651              		.loc 1 154 1 view .LVU146
 652 002c 03B0     		add	sp, sp, #12
 653              		@ sp needed
 654              	.LVL64:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 32


 655              	.LVL65:
 154:Core/Src/nau7802.c **** }
 656              		.loc 1 154 1 view .LVU147
 657 002e 30BD     		pop	{r4, r5, pc}
 658              	.LVL66:
 659              	.L19:
 152:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_RR_BIT));
 660              		.loc 1 152 9 is_stmt 1 view .LVU148
 152:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_RR_BIT));
 661              		.loc 1 152 16 is_stmt 0 view .LVU149
 662 0030 6B46     		mov	r3, sp
 663 0032 DA79     		ldrb	r2, [r3, #7]
 664 0034 0123     		movs	r3, #1
 665 0036 9A43     		bics	r2, r3
 666 0038 0021     		movs	r1, #0
 667 003a 2000     		movs	r0, r4
 668              	.LVL67:
 152:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PUCTRL, reg_state & (~NAU7802_PUCTRL_RR_BIT));
 669              		.loc 1 152 16 view .LVU150
 670 003c FFF7FEFF 		bl	nau7802_reg_write
 671              	.LVL68:
 672 0040 F4E7     		b	.L18
 673              		.cfi_endproc
 674              	.LFE327:
 676              		.section	.text.nau7802_cready_polarity,"ax",%progbits
 677              		.align	1
 678              		.global	nau7802_cready_polarity
 679              		.syntax unified
 680              		.code	16
 681              		.thumb_func
 682              		.fpu softvfp
 684              	nau7802_cready_polarity:
 685              	.LVL69:
 686              	.LFB328:
 164:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_cready_polarity(nau7802_t *adc, int polarity) {
 687              		.loc 1 164 73 is_stmt 1 view -0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 8
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 164:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_cready_polarity(nau7802_t *adc, int polarity) {
 691              		.loc 1 164 73 is_stmt 0 view .LVU152
 692 0000 30B5     		push	{r4, r5, lr}
 693              	.LCFI17:
 694              		.cfi_def_cfa_offset 12
 695              		.cfi_offset 4, -12
 696              		.cfi_offset 5, -8
 697              		.cfi_offset 14, -4
 698 0002 83B0     		sub	sp, sp, #12
 699              	.LCFI18:
 700              		.cfi_def_cfa_offset 24
 701 0004 0400     		movs	r4, r0
 702 0006 0D00     		movs	r5, r1
 165:Core/Src/nau7802.c ****     uint8_t           reg_state;
 703              		.loc 1 165 5 is_stmt 1 view .LVU153
 166:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 704              		.loc 1 166 5 view .LVU154
 168:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 33


 705              		.loc 1 168 5 view .LVU155
 168:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 706              		.loc 1 168 11 is_stmt 0 view .LVU156
 707 0008 6B46     		mov	r3, sp
 708 000a DA1D     		adds	r2, r3, #7
 709 000c 0121     		movs	r1, #1
 710              	.LVL70:
 168:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 711              		.loc 1 168 11 view .LVU157
 712 000e FFF7FEFF 		bl	nau7802_reg_read
 713              	.LVL71:
 169:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 714              		.loc 1 169 5 is_stmt 1 view .LVU158
 169:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 715              		.loc 1 169 8 is_stmt 0 view .LVU159
 716 0012 0028     		cmp	r0, #0
 717 0014 0CD1     		bne	.L21
 173:Core/Src/nau7802.c ****     if (polarity != 0) { // Active low
 718              		.loc 1 173 5 is_stmt 1 view .LVU160
 173:Core/Src/nau7802.c ****     if (polarity != 0) { // Active low
 719              		.loc 1 173 8 is_stmt 0 view .LVU161
 720 0016 002D     		cmp	r5, #0
 721 0018 0CD0     		beq	.L22
 174:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state | NAU7802_CTRL1_CRP_BIT);
 722              		.loc 1 174 9 is_stmt 1 view .LVU162
 174:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state | NAU7802_CTRL1_CRP_BIT);
 723              		.loc 1 174 16 is_stmt 0 view .LVU163
 724 001a 6B46     		mov	r3, sp
 725 001c 0733     		adds	r3, r3, #7
 726 001e 1B78     		ldrb	r3, [r3]
 727 0020 8022     		movs	r2, #128
 728 0022 5242     		rsbs	r2, r2, #0
 729 0024 1A43     		orrs	r2, r3
 730 0026 D2B2     		uxtb	r2, r2
 731 0028 0121     		movs	r1, #1
 732 002a 2000     		movs	r0, r4
 733              	.LVL72:
 174:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state | NAU7802_CTRL1_CRP_BIT);
 734              		.loc 1 174 16 view .LVU164
 735 002c FFF7FEFF 		bl	nau7802_reg_write
 736              	.LVL73:
 737              	.L21:
 179:Core/Src/nau7802.c **** }
 738              		.loc 1 179 1 view .LVU165
 739 0030 03B0     		add	sp, sp, #12
 740              		@ sp needed
 741              	.LVL74:
 742              	.LVL75:
 179:Core/Src/nau7802.c **** }
 743              		.loc 1 179 1 view .LVU166
 744 0032 30BD     		pop	{r4, r5, pc}
 745              	.LVL76:
 746              	.L22:
 177:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state & (~NAU7802_CTRL1_CRP_BIT));
 747              		.loc 1 177 9 is_stmt 1 view .LVU167
 177:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state & (~NAU7802_CTRL1_CRP_BIT));
 748              		.loc 1 177 16 is_stmt 0 view .LVU168
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 34


 749 0034 6B46     		mov	r3, sp
 750 0036 0733     		adds	r3, r3, #7
 751 0038 1B78     		ldrb	r3, [r3]
 752 003a 7F22     		movs	r2, #127
 753 003c 1A40     		ands	r2, r3
 754 003e 0121     		movs	r1, #1
 755 0040 2000     		movs	r0, r4
 756              	.LVL77:
 177:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state & (~NAU7802_CTRL1_CRP_BIT));
 757              		.loc 1 177 16 view .LVU169
 758 0042 FFF7FEFF 		bl	nau7802_reg_write
 759              	.LVL78:
 760 0046 F3E7     		b	.L21
 761              		.cfi_endproc
 762              	.LFE328:
 764              		.section	.text.nau7802_drdy_function,"ax",%progbits
 765              		.align	1
 766              		.global	nau7802_drdy_function
 767              		.syntax unified
 768              		.code	16
 769              		.thumb_func
 770              		.fpu softvfp
 772              	nau7802_drdy_function:
 773              	.LVL79:
 774              	.LFB329:
 189:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_drdy_function(nau7802_t *adc, int function) {
 775              		.loc 1 189 71 is_stmt 1 view -0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 8
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 189:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_drdy_function(nau7802_t *adc, int function) {
 779              		.loc 1 189 71 is_stmt 0 view .LVU171
 780 0000 30B5     		push	{r4, r5, lr}
 781              	.LCFI19:
 782              		.cfi_def_cfa_offset 12
 783              		.cfi_offset 4, -12
 784              		.cfi_offset 5, -8
 785              		.cfi_offset 14, -4
 786 0002 83B0     		sub	sp, sp, #12
 787              	.LCFI20:
 788              		.cfi_def_cfa_offset 24
 789 0004 0400     		movs	r4, r0
 790 0006 0D00     		movs	r5, r1
 190:Core/Src/nau7802.c ****     uint8_t           reg_state;
 791              		.loc 1 190 5 is_stmt 1 view .LVU172
 191:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 792              		.loc 1 191 5 view .LVU173
 193:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 793              		.loc 1 193 5 view .LVU174
 193:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 794              		.loc 1 193 11 is_stmt 0 view .LVU175
 795 0008 6B46     		mov	r3, sp
 796 000a DA1D     		adds	r2, r3, #7
 797 000c 0121     		movs	r1, #1
 798              	.LVL80:
 193:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 799              		.loc 1 193 11 view .LVU176
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 35


 800 000e FFF7FEFF 		bl	nau7802_reg_read
 801              	.LVL81:
 194:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 802              		.loc 1 194 5 is_stmt 1 view .LVU177
 194:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 803              		.loc 1 194 8 is_stmt 0 view .LVU178
 804 0012 0028     		cmp	r0, #0
 805 0014 0AD1     		bne	.L24
 198:Core/Src/nau7802.c ****     if (function != 0) { // Clock output
 806              		.loc 1 198 5 is_stmt 1 view .LVU179
 198:Core/Src/nau7802.c ****     if (function != 0) { // Clock output
 807              		.loc 1 198 8 is_stmt 0 view .LVU180
 808 0016 002D     		cmp	r5, #0
 809 0018 0AD0     		beq	.L25
 199:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state | NAU7802_CTRL1_DRDY_SEL_BIT);
 810              		.loc 1 199 9 is_stmt 1 view .LVU181
 199:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state | NAU7802_CTRL1_DRDY_SEL_BIT);
 811              		.loc 1 199 16 is_stmt 0 view .LVU182
 812 001a 6B46     		mov	r3, sp
 813 001c DA79     		ldrb	r2, [r3, #7]
 814 001e 4023     		movs	r3, #64
 815 0020 1A43     		orrs	r2, r3
 816 0022 D2B2     		uxtb	r2, r2
 817 0024 0121     		movs	r1, #1
 818 0026 2000     		movs	r0, r4
 819              	.LVL82:
 199:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state | NAU7802_CTRL1_DRDY_SEL_BIT);
 820              		.loc 1 199 16 view .LVU183
 821 0028 FFF7FEFF 		bl	nau7802_reg_write
 822              	.LVL83:
 823              	.L24:
 204:Core/Src/nau7802.c **** }
 824              		.loc 1 204 1 view .LVU184
 825 002c 03B0     		add	sp, sp, #12
 826              		@ sp needed
 827              	.LVL84:
 828              	.LVL85:
 204:Core/Src/nau7802.c **** }
 829              		.loc 1 204 1 view .LVU185
 830 002e 30BD     		pop	{r4, r5, pc}
 831              	.LVL86:
 832              	.L25:
 202:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state & (~NAU7802_CTRL1_DRDY_SEL_BIT))
 833              		.loc 1 202 9 is_stmt 1 view .LVU186
 202:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state & (~NAU7802_CTRL1_DRDY_SEL_BIT))
 834              		.loc 1 202 16 is_stmt 0 view .LVU187
 835 0030 6B46     		mov	r3, sp
 836 0032 DA79     		ldrb	r2, [r3, #7]
 837 0034 4023     		movs	r3, #64
 838 0036 9A43     		bics	r2, r3
 839 0038 0121     		movs	r1, #1
 840 003a 2000     		movs	r0, r4
 841              	.LVL87:
 202:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL1, reg_state & (~NAU7802_CTRL1_DRDY_SEL_BIT))
 842              		.loc 1 202 16 view .LVU188
 843 003c FFF7FEFF 		bl	nau7802_reg_write
 844              	.LVL88:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 36


 845 0040 F4E7     		b	.L24
 846              		.cfi_endproc
 847              	.LFE329:
 849              		.section	.text.nau7802_vldo_volts,"ax",%progbits
 850              		.align	1
 851              		.global	nau7802_vldo_volts
 852              		.syntax unified
 853              		.code	16
 854              		.thumb_func
 855              		.fpu softvfp
 857              	nau7802_vldo_volts:
 858              	.LVL89:
 859              	.LFB330:
 224:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_vldo_volts(nau7802_t *adc, int vsetting) {
 860              		.loc 1 224 68 is_stmt 1 view -0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 8
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 224:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_vldo_volts(nau7802_t *adc, int vsetting) {
 864              		.loc 1 224 68 is_stmt 0 view .LVU190
 865 0000 30B5     		push	{r4, r5, lr}
 866              	.LCFI21:
 867              		.cfi_def_cfa_offset 12
 868              		.cfi_offset 4, -12
 869              		.cfi_offset 5, -8
 870              		.cfi_offset 14, -4
 871 0002 83B0     		sub	sp, sp, #12
 872              	.LCFI22:
 873              		.cfi_def_cfa_offset 24
 874 0004 0500     		movs	r5, r0
 875 0006 0C00     		movs	r4, r1
 225:Core/Src/nau7802.c ****     uint8_t           reg_state;
 876              		.loc 1 225 5 is_stmt 1 view .LVU191
 226:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 877              		.loc 1 226 5 view .LVU192
 228:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 878              		.loc 1 228 5 view .LVU193
 228:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 879              		.loc 1 228 11 is_stmt 0 view .LVU194
 880 0008 6B46     		mov	r3, sp
 881 000a DA1D     		adds	r2, r3, #7
 882 000c 0121     		movs	r1, #1
 883              	.LVL90:
 228:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 884              		.loc 1 228 11 view .LVU195
 885 000e FFF7FEFF 		bl	nau7802_reg_read
 886              	.LVL91:
 229:Core/Src/nau7802.c ****     if (ret != HAL_OK || (vsetting < 0 || vsetting > 7)) {
 887              		.loc 1 229 5 is_stmt 1 view .LVU196
 229:Core/Src/nau7802.c ****     if (ret != HAL_OK || (vsetting < 0 || vsetting > 7)) {
 888              		.loc 1 229 8 is_stmt 0 view .LVU197
 889 0012 0028     		cmp	r0, #0
 890 0014 01D1     		bne	.L27
 229:Core/Src/nau7802.c ****     if (ret != HAL_OK || (vsetting < 0 || vsetting > 7)) {
 891              		.loc 1 229 23 discriminator 1 view .LVU198
 892 0016 072C     		cmp	r4, #7
 893 0018 01D9     		bls	.L28
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 37


 894              	.LVL92:
 895              	.L27:
 234:Core/Src/nau7802.c **** }
 896              		.loc 1 234 1 view .LVU199
 897 001a 03B0     		add	sp, sp, #12
 898              		@ sp needed
 899              	.LVL93:
 234:Core/Src/nau7802.c **** }
 900              		.loc 1 234 1 view .LVU200
 901 001c 30BD     		pop	{r4, r5, pc}
 902              	.LVL94:
 903              	.L28:
 233:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_CTRL1_VLDO(vsetting));
 904              		.loc 1 233 5 is_stmt 1 view .LVU201
 233:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_CTRL1_VLDO(vsetting));
 905              		.loc 1 233 12 is_stmt 0 view .LVU202
 906 001e E400     		lsls	r4, r4, #3
 907              	.LVL95:
 233:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_CTRL1_VLDO(vsetting));
 908              		.loc 1 233 12 view .LVU203
 909 0020 E2B2     		uxtb	r2, r4
 910 0022 0121     		movs	r1, #1
 911 0024 2800     		movs	r0, r5
 912              	.LVL96:
 233:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_CTRL1_VLDO(vsetting));
 913              		.loc 1 233 12 view .LVU204
 914 0026 FFF7FEFF 		bl	nau7802_reg_write
 915              	.LVL97:
 916 002a F6E7     		b	.L27
 917              		.cfi_endproc
 918              	.LFE330:
 920              		.section	.text.nau7802_pga_gain,"ax",%progbits
 921              		.align	1
 922              		.global	nau7802_pga_gain
 923              		.syntax unified
 924              		.code	16
 925              		.thumb_func
 926              		.fpu softvfp
 928              	nau7802_pga_gain:
 929              	.LVL98:
 930              	.LFB331:
 254:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_gain(nau7802_t *adc, int gsetting) {
 931              		.loc 1 254 66 is_stmt 1 view -0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 8
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 254:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_gain(nau7802_t *adc, int gsetting) {
 935              		.loc 1 254 66 is_stmt 0 view .LVU206
 936 0000 30B5     		push	{r4, r5, lr}
 937              	.LCFI23:
 938              		.cfi_def_cfa_offset 12
 939              		.cfi_offset 4, -12
 940              		.cfi_offset 5, -8
 941              		.cfi_offset 14, -4
 942 0002 83B0     		sub	sp, sp, #12
 943              	.LCFI24:
 944              		.cfi_def_cfa_offset 24
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 38


 945 0004 0500     		movs	r5, r0
 946 0006 0C00     		movs	r4, r1
 255:Core/Src/nau7802.c ****     uint8_t           reg_state;
 947              		.loc 1 255 5 is_stmt 1 view .LVU207
 256:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 948              		.loc 1 256 5 view .LVU208
 258:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 949              		.loc 1 258 5 view .LVU209
 258:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 950              		.loc 1 258 11 is_stmt 0 view .LVU210
 951 0008 6B46     		mov	r3, sp
 952 000a DA1D     		adds	r2, r3, #7
 953 000c 0121     		movs	r1, #1
 954              	.LVL99:
 258:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL1, &reg_state);
 955              		.loc 1 258 11 view .LVU211
 956 000e FFF7FEFF 		bl	nau7802_reg_read
 957              	.LVL100:
 259:Core/Src/nau7802.c ****     if (ret != HAL_OK || (gsetting < 0 || gsetting > 7)) {
 958              		.loc 1 259 5 is_stmt 1 view .LVU212
 259:Core/Src/nau7802.c ****     if (ret != HAL_OK || (gsetting < 0 || gsetting > 7)) {
 959              		.loc 1 259 8 is_stmt 0 view .LVU213
 960 0012 0028     		cmp	r0, #0
 961 0014 01D1     		bne	.L30
 259:Core/Src/nau7802.c ****     if (ret != HAL_OK || (gsetting < 0 || gsetting > 7)) {
 962              		.loc 1 259 23 discriminator 1 view .LVU214
 963 0016 072C     		cmp	r4, #7
 964 0018 01D9     		bls	.L31
 965              	.LVL101:
 966              	.L30:
 264:Core/Src/nau7802.c **** }
 967              		.loc 1 264 1 view .LVU215
 968 001a 03B0     		add	sp, sp, #12
 969              		@ sp needed
 970              	.LVL102:
 971              	.LVL103:
 264:Core/Src/nau7802.c **** }
 972              		.loc 1 264 1 view .LVU216
 973 001c 30BD     		pop	{r4, r5, pc}
 974              	.LVL104:
 975              	.L31:
 263:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_CTRL1_GAINS(gsetting));
 976              		.loc 1 263 5 is_stmt 1 view .LVU217
 263:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_CTRL1_GAINS(gsetting));
 977              		.loc 1 263 12 is_stmt 0 view .LVU218
 978 001e E2B2     		uxtb	r2, r4
 979 0020 0121     		movs	r1, #1
 980 0022 2800     		movs	r0, r5
 981              	.LVL105:
 263:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_CTRL1_GAINS(gsetting));
 982              		.loc 1 263 12 view .LVU219
 983 0024 FFF7FEFF 		bl	nau7802_reg_write
 984              	.LVL106:
 985 0028 F7E7     		b	.L30
 986              		.cfi_endproc
 987              	.LFE331:
 989              		.section	.text.nau7802_ch_sel,"ax",%progbits
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 39


 990              		.align	1
 991              		.global	nau7802_ch_sel
 992              		.syntax unified
 993              		.code	16
 994              		.thumb_func
 995              		.fpu softvfp
 997              	nau7802_ch_sel:
 998              	.LVL107:
 999              	.LFB332:
 273:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_ch_sel(nau7802_t *adc, int channel) {
 1000              		.loc 1 273 63 is_stmt 1 view -0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 8
 1003              		@ frame_needed = 0, uses_anonymous_args = 0
 273:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_ch_sel(nau7802_t *adc, int channel) {
 1004              		.loc 1 273 63 is_stmt 0 view .LVU221
 1005 0000 30B5     		push	{r4, r5, lr}
 1006              	.LCFI25:
 1007              		.cfi_def_cfa_offset 12
 1008              		.cfi_offset 4, -12
 1009              		.cfi_offset 5, -8
 1010              		.cfi_offset 14, -4
 1011 0002 83B0     		sub	sp, sp, #12
 1012              	.LCFI26:
 1013              		.cfi_def_cfa_offset 24
 1014 0004 0400     		movs	r4, r0
 1015 0006 0D00     		movs	r5, r1
 274:Core/Src/nau7802.c ****     uint8_t           reg_state;
 1016              		.loc 1 274 5 is_stmt 1 view .LVU222
 275:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 1017              		.loc 1 275 5 view .LVU223
 277:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1018              		.loc 1 277 5 view .LVU224
 277:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1019              		.loc 1 277 11 is_stmt 0 view .LVU225
 1020 0008 6B46     		mov	r3, sp
 1021 000a DA1D     		adds	r2, r3, #7
 1022 000c 0221     		movs	r1, #2
 1023              	.LVL108:
 277:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1024              		.loc 1 277 11 view .LVU226
 1025 000e FFF7FEFF 		bl	nau7802_reg_read
 1026              	.LVL109:
 277:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1027              		.loc 1 277 11 view .LVU227
 1028 0012 021E     		subs	r2, r0, #0
 1029              	.LVL110:
 278:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1030              		.loc 1 278 5 is_stmt 1 view .LVU228
 278:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1031              		.loc 1 278 8 is_stmt 0 view .LVU229
 1032 0014 03D1     		bne	.L33
 281:Core/Src/nau7802.c ****     if (channel == NAU7802_CH1) {
 1033              		.loc 1 281 5 is_stmt 1 view .LVU230
 281:Core/Src/nau7802.c ****     if (channel == NAU7802_CH1) {
 1034              		.loc 1 281 8 is_stmt 0 view .LVU231
 1035 0016 002D     		cmp	r5, #0
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 40


 1036 0018 03D0     		beq	.L35
 283:Core/Src/nau7802.c ****     } else if (channel == NAU7802_CH2) {
 1037              		.loc 1 283 12 is_stmt 1 view .LVU232
 283:Core/Src/nau7802.c ****     } else if (channel == NAU7802_CH2) {
 1038              		.loc 1 283 15 is_stmt 0 view .LVU233
 1039 001a 012D     		cmp	r5, #1
 1040 001c 08D0     		beq	.L36
 1041              	.LVL111:
 1042              	.L33:
 289:Core/Src/nau7802.c **** }
 1043              		.loc 1 289 1 view .LVU234
 1044 001e 03B0     		add	sp, sp, #12
 1045              		@ sp needed
 1046              	.LVL112:
 1047              	.LVL113:
 289:Core/Src/nau7802.c **** }
 1048              		.loc 1 289 1 view .LVU235
 1049 0020 30BD     		pop	{r4, r5, pc}
 1050              	.LVL114:
 1051              	.L35:
 282:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL2, ret & (~NAU7802_CTRL2_CHS_BIT));
 1052              		.loc 1 282 9 is_stmt 1 view .LVU236
 282:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL2, ret & (~NAU7802_CTRL2_CHS_BIT));
 1053              		.loc 1 282 16 is_stmt 0 view .LVU237
 1054 0022 7F30     		adds	r0, r0, #127
 1055              	.LVL115:
 282:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL2, ret & (~NAU7802_CTRL2_CHS_BIT));
 1056              		.loc 1 282 16 view .LVU238
 1057 0024 0240     		ands	r2, r0
 1058 0026 0221     		movs	r1, #2
 1059 0028 2000     		movs	r0, r4
 1060 002a FFF7FEFF 		bl	nau7802_reg_write
 1061              	.LVL116:
 1062 002e F6E7     		b	.L33
 1063              	.LVL117:
 1064              	.L36:
 284:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL2, ret | NAU7802_CTRL2_CHS_BIT);
 1065              		.loc 1 284 9 is_stmt 1 view .LVU239
 284:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL2, ret | NAU7802_CTRL2_CHS_BIT);
 1066              		.loc 1 284 16 is_stmt 0 view .LVU240
 1067 0030 8020     		movs	r0, #128
 1068              	.LVL118:
 284:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_CTRL2, ret | NAU7802_CTRL2_CHS_BIT);
 1069              		.loc 1 284 16 view .LVU241
 1070 0032 4042     		rsbs	r0, r0, #0
 1071 0034 0243     		orrs	r2, r0
 1072 0036 D2B2     		uxtb	r2, r2
 1073 0038 0221     		movs	r1, #2
 1074 003a 2000     		movs	r0, r4
 1075 003c FFF7FEFF 		bl	nau7802_reg_write
 1076              	.LVL119:
 1077 0040 EDE7     		b	.L33
 1078              		.cfi_endproc
 1079              	.LFE332:
 1081              		.section	.text.nau7802_samplerate,"ax",%progbits
 1082              		.align	1
 1083              		.global	nau7802_samplerate
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 41


 1084              		.syntax unified
 1085              		.code	16
 1086              		.thumb_func
 1087              		.fpu softvfp
 1089              	nau7802_samplerate:
 1090              	.LVL120:
 1091              	.LFB333:
 306:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_samplerate(nau7802_t *adc, int rsetting) {
 1092              		.loc 1 306 68 is_stmt 1 view -0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 8
 1095              		@ frame_needed = 0, uses_anonymous_args = 0
 306:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_samplerate(nau7802_t *adc, int rsetting) {
 1096              		.loc 1 306 68 is_stmt 0 view .LVU243
 1097 0000 30B5     		push	{r4, r5, lr}
 1098              	.LCFI27:
 1099              		.cfi_def_cfa_offset 12
 1100              		.cfi_offset 4, -12
 1101              		.cfi_offset 5, -8
 1102              		.cfi_offset 14, -4
 1103 0002 83B0     		sub	sp, sp, #12
 1104              	.LCFI28:
 1105              		.cfi_def_cfa_offset 24
 1106 0004 0500     		movs	r5, r0
 1107 0006 0C00     		movs	r4, r1
 307:Core/Src/nau7802.c ****     uint8_t           reg_state;
 1108              		.loc 1 307 5 is_stmt 1 view .LVU244
 308:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 1109              		.loc 1 308 5 view .LVU245
 310:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1110              		.loc 1 310 5 view .LVU246
 310:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1111              		.loc 1 310 11 is_stmt 0 view .LVU247
 1112 0008 6B46     		mov	r3, sp
 1113 000a DA1D     		adds	r2, r3, #7
 1114 000c 0221     		movs	r1, #2
 1115              	.LVL121:
 310:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1116              		.loc 1 310 11 view .LVU248
 1117 000e FFF7FEFF 		bl	nau7802_reg_read
 1118              	.LVL122:
 311:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1119              		.loc 1 311 5 is_stmt 1 view .LVU249
 311:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1120              		.loc 1 311 8 is_stmt 0 view .LVU250
 1121 0012 0028     		cmp	r0, #0
 1122 0014 03D1     		bne	.L38
 315:Core/Src/nau7802.c ****     switch (rsetting) { // Check that given rate is valid
 1123              		.loc 1 315 5 is_stmt 1 view .LVU251
 1124 0016 032C     		cmp	r4, #3
 1125 0018 03DC     		bgt	.L39
 1126 001a 002C     		cmp	r4, #0
 1127 001c 03DA     		bge	.L40
 1128              	.LVL123:
 1129              	.L38:
 332:Core/Src/nau7802.c **** }
 1130              		.loc 1 332 1 is_stmt 0 view .LVU252
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 42


 1131 001e 03B0     		add	sp, sp, #12
 1132              		@ sp needed
 1133              	.LVL124:
 332:Core/Src/nau7802.c **** }
 1134              		.loc 1 332 1 view .LVU253
 1135 0020 30BD     		pop	{r4, r5, pc}
 1136              	.LVL125:
 1137              	.L39:
 315:Core/Src/nau7802.c ****     switch (rsetting) { // Check that given rate is valid
 1138              		.loc 1 315 5 view .LVU254
 1139 0022 072C     		cmp	r4, #7
 1140 0024 FBD1     		bne	.L38
 1141              	.L40:
 330:Core/Src/nau7802.c ****     reg_state &= ~NAU7802_CTRL1_CRP(0x07); // Clear current setting
 1142              		.loc 1 330 5 is_stmt 1 view .LVU255
 330:Core/Src/nau7802.c ****     reg_state &= ~NAU7802_CTRL1_CRP(0x07); // Clear current setting
 1143              		.loc 1 330 15 is_stmt 0 view .LVU256
 1144 0026 6B46     		mov	r3, sp
 1145 0028 D979     		ldrb	r1, [r3, #7]
 1146 002a 7F22     		movs	r2, #127
 1147 002c 0A40     		ands	r2, r1
 1148 002e DA71     		strb	r2, [r3, #7]
 331:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CRS(rsetting));
 1149              		.loc 1 331 5 is_stmt 1 view .LVU257
 331:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CRS(rsetting));
 1150              		.loc 1 331 66 is_stmt 0 view .LVU258
 1151 0030 2401     		lsls	r4, r4, #4
 1152              	.LVL126:
 331:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CRS(rsetting));
 1153              		.loc 1 331 64 view .LVU259
 1154 0032 2243     		orrs	r2, r4
 331:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CRS(rsetting));
 1155              		.loc 1 331 12 view .LVU260
 1156 0034 D2B2     		uxtb	r2, r2
 1157 0036 0221     		movs	r1, #2
 1158 0038 2800     		movs	r0, r5
 1159              	.LVL127:
 331:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CRS(rsetting));
 1160              		.loc 1 331 12 view .LVU261
 1161 003a FFF7FEFF 		bl	nau7802_reg_write
 1162              	.LVL128:
 1163 003e EEE7     		b	.L38
 1164              		.cfi_endproc
 1165              	.LFE333:
 1167              		.section	.text.nau7802_calibrate,"ax",%progbits
 1168              		.align	1
 1169              		.global	nau7802_calibrate
 1170              		.syntax unified
 1171              		.code	16
 1172              		.thumb_func
 1173              		.fpu softvfp
 1175              	nau7802_calibrate:
 1176              	.LVL129:
 1177              	.LFB334:
 348:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_calibrate(nau7802_t *adc, int mode) {
 1178              		.loc 1 348 63 is_stmt 1 view -0
 1179              		.cfi_startproc
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 43


 1180              		@ args = 0, pretend = 0, frame = 8
 1181              		@ frame_needed = 0, uses_anonymous_args = 0
 348:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_calibrate(nau7802_t *adc, int mode) {
 1182              		.loc 1 348 63 is_stmt 0 view .LVU263
 1183 0000 30B5     		push	{r4, r5, lr}
 1184              	.LCFI29:
 1185              		.cfi_def_cfa_offset 12
 1186              		.cfi_offset 4, -12
 1187              		.cfi_offset 5, -8
 1188              		.cfi_offset 14, -4
 1189 0002 83B0     		sub	sp, sp, #12
 1190              	.LCFI30:
 1191              		.cfi_def_cfa_offset 24
 1192 0004 0500     		movs	r5, r0
 1193 0006 0C00     		movs	r4, r1
 349:Core/Src/nau7802.c ****     uint8_t           reg_state;
 1194              		.loc 1 349 5 is_stmt 1 view .LVU264
 350:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 1195              		.loc 1 350 5 view .LVU265
 352:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1196              		.loc 1 352 5 view .LVU266
 352:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1197              		.loc 1 352 11 is_stmt 0 view .LVU267
 1198 0008 6B46     		mov	r3, sp
 1199 000a DA1D     		adds	r2, r3, #7
 1200 000c 0221     		movs	r1, #2
 1201              	.LVL130:
 352:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1202              		.loc 1 352 11 view .LVU268
 1203 000e FFF7FEFF 		bl	nau7802_reg_read
 1204              	.LVL131:
 353:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1205              		.loc 1 353 5 is_stmt 1 view .LVU269
 353:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1206              		.loc 1 353 8 is_stmt 0 view .LVU270
 1207 0012 0028     		cmp	r0, #0
 1208 0014 05D1     		bne	.L42
 357:Core/Src/nau7802.c ****     switch (mode) { // Check that given mode is valid
 1209              		.loc 1 357 5 is_stmt 1 view .LVU271
 1210 0016 002C     		cmp	r4, #0
 1211 0018 05D0     		beq	.L43
 1212 001a 02DB     		blt	.L42
 1213 001c A31E     		subs	r3, r4, #2
 1214 001e 012B     		cmp	r3, #1
 1215 0020 01D9     		bls	.L43
 1216              	.LVL132:
 1217              	.L42:
 401:Core/Src/nau7802.c **** }
 1218              		.loc 1 401 1 is_stmt 0 view .LVU272
 1219 0022 03B0     		add	sp, sp, #12
 1220              		@ sp needed
 1221              	.LVL133:
 401:Core/Src/nau7802.c **** }
 1222              		.loc 1 401 1 view .LVU273
 1223 0024 30BD     		pop	{r4, r5, pc}
 1224              	.LVL134:
 1225              	.L43:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 44


 369:Core/Src/nau7802.c ****     reg_state &= ~NAU7802_CTRL2_CALMOD(0x03); // Clear current setting
 1226              		.loc 1 369 5 is_stmt 1 view .LVU274
 369:Core/Src/nau7802.c ****     reg_state &= ~NAU7802_CTRL2_CALMOD(0x03); // Clear current setting
 1227              		.loc 1 369 15 is_stmt 0 view .LVU275
 1228 0026 6B46     		mov	r3, sp
 1229 0028 D979     		ldrb	r1, [r3, #7]
 1230 002a 0322     		movs	r2, #3
 1231 002c 9143     		bics	r1, r2
 1232 002e D971     		strb	r1, [r3, #7]
 370:Core/Src/nau7802.c ****     ret = nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CALMOD(mode));
 1233              		.loc 1 370 5 is_stmt 1 view .LVU276
 370:Core/Src/nau7802.c ****     ret = nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CALMOD(mode));
 1234              		.loc 1 370 63 is_stmt 0 view .LVU277
 1235 0030 2143     		orrs	r1, r4
 370:Core/Src/nau7802.c ****     ret = nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CALMOD(mode));
 1236              		.loc 1 370 11 view .LVU278
 1237 0032 CAB2     		uxtb	r2, r1
 1238 0034 0221     		movs	r1, #2
 1239 0036 2800     		movs	r0, r5
 1240              	.LVL135:
 370:Core/Src/nau7802.c ****     ret = nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CALMOD(mode));
 1241              		.loc 1 370 11 view .LVU279
 1242 0038 FFF7FEFF 		bl	nau7802_reg_write
 1243              	.LVL136:
 371:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1244              		.loc 1 371 5 is_stmt 1 view .LVU280
 371:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1245              		.loc 1 371 8 is_stmt 0 view .LVU281
 1246 003c 0028     		cmp	r0, #0
 1247 003e F0D1     		bne	.L42
 376:Core/Src/nau7802.c ****     nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1248              		.loc 1 376 5 is_stmt 1 view .LVU282
 1249 0040 6B46     		mov	r3, sp
 1250 0042 DC1D     		adds	r4, r3, #7
 1251              	.LVL137:
 376:Core/Src/nau7802.c ****     nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1252              		.loc 1 376 5 is_stmt 0 view .LVU283
 1253 0044 2200     		movs	r2, r4
 1254 0046 0221     		movs	r1, #2
 1255 0048 2800     		movs	r0, r5
 1256              	.LVL138:
 376:Core/Src/nau7802.c ****     nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1257              		.loc 1 376 5 view .LVU284
 1258 004a FFF7FEFF 		bl	nau7802_reg_read
 1259              	.LVL139:
 377:Core/Src/nau7802.c ****     ret = nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CALS_BIT);
 1260              		.loc 1 377 5 is_stmt 1 view .LVU285
 377:Core/Src/nau7802.c ****     ret = nau7802_reg_write(adc, NAU7802_REG_CTRL2, reg_state | NAU7802_CTRL2_CALS_BIT);
 1261              		.loc 1 377 11 is_stmt 0 view .LVU286
 1262 004e 2278     		ldrb	r2, [r4]
 1263 0050 0423     		movs	r3, #4
 1264 0052 1A43     		orrs	r2, r3
 1265 0054 D2B2     		uxtb	r2, r2
 1266 0056 0221     		movs	r1, #2
 1267 0058 2800     		movs	r0, r5
 1268 005a FFF7FEFF 		bl	nau7802_reg_write
 1269              	.LVL140:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 45


 378:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1270              		.loc 1 378 5 is_stmt 1 view .LVU287
 378:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1271              		.loc 1 378 8 is_stmt 0 view .LVU288
 1272 005e 0028     		cmp	r0, #0
 1273 0060 DFD1     		bne	.L42
 383:Core/Src/nau7802.c ****     int cals = 1; // CALS == 1 indicates the chip is still calibrating
 1274              		.loc 1 383 9 view .LVU289
 1275 0062 0123     		movs	r3, #1
 1276              	.LVL141:
 1277              	.L44:
 384:Core/Src/nau7802.c ****     while (cals != 0) {
 1278              		.loc 1 384 11 is_stmt 1 view .LVU290
 1279 0064 002B     		cmp	r3, #0
 1280 0066 0FD0     		beq	.L46
 385:Core/Src/nau7802.c ****         HAL_Delay(5);
 1281              		.loc 1 385 9 view .LVU291
 1282 0068 0520     		movs	r0, #5
 1283 006a FFF7FEFF 		bl	HAL_Delay
 1284              	.LVL142:
 386:Core/Src/nau7802.c ****         ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1285              		.loc 1 386 9 view .LVU292
 386:Core/Src/nau7802.c ****         ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1286              		.loc 1 386 15 is_stmt 0 view .LVU293
 1287 006e 6B46     		mov	r3, sp
 1288 0070 DA1D     		adds	r2, r3, #7
 1289 0072 0221     		movs	r1, #2
 1290 0074 2800     		movs	r0, r5
 1291 0076 FFF7FEFF 		bl	nau7802_reg_read
 1292              	.LVL143:
 387:Core/Src/nau7802.c ****         if (ret != HAL_OK) {
 1293              		.loc 1 387 9 is_stmt 1 view .LVU294
 387:Core/Src/nau7802.c ****         if (ret != HAL_OK) {
 1294              		.loc 1 387 12 is_stmt 0 view .LVU295
 1295 007a 0028     		cmp	r0, #0
 1296 007c D1D1     		bne	.L42
 390:Core/Src/nau7802.c ****         cals = reg_state & NAU7802_CTRL2_CALS_BIT;
 1297              		.loc 1 390 9 is_stmt 1 view .LVU296
 390:Core/Src/nau7802.c ****         cals = reg_state & NAU7802_CTRL2_CALS_BIT;
 1298              		.loc 1 390 26 is_stmt 0 view .LVU297
 1299 007e 6B46     		mov	r3, sp
 1300 0080 DA79     		ldrb	r2, [r3, #7]
 390:Core/Src/nau7802.c ****         cals = reg_state & NAU7802_CTRL2_CALS_BIT;
 1301              		.loc 1 390 14 view .LVU298
 1302 0082 0423     		movs	r3, #4
 1303 0084 1340     		ands	r3, r2
 1304              	.LVL144:
 390:Core/Src/nau7802.c ****         cals = reg_state & NAU7802_CTRL2_CALS_BIT;
 1305              		.loc 1 390 14 view .LVU299
 1306 0086 EDE7     		b	.L44
 1307              	.LVL145:
 1308              	.L46:
 394:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1309              		.loc 1 394 5 is_stmt 1 view .LVU300
 394:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1310              		.loc 1 394 11 is_stmt 0 view .LVU301
 1311 0088 6B46     		mov	r3, sp
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 46


 1312              	.LVL146:
 394:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_CTRL2, &reg_state);
 1313              		.loc 1 394 11 view .LVU302
 1314 008a DA1D     		adds	r2, r3, #7
 1315 008c 0221     		movs	r1, #2
 1316 008e 2800     		movs	r0, r5
 1317 0090 FFF7FEFF 		bl	nau7802_reg_read
 1318              	.LVL147:
 395:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1319              		.loc 1 395 5 is_stmt 1 view .LVU303
 395:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1320              		.loc 1 395 8 is_stmt 0 view .LVU304
 1321 0094 0028     		cmp	r0, #0
 1322 0096 C4D1     		bne	.L42
 399:Core/Src/nau7802.c ****     adc->cal_err = reg_state & NAU7802_CTRL2_CAL_ERR_BIT;
 1323              		.loc 1 399 5 is_stmt 1 view .LVU305
 399:Core/Src/nau7802.c ****     adc->cal_err = reg_state & NAU7802_CTRL2_CAL_ERR_BIT;
 1324              		.loc 1 399 30 is_stmt 0 view .LVU306
 1325 0098 6B46     		mov	r3, sp
 1326 009a DA79     		ldrb	r2, [r3, #7]
 1327 009c 0823     		movs	r3, #8
 1328 009e 1340     		ands	r3, r2
 399:Core/Src/nau7802.c ****     adc->cal_err = reg_state & NAU7802_CTRL2_CAL_ERR_BIT;
 1329              		.loc 1 399 18 view .LVU307
 1330 00a0 AB72     		strb	r3, [r5, #10]
 400:Core/Src/nau7802.c ****     return ret;
 1331              		.loc 1 400 5 is_stmt 1 view .LVU308
 400:Core/Src/nau7802.c ****     return ret;
 1332              		.loc 1 400 12 is_stmt 0 view .LVU309
 1333 00a2 BEE7     		b	.L42
 1334              		.cfi_endproc
 1335              	.LFE334:
 1337              		.section	.text.nau7802_crsd_en,"ax",%progbits
 1338              		.align	1
 1339              		.global	nau7802_crsd_en
 1340              		.syntax unified
 1341              		.code	16
 1342              		.thumb_func
 1343              		.fpu softvfp
 1345              	nau7802_crsd_en:
 1346              	.LVL148:
 1347              	.LFB335:
 412:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_crsd_en(nau7802_t *adc, int mode) {
 1348              		.loc 1 412 61 is_stmt 1 view -0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 8
 1351              		@ frame_needed = 0, uses_anonymous_args = 0
 412:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_crsd_en(nau7802_t *adc, int mode) {
 1352              		.loc 1 412 61 is_stmt 0 view .LVU311
 1353 0000 30B5     		push	{r4, r5, lr}
 1354              	.LCFI31:
 1355              		.cfi_def_cfa_offset 12
 1356              		.cfi_offset 4, -12
 1357              		.cfi_offset 5, -8
 1358              		.cfi_offset 14, -4
 1359 0002 83B0     		sub	sp, sp, #12
 1360              	.LCFI32:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 47


 1361              		.cfi_def_cfa_offset 24
 1362 0004 0400     		movs	r4, r0
 1363 0006 0D00     		movs	r5, r1
 413:Core/Src/nau7802.c ****     uint8_t           reg_state;
 1364              		.loc 1 413 5 is_stmt 1 view .LVU312
 414:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 1365              		.loc 1 414 5 view .LVU313
 416:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1366              		.loc 1 416 5 view .LVU314
 416:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1367              		.loc 1 416 11 is_stmt 0 view .LVU315
 1368 0008 6B46     		mov	r3, sp
 1369 000a DA1D     		adds	r2, r3, #7
 1370 000c 1121     		movs	r1, #17
 1371              	.LVL149:
 416:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1372              		.loc 1 416 11 view .LVU316
 1373 000e FFF7FEFF 		bl	nau7802_reg_read
 1374              	.LVL150:
 417:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1375              		.loc 1 417 5 is_stmt 1 view .LVU317
 417:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1376              		.loc 1 417 8 is_stmt 0 view .LVU318
 1377 0012 0028     		cmp	r0, #0
 1378 0014 0CD1     		bne	.L48
 421:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 1379              		.loc 1 421 5 is_stmt 1 view .LVU319
 421:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 1380              		.loc 1 421 8 is_stmt 0 view .LVU320
 1381 0016 002D     		cmp	r5, #0
 1382 0018 0CD0     		beq	.L49
 422:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_CRSD_BIT);
 1383              		.loc 1 422 9 is_stmt 1 view .LVU321
 422:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_CRSD_BIT);
 1384              		.loc 1 422 16 is_stmt 0 view .LVU322
 1385 001a 6B46     		mov	r3, sp
 1386 001c 0733     		adds	r3, r3, #7
 1387 001e 1B78     		ldrb	r3, [r3]
 1388 0020 8022     		movs	r2, #128
 1389 0022 5242     		rsbs	r2, r2, #0
 1390 0024 1A43     		orrs	r2, r3
 1391 0026 D2B2     		uxtb	r2, r2
 1392 0028 1121     		movs	r1, #17
 1393 002a 2000     		movs	r0, r4
 1394              	.LVL151:
 422:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_CRSD_BIT);
 1395              		.loc 1 422 16 view .LVU323
 1396 002c FFF7FEFF 		bl	nau7802_reg_write
 1397              	.LVL152:
 1398              	.L48:
 427:Core/Src/nau7802.c **** }
 1399              		.loc 1 427 1 view .LVU324
 1400 0030 03B0     		add	sp, sp, #12
 1401              		@ sp needed
 1402              	.LVL153:
 1403              	.LVL154:
 427:Core/Src/nau7802.c **** }
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 48


 1404              		.loc 1 427 1 view .LVU325
 1405 0032 30BD     		pop	{r4, r5, pc}
 1406              	.LVL155:
 1407              	.L49:
 425:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_CRSD_BIT));
 1408              		.loc 1 425 9 is_stmt 1 view .LVU326
 425:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_CRSD_BIT));
 1409              		.loc 1 425 16 is_stmt 0 view .LVU327
 1410 0034 6B46     		mov	r3, sp
 1411 0036 0733     		adds	r3, r3, #7
 1412 0038 1B78     		ldrb	r3, [r3]
 1413 003a 7F22     		movs	r2, #127
 1414 003c 1A40     		ands	r2, r3
 1415 003e 1121     		movs	r1, #17
 1416 0040 2000     		movs	r0, r4
 1417              	.LVL156:
 425:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_CRSD_BIT));
 1418              		.loc 1 425 16 view .LVU328
 1419 0042 FFF7FEFF 		bl	nau7802_reg_write
 1420              	.LVL157:
 1421 0046 F3E7     		b	.L48
 1422              		.cfi_endproc
 1423              	.LFE335:
 1425              		.section	.text.nau7802_fast_i2c_en,"ax",%progbits
 1426              		.align	1
 1427              		.global	nau7802_fast_i2c_en
 1428              		.syntax unified
 1429              		.code	16
 1430              		.thumb_func
 1431              		.fpu softvfp
 1433              	nau7802_fast_i2c_en:
 1434              	.LVL158:
 1435              	.LFB336:
 437:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_fast_i2c_en(nau7802_t *adc, int mode) {
 1436              		.loc 1 437 65 is_stmt 1 view -0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 8
 1439              		@ frame_needed = 0, uses_anonymous_args = 0
 437:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_fast_i2c_en(nau7802_t *adc, int mode) {
 1440              		.loc 1 437 65 is_stmt 0 view .LVU330
 1441 0000 30B5     		push	{r4, r5, lr}
 1442              	.LCFI33:
 1443              		.cfi_def_cfa_offset 12
 1444              		.cfi_offset 4, -12
 1445              		.cfi_offset 5, -8
 1446              		.cfi_offset 14, -4
 1447 0002 83B0     		sub	sp, sp, #12
 1448              	.LCFI34:
 1449              		.cfi_def_cfa_offset 24
 1450 0004 0400     		movs	r4, r0
 1451 0006 0D00     		movs	r5, r1
 438:Core/Src/nau7802.c ****     uint8_t           reg_state;
 1452              		.loc 1 438 5 is_stmt 1 view .LVU331
 439:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 1453              		.loc 1 439 5 view .LVU332
 441:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1454              		.loc 1 441 5 view .LVU333
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 49


 441:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1455              		.loc 1 441 11 is_stmt 0 view .LVU334
 1456 0008 6B46     		mov	r3, sp
 1457 000a DA1D     		adds	r2, r3, #7
 1458 000c 1121     		movs	r1, #17
 1459              	.LVL159:
 441:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1460              		.loc 1 441 11 view .LVU335
 1461 000e FFF7FEFF 		bl	nau7802_reg_read
 1462              	.LVL160:
 442:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1463              		.loc 1 442 5 is_stmt 1 view .LVU336
 442:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1464              		.loc 1 442 8 is_stmt 0 view .LVU337
 1465 0012 0028     		cmp	r0, #0
 1466 0014 0AD1     		bne	.L51
 446:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 1467              		.loc 1 446 5 is_stmt 1 view .LVU338
 446:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 1468              		.loc 1 446 8 is_stmt 0 view .LVU339
 1469 0016 002D     		cmp	r5, #0
 1470 0018 0AD0     		beq	.L52
 447:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_FRD_BIT);
 1471              		.loc 1 447 9 is_stmt 1 view .LVU340
 447:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_FRD_BIT);
 1472              		.loc 1 447 16 is_stmt 0 view .LVU341
 1473 001a 6B46     		mov	r3, sp
 1474 001c DA79     		ldrb	r2, [r3, #7]
 1475 001e 4023     		movs	r3, #64
 1476 0020 1A43     		orrs	r2, r3
 1477 0022 D2B2     		uxtb	r2, r2
 1478 0024 1121     		movs	r1, #17
 1479 0026 2000     		movs	r0, r4
 1480              	.LVL161:
 447:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_FRD_BIT);
 1481              		.loc 1 447 16 view .LVU342
 1482 0028 FFF7FEFF 		bl	nau7802_reg_write
 1483              	.LVL162:
 1484              	.L51:
 452:Core/Src/nau7802.c **** }
 1485              		.loc 1 452 1 view .LVU343
 1486 002c 03B0     		add	sp, sp, #12
 1487              		@ sp needed
 1488              	.LVL163:
 1489              	.LVL164:
 452:Core/Src/nau7802.c **** }
 1490              		.loc 1 452 1 view .LVU344
 1491 002e 30BD     		pop	{r4, r5, pc}
 1492              	.LVL165:
 1493              	.L52:
 450:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_FRD_BIT));
 1494              		.loc 1 450 9 is_stmt 1 view .LVU345
 450:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_FRD_BIT));
 1495              		.loc 1 450 16 is_stmt 0 view .LVU346
 1496 0030 6B46     		mov	r3, sp
 1497 0032 DA79     		ldrb	r2, [r3, #7]
 1498 0034 4023     		movs	r3, #64
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 50


 1499 0036 9A43     		bics	r2, r3
 1500 0038 1121     		movs	r1, #17
 1501 003a 2000     		movs	r0, r4
 1502              	.LVL166:
 450:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_FRD_BIT));
 1503              		.loc 1 450 16 view .LVU347
 1504 003c FFF7FEFF 		bl	nau7802_reg_write
 1505              	.LVL167:
 1506 0040 F4E7     		b	.L51
 1507              		.cfi_endproc
 1508              	.LFE336:
 1510              		.section	.text.nau7802_strong_i2c_pu_en,"ax",%progbits
 1511              		.align	1
 1512              		.global	nau7802_strong_i2c_pu_en
 1513              		.syntax unified
 1514              		.code	16
 1515              		.thumb_func
 1516              		.fpu softvfp
 1518              	nau7802_strong_i2c_pu_en:
 1519              	.LVL168:
 1520              	.LFB337:
 462:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_strong_i2c_pu_en(nau7802_t *adc, int mode) {
 1521              		.loc 1 462 70 is_stmt 1 view -0
 1522              		.cfi_startproc
 1523              		@ args = 0, pretend = 0, frame = 8
 1524              		@ frame_needed = 0, uses_anonymous_args = 0
 462:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_strong_i2c_pu_en(nau7802_t *adc, int mode) {
 1525              		.loc 1 462 70 is_stmt 0 view .LVU349
 1526 0000 30B5     		push	{r4, r5, lr}
 1527              	.LCFI35:
 1528              		.cfi_def_cfa_offset 12
 1529              		.cfi_offset 4, -12
 1530              		.cfi_offset 5, -8
 1531              		.cfi_offset 14, -4
 1532 0002 83B0     		sub	sp, sp, #12
 1533              	.LCFI36:
 1534              		.cfi_def_cfa_offset 24
 1535 0004 0400     		movs	r4, r0
 1536 0006 0D00     		movs	r5, r1
 463:Core/Src/nau7802.c ****     uint8_t           reg_state;
 1537              		.loc 1 463 5 is_stmt 1 view .LVU350
 464:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 1538              		.loc 1 464 5 view .LVU351
 466:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1539              		.loc 1 466 5 view .LVU352
 466:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1540              		.loc 1 466 11 is_stmt 0 view .LVU353
 1541 0008 6B46     		mov	r3, sp
 1542 000a DA1D     		adds	r2, r3, #7
 1543 000c 1121     		movs	r1, #17
 1544              	.LVL169:
 466:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1545              		.loc 1 466 11 view .LVU354
 1546 000e FFF7FEFF 		bl	nau7802_reg_read
 1547              	.LVL170:
 467:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1548              		.loc 1 467 5 is_stmt 1 view .LVU355
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 51


 467:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1549              		.loc 1 467 8 is_stmt 0 view .LVU356
 1550 0012 0028     		cmp	r0, #0
 1551 0014 0AD1     		bne	.L54
 471:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 1552              		.loc 1 471 5 is_stmt 1 view .LVU357
 471:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 1553              		.loc 1 471 8 is_stmt 0 view .LVU358
 1554 0016 002D     		cmp	r5, #0
 1555 0018 0AD0     		beq	.L55
 472:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SPE_BIT);
 1556              		.loc 1 472 9 is_stmt 1 view .LVU359
 472:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SPE_BIT);
 1557              		.loc 1 472 16 is_stmt 0 view .LVU360
 1558 001a 6B46     		mov	r3, sp
 1559 001c DA79     		ldrb	r2, [r3, #7]
 1560 001e 2023     		movs	r3, #32
 1561 0020 1A43     		orrs	r2, r3
 1562 0022 D2B2     		uxtb	r2, r2
 1563 0024 1121     		movs	r1, #17
 1564 0026 2000     		movs	r0, r4
 1565              	.LVL171:
 472:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SPE_BIT);
 1566              		.loc 1 472 16 view .LVU361
 1567 0028 FFF7FEFF 		bl	nau7802_reg_write
 1568              	.LVL172:
 1569              	.L54:
 477:Core/Src/nau7802.c **** }
 1570              		.loc 1 477 1 view .LVU362
 1571 002c 03B0     		add	sp, sp, #12
 1572              		@ sp needed
 1573              	.LVL173:
 1574              	.LVL174:
 477:Core/Src/nau7802.c **** }
 1575              		.loc 1 477 1 view .LVU363
 1576 002e 30BD     		pop	{r4, r5, pc}
 1577              	.LVL175:
 1578              	.L55:
 475:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SPE_BIT));
 1579              		.loc 1 475 9 is_stmt 1 view .LVU364
 475:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SPE_BIT));
 1580              		.loc 1 475 16 is_stmt 0 view .LVU365
 1581 0030 6B46     		mov	r3, sp
 1582 0032 DA79     		ldrb	r2, [r3, #7]
 1583 0034 2023     		movs	r3, #32
 1584 0036 9A43     		bics	r2, r3
 1585 0038 1121     		movs	r1, #17
 1586 003a 2000     		movs	r0, r4
 1587              	.LVL176:
 475:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SPE_BIT));
 1588              		.loc 1 475 16 view .LVU366
 1589 003c FFF7FEFF 		bl	nau7802_reg_write
 1590              	.LVL177:
 1591 0040 F4E7     		b	.L54
 1592              		.cfi_endproc
 1593              	.LFE337:
 1595              		.section	.text.nau7802_weak_i2c_pu_den,"ax",%progbits
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 52


 1596              		.align	1
 1597              		.global	nau7802_weak_i2c_pu_den
 1598              		.syntax unified
 1599              		.code	16
 1600              		.thumb_func
 1601              		.fpu softvfp
 1603              	nau7802_weak_i2c_pu_den:
 1604              	.LVL178:
 1605              	.LFB338:
 487:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_weak_i2c_pu_den(nau7802_t *adc, int mode) {
 1606              		.loc 1 487 69 is_stmt 1 view -0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 8
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 487:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_weak_i2c_pu_den(nau7802_t *adc, int mode) {
 1610              		.loc 1 487 69 is_stmt 0 view .LVU368
 1611 0000 30B5     		push	{r4, r5, lr}
 1612              	.LCFI37:
 1613              		.cfi_def_cfa_offset 12
 1614              		.cfi_offset 4, -12
 1615              		.cfi_offset 5, -8
 1616              		.cfi_offset 14, -4
 1617 0002 83B0     		sub	sp, sp, #12
 1618              	.LCFI38:
 1619              		.cfi_def_cfa_offset 24
 1620 0004 0400     		movs	r4, r0
 1621 0006 0D00     		movs	r5, r1
 488:Core/Src/nau7802.c ****     uint8_t           reg_state;
 1622              		.loc 1 488 5 is_stmt 1 view .LVU369
 489:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 1623              		.loc 1 489 5 view .LVU370
 491:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1624              		.loc 1 491 5 view .LVU371
 491:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1625              		.loc 1 491 11 is_stmt 0 view .LVU372
 1626 0008 6B46     		mov	r3, sp
 1627 000a DA1D     		adds	r2, r3, #7
 1628 000c 1121     		movs	r1, #17
 1629              	.LVL179:
 491:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1630              		.loc 1 491 11 view .LVU373
 1631 000e FFF7FEFF 		bl	nau7802_reg_read
 1632              	.LVL180:
 492:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1633              		.loc 1 492 5 is_stmt 1 view .LVU374
 492:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1634              		.loc 1 492 8 is_stmt 0 view .LVU375
 1635 0012 0028     		cmp	r0, #0
 1636 0014 0AD1     		bne	.L57
 496:Core/Src/nau7802.c ****     if (mode != 0) { // Disable
 1637              		.loc 1 496 5 is_stmt 1 view .LVU376
 496:Core/Src/nau7802.c ****     if (mode != 0) { // Disable
 1638              		.loc 1 496 8 is_stmt 0 view .LVU377
 1639 0016 002D     		cmp	r5, #0
 1640 0018 0AD0     		beq	.L58
 497:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SPE_BIT);
 1641              		.loc 1 497 9 is_stmt 1 view .LVU378
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 53


 497:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SPE_BIT);
 1642              		.loc 1 497 16 is_stmt 0 view .LVU379
 1643 001a 6B46     		mov	r3, sp
 1644 001c DA79     		ldrb	r2, [r3, #7]
 1645 001e 2023     		movs	r3, #32
 1646 0020 1A43     		orrs	r2, r3
 1647 0022 D2B2     		uxtb	r2, r2
 1648 0024 1121     		movs	r1, #17
 1649 0026 2000     		movs	r0, r4
 1650              	.LVL181:
 497:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SPE_BIT);
 1651              		.loc 1 497 16 view .LVU380
 1652 0028 FFF7FEFF 		bl	nau7802_reg_write
 1653              	.LVL182:
 1654              	.L57:
 502:Core/Src/nau7802.c **** }
 1655              		.loc 1 502 1 view .LVU381
 1656 002c 03B0     		add	sp, sp, #12
 1657              		@ sp needed
 1658              	.LVL183:
 1659              	.LVL184:
 502:Core/Src/nau7802.c **** }
 1660              		.loc 1 502 1 view .LVU382
 1661 002e 30BD     		pop	{r4, r5, pc}
 1662              	.LVL185:
 1663              	.L58:
 500:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SPE_BIT));
 1664              		.loc 1 500 9 is_stmt 1 view .LVU383
 500:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SPE_BIT));
 1665              		.loc 1 500 16 is_stmt 0 view .LVU384
 1666 0030 6B46     		mov	r3, sp
 1667 0032 DA79     		ldrb	r2, [r3, #7]
 1668 0034 2023     		movs	r3, #32
 1669 0036 9A43     		bics	r2, r3
 1670 0038 1121     		movs	r1, #17
 1671 003a 2000     		movs	r0, r4
 1672              	.LVL186:
 500:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SPE_BIT));
 1673              		.loc 1 500 16 view .LVU385
 1674 003c FFF7FEFF 		bl	nau7802_reg_write
 1675              	.LVL187:
 1676 0040 F4E7     		b	.L57
 1677              		.cfi_endproc
 1678              	.LFE338:
 1680              		.section	.text.nau7802_short_input,"ax",%progbits
 1681              		.align	1
 1682              		.global	nau7802_short_input
 1683              		.syntax unified
 1684              		.code	16
 1685              		.thumb_func
 1686              		.fpu softvfp
 1688              	nau7802_short_input:
 1689              	.LVL188:
 1690              	.LFB339:
 512:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_short_input(nau7802_t *adc, int mode) {
 1691              		.loc 1 512 65 is_stmt 1 view -0
 1692              		.cfi_startproc
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 54


 1693              		@ args = 0, pretend = 0, frame = 8
 1694              		@ frame_needed = 0, uses_anonymous_args = 0
 512:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_short_input(nau7802_t *adc, int mode) {
 1695              		.loc 1 512 65 is_stmt 0 view .LVU387
 1696 0000 30B5     		push	{r4, r5, lr}
 1697              	.LCFI39:
 1698              		.cfi_def_cfa_offset 12
 1699              		.cfi_offset 4, -12
 1700              		.cfi_offset 5, -8
 1701              		.cfi_offset 14, -4
 1702 0002 83B0     		sub	sp, sp, #12
 1703              	.LCFI40:
 1704              		.cfi_def_cfa_offset 24
 1705 0004 0400     		movs	r4, r0
 1706 0006 0D00     		movs	r5, r1
 513:Core/Src/nau7802.c ****     uint8_t           reg_state;
 1707              		.loc 1 513 5 is_stmt 1 view .LVU388
 514:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 1708              		.loc 1 514 5 view .LVU389
 516:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1709              		.loc 1 516 5 view .LVU390
 516:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1710              		.loc 1 516 11 is_stmt 0 view .LVU391
 1711 0008 6B46     		mov	r3, sp
 1712 000a DA1D     		adds	r2, r3, #7
 1713 000c 1121     		movs	r1, #17
 1714              	.LVL189:
 516:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1715              		.loc 1 516 11 view .LVU392
 1716 000e FFF7FEFF 		bl	nau7802_reg_read
 1717              	.LVL190:
 517:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1718              		.loc 1 517 5 is_stmt 1 view .LVU393
 517:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1719              		.loc 1 517 8 is_stmt 0 view .LVU394
 1720 0012 0028     		cmp	r0, #0
 1721 0014 0AD1     		bne	.L60
 521:Core/Src/nau7802.c ****     if (mode != 0) { // Short
 1722              		.loc 1 521 5 is_stmt 1 view .LVU395
 521:Core/Src/nau7802.c ****     if (mode != 0) { // Short
 1723              		.loc 1 521 8 is_stmt 0 view .LVU396
 1724 0016 002D     		cmp	r5, #0
 1725 0018 0AD0     		beq	.L61
 522:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_WPD_BIT);
 1726              		.loc 1 522 9 is_stmt 1 view .LVU397
 522:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_WPD_BIT);
 1727              		.loc 1 522 16 is_stmt 0 view .LVU398
 1728 001a 6B46     		mov	r3, sp
 1729 001c DA79     		ldrb	r2, [r3, #7]
 1730 001e 1023     		movs	r3, #16
 1731 0020 1A43     		orrs	r2, r3
 1732 0022 D2B2     		uxtb	r2, r2
 1733 0024 1121     		movs	r1, #17
 1734 0026 2000     		movs	r0, r4
 1735              	.LVL191:
 522:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_WPD_BIT);
 1736              		.loc 1 522 16 view .LVU399
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 55


 1737 0028 FFF7FEFF 		bl	nau7802_reg_write
 1738              	.LVL192:
 1739              	.L60:
 527:Core/Src/nau7802.c **** }
 1740              		.loc 1 527 1 view .LVU400
 1741 002c 03B0     		add	sp, sp, #12
 1742              		@ sp needed
 1743              	.LVL193:
 1744              	.LVL194:
 527:Core/Src/nau7802.c **** }
 1745              		.loc 1 527 1 view .LVU401
 1746 002e 30BD     		pop	{r4, r5, pc}
 1747              	.LVL195:
 1748              	.L61:
 525:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_WPD_BIT));
 1749              		.loc 1 525 9 is_stmt 1 view .LVU402
 525:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_WPD_BIT));
 1750              		.loc 1 525 16 is_stmt 0 view .LVU403
 1751 0030 6B46     		mov	r3, sp
 1752 0032 DA79     		ldrb	r2, [r3, #7]
 1753 0034 1023     		movs	r3, #16
 1754 0036 9A43     		bics	r2, r3
 1755 0038 1121     		movs	r1, #17
 1756 003a 2000     		movs	r0, r4
 1757              	.LVL196:
 525:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_WPD_BIT));
 1758              		.loc 1 525 16 view .LVU404
 1759 003c FFF7FEFF 		bl	nau7802_reg_write
 1760              	.LVL197:
 1761 0040 F4E7     		b	.L60
 1762              		.cfi_endproc
 1763              	.LFE339:
 1765              		.section	.text.nau7802_burnout_cs_en,"ax",%progbits
 1766              		.align	1
 1767              		.global	nau7802_burnout_cs_en
 1768              		.syntax unified
 1769              		.code	16
 1770              		.thumb_func
 1771              		.fpu softvfp
 1773              	nau7802_burnout_cs_en:
 1774              	.LVL198:
 1775              	.LFB340:
 537:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_burnout_cs_en(nau7802_t *adc, int mode) {
 1776              		.loc 1 537 67 is_stmt 1 view -0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 8
 1779              		@ frame_needed = 0, uses_anonymous_args = 0
 537:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_burnout_cs_en(nau7802_t *adc, int mode) {
 1780              		.loc 1 537 67 is_stmt 0 view .LVU406
 1781 0000 30B5     		push	{r4, r5, lr}
 1782              	.LCFI41:
 1783              		.cfi_def_cfa_offset 12
 1784              		.cfi_offset 4, -12
 1785              		.cfi_offset 5, -8
 1786              		.cfi_offset 14, -4
 1787 0002 83B0     		sub	sp, sp, #12
 1788              	.LCFI42:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 56


 1789              		.cfi_def_cfa_offset 24
 1790 0004 0400     		movs	r4, r0
 1791 0006 0D00     		movs	r5, r1
 538:Core/Src/nau7802.c ****     uint8_t           reg_state;
 1792              		.loc 1 538 5 is_stmt 1 view .LVU407
 539:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 1793              		.loc 1 539 5 view .LVU408
 541:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1794              		.loc 1 541 5 view .LVU409
 541:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1795              		.loc 1 541 11 is_stmt 0 view .LVU410
 1796 0008 6B46     		mov	r3, sp
 1797 000a DA1D     		adds	r2, r3, #7
 1798 000c 1121     		movs	r1, #17
 1799              	.LVL199:
 541:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1800              		.loc 1 541 11 view .LVU411
 1801 000e FFF7FEFF 		bl	nau7802_reg_read
 1802              	.LVL200:
 542:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1803              		.loc 1 542 5 is_stmt 1 view .LVU412
 542:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1804              		.loc 1 542 8 is_stmt 0 view .LVU413
 1805 0012 0028     		cmp	r0, #0
 1806 0014 0AD1     		bne	.L63
 546:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 1807              		.loc 1 546 5 is_stmt 1 view .LVU414
 546:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 1808              		.loc 1 546 8 is_stmt 0 view .LVU415
 1809 0016 002D     		cmp	r5, #0
 1810 0018 0AD0     		beq	.L64
 547:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SI_BIT);
 1811              		.loc 1 547 9 is_stmt 1 view .LVU416
 547:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SI_BIT);
 1812              		.loc 1 547 16 is_stmt 0 view .LVU417
 1813 001a 6B46     		mov	r3, sp
 1814 001c DA79     		ldrb	r2, [r3, #7]
 1815 001e 0823     		movs	r3, #8
 1816 0020 1A43     		orrs	r2, r3
 1817 0022 D2B2     		uxtb	r2, r2
 1818 0024 1121     		movs	r1, #17
 1819 0026 2000     		movs	r0, r4
 1820              	.LVL201:
 547:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_SI_BIT);
 1821              		.loc 1 547 16 view .LVU418
 1822 0028 FFF7FEFF 		bl	nau7802_reg_write
 1823              	.LVL202:
 1824              	.L63:
 552:Core/Src/nau7802.c **** }
 1825              		.loc 1 552 1 view .LVU419
 1826 002c 03B0     		add	sp, sp, #12
 1827              		@ sp needed
 1828              	.LVL203:
 1829              	.LVL204:
 552:Core/Src/nau7802.c **** }
 1830              		.loc 1 552 1 view .LVU420
 1831 002e 30BD     		pop	{r4, r5, pc}
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 57


 1832              	.LVL205:
 1833              	.L64:
 550:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SI_BIT));
 1834              		.loc 1 550 9 is_stmt 1 view .LVU421
 550:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SI_BIT));
 1835              		.loc 1 550 16 is_stmt 0 view .LVU422
 1836 0030 6B46     		mov	r3, sp
 1837 0032 DA79     		ldrb	r2, [r3, #7]
 1838 0034 0823     		movs	r3, #8
 1839 0036 9A43     		bics	r2, r3
 1840 0038 1121     		movs	r1, #17
 1841 003a 2000     		movs	r0, r4
 1842              	.LVL206:
 550:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_SI_BIT));
 1843              		.loc 1 550 16 view .LVU423
 1844 003c FFF7FEFF 		bl	nau7802_reg_write
 1845              	.LVL207:
 1846 0040 F4E7     		b	.L63
 1847              		.cfi_endproc
 1848              	.LFE340:
 1850              		.section	.text.nau7802_temp_sense_en,"ax",%progbits
 1851              		.align	1
 1852              		.global	nau7802_temp_sense_en
 1853              		.syntax unified
 1854              		.code	16
 1855              		.thumb_func
 1856              		.fpu softvfp
 1858              	nau7802_temp_sense_en:
 1859              	.LVL208:
 1860              	.LFB341:
 562:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_temp_sense_en(nau7802_t *adc, int mode) {
 1861              		.loc 1 562 67 is_stmt 1 view -0
 1862              		.cfi_startproc
 1863              		@ args = 0, pretend = 0, frame = 8
 1864              		@ frame_needed = 0, uses_anonymous_args = 0
 562:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_temp_sense_en(nau7802_t *adc, int mode) {
 1865              		.loc 1 562 67 is_stmt 0 view .LVU425
 1866 0000 30B5     		push	{r4, r5, lr}
 1867              	.LCFI43:
 1868              		.cfi_def_cfa_offset 12
 1869              		.cfi_offset 4, -12
 1870              		.cfi_offset 5, -8
 1871              		.cfi_offset 14, -4
 1872 0002 83B0     		sub	sp, sp, #12
 1873              	.LCFI44:
 1874              		.cfi_def_cfa_offset 24
 1875 0004 0400     		movs	r4, r0
 1876 0006 0D00     		movs	r5, r1
 563:Core/Src/nau7802.c ****     uint8_t           reg_state;
 1877              		.loc 1 563 5 is_stmt 1 view .LVU426
 564:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 1878              		.loc 1 564 5 view .LVU427
 566:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1879              		.loc 1 566 5 view .LVU428
 566:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1880              		.loc 1 566 11 is_stmt 0 view .LVU429
 1881 0008 6B46     		mov	r3, sp
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 58


 1882 000a DA1D     		adds	r2, r3, #7
 1883 000c 1121     		movs	r1, #17
 1884              	.LVL209:
 566:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1885              		.loc 1 566 11 view .LVU430
 1886 000e FFF7FEFF 		bl	nau7802_reg_read
 1887              	.LVL210:
 567:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1888              		.loc 1 567 5 is_stmt 1 view .LVU431
 567:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1889              		.loc 1 567 8 is_stmt 0 view .LVU432
 1890 0012 0028     		cmp	r0, #0
 1891 0014 0AD1     		bne	.L66
 571:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 1892              		.loc 1 571 5 is_stmt 1 view .LVU433
 571:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 1893              		.loc 1 571 8 is_stmt 0 view .LVU434
 1894 0016 002D     		cmp	r5, #0
 1895 0018 0AD0     		beq	.L67
 572:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_TS_BIT);
 1896              		.loc 1 572 9 is_stmt 1 view .LVU435
 572:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_TS_BIT);
 1897              		.loc 1 572 16 is_stmt 0 view .LVU436
 1898 001a 6B46     		mov	r3, sp
 1899 001c DA79     		ldrb	r2, [r3, #7]
 1900 001e 0223     		movs	r3, #2
 1901 0020 1A43     		orrs	r2, r3
 1902 0022 D2B2     		uxtb	r2, r2
 1903 0024 1121     		movs	r1, #17
 1904 0026 2000     		movs	r0, r4
 1905              	.LVL211:
 572:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_TS_BIT);
 1906              		.loc 1 572 16 view .LVU437
 1907 0028 FFF7FEFF 		bl	nau7802_reg_write
 1908              	.LVL212:
 1909              	.L66:
 577:Core/Src/nau7802.c **** }
 1910              		.loc 1 577 1 view .LVU438
 1911 002c 03B0     		add	sp, sp, #12
 1912              		@ sp needed
 1913              	.LVL213:
 1914              	.LVL214:
 577:Core/Src/nau7802.c **** }
 1915              		.loc 1 577 1 view .LVU439
 1916 002e 30BD     		pop	{r4, r5, pc}
 1917              	.LVL215:
 1918              	.L67:
 575:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_TS_BIT));
 1919              		.loc 1 575 9 is_stmt 1 view .LVU440
 575:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_TS_BIT));
 1920              		.loc 1 575 16 is_stmt 0 view .LVU441
 1921 0030 6B46     		mov	r3, sp
 1922 0032 DA79     		ldrb	r2, [r3, #7]
 1923 0034 0223     		movs	r3, #2
 1924 0036 9A43     		bics	r2, r3
 1925 0038 1121     		movs	r1, #17
 1926 003a 2000     		movs	r0, r4
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 59


 1927              	.LVL216:
 575:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_TS_BIT));
 1928              		.loc 1 575 16 view .LVU442
 1929 003c FFF7FEFF 		bl	nau7802_reg_write
 1930              	.LVL217:
 1931 0040 F4E7     		b	.L66
 1932              		.cfi_endproc
 1933              	.LFE341:
 1935              		.section	.text.nau7802_bandgap_chop_en,"ax",%progbits
 1936              		.align	1
 1937              		.global	nau7802_bandgap_chop_en
 1938              		.syntax unified
 1939              		.code	16
 1940              		.thumb_func
 1941              		.fpu softvfp
 1943              	nau7802_bandgap_chop_en:
 1944              	.LVL218:
 1945              	.LFB342:
 587:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_bandgap_chop_en(nau7802_t *adc, int mode) {
 1946              		.loc 1 587 69 is_stmt 1 view -0
 1947              		.cfi_startproc
 1948              		@ args = 0, pretend = 0, frame = 8
 1949              		@ frame_needed = 0, uses_anonymous_args = 0
 587:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_bandgap_chop_en(nau7802_t *adc, int mode) {
 1950              		.loc 1 587 69 is_stmt 0 view .LVU444
 1951 0000 30B5     		push	{r4, r5, lr}
 1952              	.LCFI45:
 1953              		.cfi_def_cfa_offset 12
 1954              		.cfi_offset 4, -12
 1955              		.cfi_offset 5, -8
 1956              		.cfi_offset 14, -4
 1957 0002 83B0     		sub	sp, sp, #12
 1958              	.LCFI46:
 1959              		.cfi_def_cfa_offset 24
 1960 0004 0400     		movs	r4, r0
 1961 0006 0D00     		movs	r5, r1
 588:Core/Src/nau7802.c ****     uint8_t           reg_state;
 1962              		.loc 1 588 5 is_stmt 1 view .LVU445
 589:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 1963              		.loc 1 589 5 view .LVU446
 591:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1964              		.loc 1 591 5 view .LVU447
 591:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1965              		.loc 1 591 11 is_stmt 0 view .LVU448
 1966 0008 6B46     		mov	r3, sp
 1967 000a DA1D     		adds	r2, r3, #7
 1968 000c 1121     		movs	r1, #17
 1969              	.LVL219:
 591:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_I2C_CNTRL, &reg_state);
 1970              		.loc 1 591 11 view .LVU449
 1971 000e FFF7FEFF 		bl	nau7802_reg_read
 1972              	.LVL220:
 592:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1973              		.loc 1 592 5 is_stmt 1 view .LVU450
 592:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 1974              		.loc 1 592 8 is_stmt 0 view .LVU451
 1975 0012 0028     		cmp	r0, #0
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 60


 1976 0014 0AD1     		bne	.L69
 596:Core/Src/nau7802.c ****     if (mode != 0) { // Disable
 1977              		.loc 1 596 5 is_stmt 1 view .LVU452
 596:Core/Src/nau7802.c ****     if (mode != 0) { // Disable
 1978              		.loc 1 596 8 is_stmt 0 view .LVU453
 1979 0016 002D     		cmp	r5, #0
 1980 0018 0AD0     		beq	.L70
 597:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_BGPCP_BIT);
 1981              		.loc 1 597 9 is_stmt 1 view .LVU454
 597:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_BGPCP_BIT);
 1982              		.loc 1 597 16 is_stmt 0 view .LVU455
 1983 001a 6B46     		mov	r3, sp
 1984 001c DA79     		ldrb	r2, [r3, #7]
 1985 001e 0123     		movs	r3, #1
 1986 0020 1A43     		orrs	r2, r3
 1987 0022 D2B2     		uxtb	r2, r2
 1988 0024 1121     		movs	r1, #17
 1989 0026 2000     		movs	r0, r4
 1990              	.LVL221:
 597:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state | NAU7802_REG_BGPCP_BIT);
 1991              		.loc 1 597 16 view .LVU456
 1992 0028 FFF7FEFF 		bl	nau7802_reg_write
 1993              	.LVL222:
 1994              	.L69:
 602:Core/Src/nau7802.c **** }
 1995              		.loc 1 602 1 view .LVU457
 1996 002c 03B0     		add	sp, sp, #12
 1997              		@ sp needed
 1998              	.LVL223:
 1999              	.LVL224:
 602:Core/Src/nau7802.c **** }
 2000              		.loc 1 602 1 view .LVU458
 2001 002e 30BD     		pop	{r4, r5, pc}
 2002              	.LVL225:
 2003              	.L70:
 600:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_BGPCP_BIT));
 2004              		.loc 1 600 9 is_stmt 1 view .LVU459
 600:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_BGPCP_BIT));
 2005              		.loc 1 600 16 is_stmt 0 view .LVU460
 2006 0030 6B46     		mov	r3, sp
 2007 0032 DA79     		ldrb	r2, [r3, #7]
 2008 0034 0123     		movs	r3, #1
 2009 0036 9A43     		bics	r2, r3
 2010 0038 1121     		movs	r1, #17
 2011 003a 2000     		movs	r0, r4
 2012              	.LVL226:
 600:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_I2C_CNTRL, reg_state & (~NAU7802_REG_BGPCP_BIT));
 2013              		.loc 1 600 16 view .LVU461
 2014 003c FFF7FEFF 		bl	nau7802_reg_write
 2015              	.LVL227:
 2016 0040 F4E7     		b	.L69
 2017              		.cfi_endproc
 2018              	.LFE342:
 2020              		.section	.text.nau7802_extended_cm,"ax",%progbits
 2021              		.align	1
 2022              		.global	nau7802_extended_cm
 2023              		.syntax unified
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 61


 2024              		.code	16
 2025              		.thumb_func
 2026              		.fpu softvfp
 2028              	nau7802_extended_cm:
 2029              	.LVL228:
 2030              	.LFB343:
 616:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_extended_cm(nau7802_t *adc, int mode) {
 2031              		.loc 1 616 65 is_stmt 1 view -0
 2032              		.cfi_startproc
 2033              		@ args = 0, pretend = 0, frame = 8
 2034              		@ frame_needed = 0, uses_anonymous_args = 0
 616:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_extended_cm(nau7802_t *adc, int mode) {
 2035              		.loc 1 616 65 is_stmt 0 view .LVU463
 2036 0000 30B5     		push	{r4, r5, lr}
 2037              	.LCFI47:
 2038              		.cfi_def_cfa_offset 12
 2039              		.cfi_offset 4, -12
 2040              		.cfi_offset 5, -8
 2041              		.cfi_offset 14, -4
 2042 0002 83B0     		sub	sp, sp, #12
 2043              	.LCFI48:
 2044              		.cfi_def_cfa_offset 24
 2045 0004 0500     		movs	r5, r0
 2046 0006 0C00     		movs	r4, r1
 617:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2047              		.loc 1 617 5 is_stmt 1 view .LVU464
 618:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2048              		.loc 1 618 5 view .LVU465
 620:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_ADC, &reg_state);
 2049              		.loc 1 620 5 view .LVU466
 620:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_ADC, &reg_state);
 2050              		.loc 1 620 11 is_stmt 0 view .LVU467
 2051 0008 6B46     		mov	r3, sp
 2052 000a DA1D     		adds	r2, r3, #7
 2053 000c 1521     		movs	r1, #21
 2054              	.LVL229:
 620:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_ADC, &reg_state);
 2055              		.loc 1 620 11 view .LVU468
 2056 000e FFF7FEFF 		bl	nau7802_reg_read
 2057              	.LVL230:
 621:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 2058              		.loc 1 621 5 is_stmt 1 view .LVU469
 621:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 2059              		.loc 1 621 8 is_stmt 0 view .LVU470
 2060 0012 0028     		cmp	r0, #0
 2061 0014 01D1     		bne	.L72
 621:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 2062              		.loc 1 621 23 discriminator 1 view .LVU471
 2063 0016 032C     		cmp	r4, #3
 2064 0018 01D9     		bls	.L73
 2065              	.LVL231:
 2066              	.L72:
 626:Core/Src/nau7802.c **** }
 2067              		.loc 1 626 1 view .LVU472
 2068 001a 03B0     		add	sp, sp, #12
 2069              		@ sp needed
 2070              	.LVL232:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 62


 626:Core/Src/nau7802.c **** }
 2071              		.loc 1 626 1 view .LVU473
 2072 001c 30BD     		pop	{r4, r5, pc}
 2073              	.LVL233:
 2074              	.L73:
 625:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_ADC_ADC_VCM(mode));
 2075              		.loc 1 625 5 is_stmt 1 view .LVU474
 625:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_ADC_ADC_VCM(mode));
 2076              		.loc 1 625 12 is_stmt 0 view .LVU475
 2077 001e A400     		lsls	r4, r4, #2
 2078              	.LVL234:
 625:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_ADC_ADC_VCM(mode));
 2079              		.loc 1 625 12 view .LVU476
 2080 0020 E2B2     		uxtb	r2, r4
 2081 0022 0121     		movs	r1, #1
 2082 0024 2800     		movs	r0, r5
 2083              	.LVL235:
 625:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_CTRL1, NAU7802_ADC_ADC_VCM(mode));
 2084              		.loc 1 625 12 view .LVU477
 2085 0026 FFF7FEFF 		bl	nau7802_reg_write
 2086              	.LVL236:
 2087 002a F6E7     		b	.L72
 2088              		.cfi_endproc
 2089              	.LFE343:
 2091              		.section	.text.nau7802_ldomode,"ax",%progbits
 2092              		.align	1
 2093              		.global	nau7802_ldomode
 2094              		.syntax unified
 2095              		.code	16
 2096              		.thumb_func
 2097              		.fpu softvfp
 2099              	nau7802_ldomode:
 2100              	.LVL237:
 2101              	.LFB344:
 636:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_ldomode(nau7802_t *adc, int mode) {
 2102              		.loc 1 636 61 is_stmt 1 view -0
 2103              		.cfi_startproc
 2104              		@ args = 0, pretend = 0, frame = 8
 2105              		@ frame_needed = 0, uses_anonymous_args = 0
 636:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_ldomode(nau7802_t *adc, int mode) {
 2106              		.loc 1 636 61 is_stmt 0 view .LVU479
 2107 0000 30B5     		push	{r4, r5, lr}
 2108              	.LCFI49:
 2109              		.cfi_def_cfa_offset 12
 2110              		.cfi_offset 4, -12
 2111              		.cfi_offset 5, -8
 2112              		.cfi_offset 14, -4
 2113 0002 83B0     		sub	sp, sp, #12
 2114              	.LCFI50:
 2115              		.cfi_def_cfa_offset 24
 2116 0004 0400     		movs	r4, r0
 2117 0006 0D00     		movs	r5, r1
 637:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2118              		.loc 1 637 5 is_stmt 1 view .LVU480
 638:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2119              		.loc 1 638 5 view .LVU481
 640:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 63


 2120              		.loc 1 640 5 view .LVU482
 640:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2121              		.loc 1 640 11 is_stmt 0 view .LVU483
 2122 0008 6B46     		mov	r3, sp
 2123 000a DA1D     		adds	r2, r3, #7
 2124 000c 1B21     		movs	r1, #27
 2125              	.LVL238:
 640:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2126              		.loc 1 640 11 view .LVU484
 2127 000e FFF7FEFF 		bl	nau7802_reg_read
 2128              	.LVL239:
 641:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 2129              		.loc 1 641 5 is_stmt 1 view .LVU485
 641:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 2130              		.loc 1 641 8 is_stmt 0 view .LVU486
 2131 0012 0028     		cmp	r0, #0
 2132 0014 0AD1     		bne	.L75
 645:Core/Src/nau7802.c ****     if (mode != 0) { // Improved stability
 2133              		.loc 1 645 5 is_stmt 1 view .LVU487
 645:Core/Src/nau7802.c ****     if (mode != 0) { // Improved stability
 2134              		.loc 1 645 8 is_stmt 0 view .LVU488
 2135 0016 002D     		cmp	r5, #0
 2136 0018 0AD0     		beq	.L76
 646:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_REG_BGPCP_BIT);
 2137              		.loc 1 646 9 is_stmt 1 view .LVU489
 646:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_REG_BGPCP_BIT);
 2138              		.loc 1 646 16 is_stmt 0 view .LVU490
 2139 001a 6B46     		mov	r3, sp
 2140 001c DA79     		ldrb	r2, [r3, #7]
 2141 001e 0123     		movs	r3, #1
 2142 0020 1A43     		orrs	r2, r3
 2143 0022 D2B2     		uxtb	r2, r2
 2144 0024 1B21     		movs	r1, #27
 2145 0026 2000     		movs	r0, r4
 2146              	.LVL240:
 646:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_REG_BGPCP_BIT);
 2147              		.loc 1 646 16 view .LVU491
 2148 0028 FFF7FEFF 		bl	nau7802_reg_write
 2149              	.LVL241:
 2150              	.L75:
 651:Core/Src/nau7802.c **** }
 2151              		.loc 1 651 1 view .LVU492
 2152 002c 03B0     		add	sp, sp, #12
 2153              		@ sp needed
 2154              	.LVL242:
 2155              	.LVL243:
 651:Core/Src/nau7802.c **** }
 2156              		.loc 1 651 1 view .LVU493
 2157 002e 30BD     		pop	{r4, r5, pc}
 2158              	.LVL244:
 2159              	.L76:
 649:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_REG_BGPCP_BIT));
 2160              		.loc 1 649 9 is_stmt 1 view .LVU494
 649:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_REG_BGPCP_BIT));
 2161              		.loc 1 649 16 is_stmt 0 view .LVU495
 2162 0030 6B46     		mov	r3, sp
 2163 0032 DA79     		ldrb	r2, [r3, #7]
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 64


 2164 0034 0123     		movs	r3, #1
 2165 0036 9A43     		bics	r2, r3
 2166 0038 1B21     		movs	r1, #27
 2167 003a 2000     		movs	r0, r4
 2168              	.LVL245:
 649:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_REG_BGPCP_BIT));
 2169              		.loc 1 649 16 view .LVU496
 2170 003c FFF7FEFF 		bl	nau7802_reg_write
 2171              	.LVL246:
 2172 0040 F4E7     		b	.L75
 2173              		.cfi_endproc
 2174              	.LFE344:
 2176              		.section	.text.nau7802_pga_buff_en,"ax",%progbits
 2177              		.align	1
 2178              		.global	nau7802_pga_buff_en
 2179              		.syntax unified
 2180              		.code	16
 2181              		.thumb_func
 2182              		.fpu softvfp
 2184              	nau7802_pga_buff_en:
 2185              	.LVL247:
 2186              	.LFB345:
 661:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_buff_en(nau7802_t *adc, int mode) {
 2187              		.loc 1 661 65 is_stmt 1 view -0
 2188              		.cfi_startproc
 2189              		@ args = 0, pretend = 0, frame = 8
 2190              		@ frame_needed = 0, uses_anonymous_args = 0
 661:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_buff_en(nau7802_t *adc, int mode) {
 2191              		.loc 1 661 65 is_stmt 0 view .LVU498
 2192 0000 30B5     		push	{r4, r5, lr}
 2193              	.LCFI51:
 2194              		.cfi_def_cfa_offset 12
 2195              		.cfi_offset 4, -12
 2196              		.cfi_offset 5, -8
 2197              		.cfi_offset 14, -4
 2198 0002 83B0     		sub	sp, sp, #12
 2199              	.LCFI52:
 2200              		.cfi_def_cfa_offset 24
 2201 0004 0400     		movs	r4, r0
 2202 0006 0D00     		movs	r5, r1
 662:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2203              		.loc 1 662 5 is_stmt 1 view .LVU499
 663:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2204              		.loc 1 663 5 view .LVU500
 665:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2205              		.loc 1 665 5 view .LVU501
 665:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2206              		.loc 1 665 11 is_stmt 0 view .LVU502
 2207 0008 6B46     		mov	r3, sp
 2208 000a DA1D     		adds	r2, r3, #7
 2209 000c 1B21     		movs	r1, #27
 2210              	.LVL248:
 665:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2211              		.loc 1 665 11 view .LVU503
 2212 000e FFF7FEFF 		bl	nau7802_reg_read
 2213              	.LVL249:
 666:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 65


 2214              		.loc 1 666 5 is_stmt 1 view .LVU504
 666:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 2215              		.loc 1 666 8 is_stmt 0 view .LVU505
 2216 0012 0028     		cmp	r0, #0
 2217 0014 0AD1     		bne	.L78
 670:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 2218              		.loc 1 670 5 is_stmt 1 view .LVU506
 670:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 2219              		.loc 1 670 8 is_stmt 0 view .LVU507
 2220 0016 002D     		cmp	r5, #0
 2221 0018 0AD0     		beq	.L79
 671:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_BUFF_EN_BIT);
 2222              		.loc 1 671 9 is_stmt 1 view .LVU508
 671:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_BUFF_EN_BIT);
 2223              		.loc 1 671 16 is_stmt 0 view .LVU509
 2224 001a 6B46     		mov	r3, sp
 2225 001c DA79     		ldrb	r2, [r3, #7]
 2226 001e 2023     		movs	r3, #32
 2227 0020 1A43     		orrs	r2, r3
 2228 0022 D2B2     		uxtb	r2, r2
 2229 0024 1B21     		movs	r1, #27
 2230 0026 2000     		movs	r0, r4
 2231              	.LVL250:
 671:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_BUFF_EN_BIT);
 2232              		.loc 1 671 16 view .LVU510
 2233 0028 FFF7FEFF 		bl	nau7802_reg_write
 2234              	.LVL251:
 2235              	.L78:
 676:Core/Src/nau7802.c **** }
 2236              		.loc 1 676 1 view .LVU511
 2237 002c 03B0     		add	sp, sp, #12
 2238              		@ sp needed
 2239              	.LVL252:
 2240              	.LVL253:
 676:Core/Src/nau7802.c **** }
 2241              		.loc 1 676 1 view .LVU512
 2242 002e 30BD     		pop	{r4, r5, pc}
 2243              	.LVL254:
 2244              	.L79:
 674:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_BUFF_EN_BIT));
 2245              		.loc 1 674 9 is_stmt 1 view .LVU513
 674:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_BUFF_EN_BIT));
 2246              		.loc 1 674 16 is_stmt 0 view .LVU514
 2247 0030 6B46     		mov	r3, sp
 2248 0032 DA79     		ldrb	r2, [r3, #7]
 2249 0034 2023     		movs	r3, #32
 2250 0036 9A43     		bics	r2, r3
 2251 0038 1B21     		movs	r1, #27
 2252 003a 2000     		movs	r0, r4
 2253              	.LVL255:
 674:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_BUFF_EN_BIT));
 2254              		.loc 1 674 16 view .LVU515
 2255 003c FFF7FEFF 		bl	nau7802_reg_write
 2256              	.LVL256:
 2257 0040 F4E7     		b	.L78
 2258              		.cfi_endproc
 2259              	.LFE345:
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 66


 2261              		.section	.text.nau7802_pga_bypass_en,"ax",%progbits
 2262              		.align	1
 2263              		.global	nau7802_pga_bypass_en
 2264              		.syntax unified
 2265              		.code	16
 2266              		.thumb_func
 2267              		.fpu softvfp
 2269              	nau7802_pga_bypass_en:
 2270              	.LVL257:
 2271              	.LFB346:
 685:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_bypass_en(nau7802_t *adc, int mode) {
 2272              		.loc 1 685 67 is_stmt 1 view -0
 2273              		.cfi_startproc
 2274              		@ args = 0, pretend = 0, frame = 8
 2275              		@ frame_needed = 0, uses_anonymous_args = 0
 685:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_bypass_en(nau7802_t *adc, int mode) {
 2276              		.loc 1 685 67 is_stmt 0 view .LVU517
 2277 0000 30B5     		push	{r4, r5, lr}
 2278              	.LCFI53:
 2279              		.cfi_def_cfa_offset 12
 2280              		.cfi_offset 4, -12
 2281              		.cfi_offset 5, -8
 2282              		.cfi_offset 14, -4
 2283 0002 83B0     		sub	sp, sp, #12
 2284              	.LCFI54:
 2285              		.cfi_def_cfa_offset 24
 2286 0004 0400     		movs	r4, r0
 2287 0006 0D00     		movs	r5, r1
 686:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2288              		.loc 1 686 5 is_stmt 1 view .LVU518
 687:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2289              		.loc 1 687 5 view .LVU519
 689:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2290              		.loc 1 689 5 view .LVU520
 689:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2291              		.loc 1 689 11 is_stmt 0 view .LVU521
 2292 0008 6B46     		mov	r3, sp
 2293 000a DA1D     		adds	r2, r3, #7
 2294 000c 1B21     		movs	r1, #27
 2295              	.LVL258:
 689:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2296              		.loc 1 689 11 view .LVU522
 2297 000e FFF7FEFF 		bl	nau7802_reg_read
 2298              	.LVL259:
 690:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 2299              		.loc 1 690 5 is_stmt 1 view .LVU523
 690:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 2300              		.loc 1 690 8 is_stmt 0 view .LVU524
 2301 0012 0028     		cmp	r0, #0
 2302 0014 0AD1     		bne	.L81
 694:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 2303              		.loc 1 694 5 is_stmt 1 view .LVU525
 694:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 2304              		.loc 1 694 8 is_stmt 0 view .LVU526
 2305 0016 002D     		cmp	r5, #0
 2306 0018 0AD0     		beq	.L82
 695:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_BYPASS_EN_BIT);
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 67


 2307              		.loc 1 695 9 is_stmt 1 view .LVU527
 695:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_BYPASS_EN_BIT);
 2308              		.loc 1 695 16 is_stmt 0 view .LVU528
 2309 001a 6B46     		mov	r3, sp
 2310 001c DA79     		ldrb	r2, [r3, #7]
 2311 001e 1023     		movs	r3, #16
 2312 0020 1A43     		orrs	r2, r3
 2313 0022 D2B2     		uxtb	r2, r2
 2314 0024 1B21     		movs	r1, #27
 2315 0026 2000     		movs	r0, r4
 2316              	.LVL260:
 695:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_BYPASS_EN_BIT);
 2317              		.loc 1 695 16 view .LVU529
 2318 0028 FFF7FEFF 		bl	nau7802_reg_write
 2319              	.LVL261:
 2320              	.L81:
 700:Core/Src/nau7802.c **** }
 2321              		.loc 1 700 1 view .LVU530
 2322 002c 03B0     		add	sp, sp, #12
 2323              		@ sp needed
 2324              	.LVL262:
 2325              	.LVL263:
 700:Core/Src/nau7802.c **** }
 2326              		.loc 1 700 1 view .LVU531
 2327 002e 30BD     		pop	{r4, r5, pc}
 2328              	.LVL264:
 2329              	.L82:
 698:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_BYPASS_EN_BIT));
 2330              		.loc 1 698 9 is_stmt 1 view .LVU532
 698:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_BYPASS_EN_BIT));
 2331              		.loc 1 698 16 is_stmt 0 view .LVU533
 2332 0030 6B46     		mov	r3, sp
 2333 0032 DA79     		ldrb	r2, [r3, #7]
 2334 0034 1023     		movs	r3, #16
 2335 0036 9A43     		bics	r2, r3
 2336 0038 1B21     		movs	r1, #27
 2337 003a 2000     		movs	r0, r4
 2338              	.LVL265:
 698:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_BYPASS_EN_BIT));
 2339              		.loc 1 698 16 view .LVU534
 2340 003c FFF7FEFF 		bl	nau7802_reg_write
 2341              	.LVL266:
 2342 0040 F4E7     		b	.L81
 2343              		.cfi_endproc
 2344              	.LFE346:
 2346              		.section	.text.nau7802_pga_inv_en,"ax",%progbits
 2347              		.align	1
 2348              		.global	nau7802_pga_inv_en
 2349              		.syntax unified
 2350              		.code	16
 2351              		.thumb_func
 2352              		.fpu softvfp
 2354              	nau7802_pga_inv_en:
 2355              	.LVL267:
 2356              	.LFB347:
 710:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_inv_en(nau7802_t *adc, int mode) {
 2357              		.loc 1 710 64 is_stmt 1 view -0
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 68


 2358              		.cfi_startproc
 2359              		@ args = 0, pretend = 0, frame = 8
 2360              		@ frame_needed = 0, uses_anonymous_args = 0
 710:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_inv_en(nau7802_t *adc, int mode) {
 2361              		.loc 1 710 64 is_stmt 0 view .LVU536
 2362 0000 30B5     		push	{r4, r5, lr}
 2363              	.LCFI55:
 2364              		.cfi_def_cfa_offset 12
 2365              		.cfi_offset 4, -12
 2366              		.cfi_offset 5, -8
 2367              		.cfi_offset 14, -4
 2368 0002 83B0     		sub	sp, sp, #12
 2369              	.LCFI56:
 2370              		.cfi_def_cfa_offset 24
 2371 0004 0400     		movs	r4, r0
 2372 0006 0D00     		movs	r5, r1
 711:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2373              		.loc 1 711 5 is_stmt 1 view .LVU537
 712:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2374              		.loc 1 712 5 view .LVU538
 714:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2375              		.loc 1 714 5 view .LVU539
 714:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2376              		.loc 1 714 11 is_stmt 0 view .LVU540
 2377 0008 6B46     		mov	r3, sp
 2378 000a DA1D     		adds	r2, r3, #7
 2379 000c 1B21     		movs	r1, #27
 2380              	.LVL268:
 714:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2381              		.loc 1 714 11 view .LVU541
 2382 000e FFF7FEFF 		bl	nau7802_reg_read
 2383              	.LVL269:
 715:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 2384              		.loc 1 715 5 is_stmt 1 view .LVU542
 715:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 2385              		.loc 1 715 8 is_stmt 0 view .LVU543
 2386 0012 0028     		cmp	r0, #0
 2387 0014 0AD1     		bne	.L84
 719:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 2388              		.loc 1 719 5 is_stmt 1 view .LVU544
 719:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 2389              		.loc 1 719 8 is_stmt 0 view .LVU545
 2390 0016 002D     		cmp	r5, #0
 2391 0018 0AD0     		beq	.L85
 720:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_PGAINV_BIT);
 2392              		.loc 1 720 9 is_stmt 1 view .LVU546
 720:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_PGAINV_BIT);
 2393              		.loc 1 720 16 is_stmt 0 view .LVU547
 2394 001a 6B46     		mov	r3, sp
 2395 001c DA79     		ldrb	r2, [r3, #7]
 2396 001e 0823     		movs	r3, #8
 2397 0020 1A43     		orrs	r2, r3
 2398 0022 D2B2     		uxtb	r2, r2
 2399 0024 1B21     		movs	r1, #27
 2400 0026 2000     		movs	r0, r4
 2401              	.LVL270:
 720:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_PGAINV_BIT);
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 69


 2402              		.loc 1 720 16 view .LVU548
 2403 0028 FFF7FEFF 		bl	nau7802_reg_write
 2404              	.LVL271:
 2405              	.L84:
 725:Core/Src/nau7802.c **** }
 2406              		.loc 1 725 1 view .LVU549
 2407 002c 03B0     		add	sp, sp, #12
 2408              		@ sp needed
 2409              	.LVL272:
 2410              	.LVL273:
 725:Core/Src/nau7802.c **** }
 2411              		.loc 1 725 1 view .LVU550
 2412 002e 30BD     		pop	{r4, r5, pc}
 2413              	.LVL274:
 2414              	.L85:
 723:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_PGAINV_BIT));
 2415              		.loc 1 723 9 is_stmt 1 view .LVU551
 723:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_PGAINV_BIT));
 2416              		.loc 1 723 16 is_stmt 0 view .LVU552
 2417 0030 6B46     		mov	r3, sp
 2418 0032 DA79     		ldrb	r2, [r3, #7]
 2419 0034 0823     		movs	r3, #8
 2420 0036 9A43     		bics	r2, r3
 2421 0038 1B21     		movs	r1, #27
 2422 003a 2000     		movs	r0, r4
 2423              	.LVL275:
 723:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_PGAINV_BIT));
 2424              		.loc 1 723 16 view .LVU553
 2425 003c FFF7FEFF 		bl	nau7802_reg_write
 2426              	.LVL276:
 2427 0040 F4E7     		b	.L84
 2428              		.cfi_endproc
 2429              	.LFE347:
 2431              		.section	.text.nau7802_chop_den,"ax",%progbits
 2432              		.align	1
 2433              		.global	nau7802_chop_den
 2434              		.syntax unified
 2435              		.code	16
 2436              		.thumb_func
 2437              		.fpu softvfp
 2439              	nau7802_chop_den:
 2440              	.LVL277:
 2441              	.LFB348:
 735:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_chop_den(nau7802_t *adc, int mode) {
 2442              		.loc 1 735 62 is_stmt 1 view -0
 2443              		.cfi_startproc
 2444              		@ args = 0, pretend = 0, frame = 8
 2445              		@ frame_needed = 0, uses_anonymous_args = 0
 735:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_chop_den(nau7802_t *adc, int mode) {
 2446              		.loc 1 735 62 is_stmt 0 view .LVU555
 2447 0000 30B5     		push	{r4, r5, lr}
 2448              	.LCFI57:
 2449              		.cfi_def_cfa_offset 12
 2450              		.cfi_offset 4, -12
 2451              		.cfi_offset 5, -8
 2452              		.cfi_offset 14, -4
 2453 0002 83B0     		sub	sp, sp, #12
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 70


 2454              	.LCFI58:
 2455              		.cfi_def_cfa_offset 24
 2456 0004 0400     		movs	r4, r0
 2457 0006 0D00     		movs	r5, r1
 736:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2458              		.loc 1 736 5 is_stmt 1 view .LVU556
 737:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2459              		.loc 1 737 5 view .LVU557
 739:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2460              		.loc 1 739 5 view .LVU558
 739:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2461              		.loc 1 739 11 is_stmt 0 view .LVU559
 2462 0008 6B46     		mov	r3, sp
 2463 000a DA1D     		adds	r2, r3, #7
 2464 000c 1B21     		movs	r1, #27
 2465              	.LVL278:
 739:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PGA, &reg_state);
 2466              		.loc 1 739 11 view .LVU560
 2467 000e FFF7FEFF 		bl	nau7802_reg_read
 2468              	.LVL279:
 740:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 2469              		.loc 1 740 5 is_stmt 1 view .LVU561
 740:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 2470              		.loc 1 740 8 is_stmt 0 view .LVU562
 2471 0012 0028     		cmp	r0, #0
 2472 0014 0AD1     		bne	.L87
 744:Core/Src/nau7802.c ****     if (mode != 0) { // Disable
 2473              		.loc 1 744 5 is_stmt 1 view .LVU563
 744:Core/Src/nau7802.c ****     if (mode != 0) { // Disable
 2474              		.loc 1 744 8 is_stmt 0 view .LVU564
 2475 0016 002D     		cmp	r5, #0
 2476 0018 0AD0     		beq	.L88
 745:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_PGAINV_BIT);
 2477              		.loc 1 745 9 is_stmt 1 view .LVU565
 745:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_PGAINV_BIT);
 2478              		.loc 1 745 16 is_stmt 0 view .LVU566
 2479 001a 6B46     		mov	r3, sp
 2480 001c DA79     		ldrb	r2, [r3, #7]
 2481 001e 0823     		movs	r3, #8
 2482 0020 1A43     		orrs	r2, r3
 2483 0022 D2B2     		uxtb	r2, r2
 2484 0024 1B21     		movs	r1, #27
 2485 0026 2000     		movs	r0, r4
 2486              	.LVL280:
 745:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state | NAU7802_PGA_PGAINV_BIT);
 2487              		.loc 1 745 16 view .LVU567
 2488 0028 FFF7FEFF 		bl	nau7802_reg_write
 2489              	.LVL281:
 2490              	.L87:
 750:Core/Src/nau7802.c **** }
 2491              		.loc 1 750 1 view .LVU568
 2492 002c 03B0     		add	sp, sp, #12
 2493              		@ sp needed
 2494              	.LVL282:
 2495              	.LVL283:
 750:Core/Src/nau7802.c **** }
 2496              		.loc 1 750 1 view .LVU569
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 71


 2497 002e 30BD     		pop	{r4, r5, pc}
 2498              	.LVL284:
 2499              	.L88:
 748:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_PGAINV_BIT));
 2500              		.loc 1 748 9 is_stmt 1 view .LVU570
 748:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_PGAINV_BIT));
 2501              		.loc 1 748 16 is_stmt 0 view .LVU571
 2502 0030 6B46     		mov	r3, sp
 2503 0032 DA79     		ldrb	r2, [r3, #7]
 2504 0034 0823     		movs	r3, #8
 2505 0036 9A43     		bics	r2, r3
 2506 0038 1B21     		movs	r1, #27
 2507 003a 2000     		movs	r0, r4
 2508              	.LVL285:
 748:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PGA, reg_state & (~NAU7802_PGA_PGAINV_BIT));
 2509              		.loc 1 748 16 view .LVU572
 2510 003c FFF7FEFF 		bl	nau7802_reg_write
 2511              	.LVL286:
 2512 0040 F4E7     		b	.L87
 2513              		.cfi_endproc
 2514              	.LFE348:
 2516              		.section	.text.nau7802_pga_cap_en,"ax",%progbits
 2517              		.align	1
 2518              		.global	nau7802_pga_cap_en
 2519              		.syntax unified
 2520              		.code	16
 2521              		.thumb_func
 2522              		.fpu softvfp
 2524              	nau7802_pga_cap_en:
 2525              	.LVL287:
 2526              	.LFB349:
 760:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_cap_en(nau7802_t *adc, int mode) {
 2527              		.loc 1 760 64 is_stmt 1 view -0
 2528              		.cfi_startproc
 2529              		@ args = 0, pretend = 0, frame = 8
 2530              		@ frame_needed = 0, uses_anonymous_args = 0
 760:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_cap_en(nau7802_t *adc, int mode) {
 2531              		.loc 1 760 64 is_stmt 0 view .LVU574
 2532 0000 30B5     		push	{r4, r5, lr}
 2533              	.LCFI59:
 2534              		.cfi_def_cfa_offset 12
 2535              		.cfi_offset 4, -12
 2536              		.cfi_offset 5, -8
 2537              		.cfi_offset 14, -4
 2538 0002 83B0     		sub	sp, sp, #12
 2539              	.LCFI60:
 2540              		.cfi_def_cfa_offset 24
 2541 0004 0400     		movs	r4, r0
 2542 0006 0D00     		movs	r5, r1
 761:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2543              		.loc 1 761 5 is_stmt 1 view .LVU575
 762:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2544              		.loc 1 762 5 view .LVU576
 764:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2545              		.loc 1 764 5 view .LVU577
 764:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2546              		.loc 1 764 11 is_stmt 0 view .LVU578
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 72


 2547 0008 6B46     		mov	r3, sp
 2548 000a DA1D     		adds	r2, r3, #7
 2549 000c 1C21     		movs	r1, #28
 2550              	.LVL288:
 764:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2551              		.loc 1 764 11 view .LVU579
 2552 000e FFF7FEFF 		bl	nau7802_reg_read
 2553              	.LVL289:
 765:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 2554              		.loc 1 765 5 is_stmt 1 view .LVU580
 765:Core/Src/nau7802.c ****     if (ret != HAL_OK) {
 2555              		.loc 1 765 8 is_stmt 0 view .LVU581
 2556 0012 0028     		cmp	r0, #0
 2557 0014 0CD1     		bne	.L90
 769:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 2558              		.loc 1 769 5 is_stmt 1 view .LVU582
 769:Core/Src/nau7802.c ****     if (mode != 0) { // Enable
 2559              		.loc 1 769 8 is_stmt 0 view .LVU583
 2560 0016 002D     		cmp	r5, #0
 2561 0018 0CD0     		beq	.L91
 770:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, reg_state | NAU7802_PWR_CTRL_PGA_CAP_EN
 2562              		.loc 1 770 9 is_stmt 1 view .LVU584
 770:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, reg_state | NAU7802_PWR_CTRL_PGA_CAP_EN
 2563              		.loc 1 770 16 is_stmt 0 view .LVU585
 2564 001a 6B46     		mov	r3, sp
 2565 001c 0733     		adds	r3, r3, #7
 2566 001e 1B78     		ldrb	r3, [r3]
 2567 0020 8022     		movs	r2, #128
 2568 0022 5242     		rsbs	r2, r2, #0
 2569 0024 1A43     		orrs	r2, r3
 2570 0026 D2B2     		uxtb	r2, r2
 2571 0028 1C21     		movs	r1, #28
 2572 002a 2000     		movs	r0, r4
 2573              	.LVL290:
 770:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, reg_state | NAU7802_PWR_CTRL_PGA_CAP_EN
 2574              		.loc 1 770 16 view .LVU586
 2575 002c FFF7FEFF 		bl	nau7802_reg_write
 2576              	.LVL291:
 2577              	.L90:
 775:Core/Src/nau7802.c **** }
 2578              		.loc 1 775 1 view .LVU587
 2579 0030 03B0     		add	sp, sp, #12
 2580              		@ sp needed
 2581              	.LVL292:
 2582              	.LVL293:
 775:Core/Src/nau7802.c **** }
 2583              		.loc 1 775 1 view .LVU588
 2584 0032 30BD     		pop	{r4, r5, pc}
 2585              	.LVL294:
 2586              	.L91:
 773:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, reg_state & (~NAU7802_PWR_CTRL_PGA_CAP_
 2587              		.loc 1 773 9 is_stmt 1 view .LVU589
 773:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, reg_state & (~NAU7802_PWR_CTRL_PGA_CAP_
 2588              		.loc 1 773 16 is_stmt 0 view .LVU590
 2589 0034 6B46     		mov	r3, sp
 2590 0036 0733     		adds	r3, r3, #7
 2591 0038 1B78     		ldrb	r3, [r3]
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 73


 2592 003a 7F22     		movs	r2, #127
 2593 003c 1A40     		ands	r2, r3
 2594 003e 1C21     		movs	r1, #28
 2595 0040 2000     		movs	r0, r4
 2596              	.LVL295:
 773:Core/Src/nau7802.c ****         return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, reg_state & (~NAU7802_PWR_CTRL_PGA_CAP_
 2597              		.loc 1 773 16 view .LVU591
 2598 0042 FFF7FEFF 		bl	nau7802_reg_write
 2599              	.LVL296:
 2600 0046 F3E7     		b	.L90
 2601              		.cfi_endproc
 2602              	.LFE349:
 2604              		.section	.text.nau7802_biase_curr,"ax",%progbits
 2605              		.align	1
 2606              		.global	nau7802_biase_curr
 2607              		.syntax unified
 2608              		.code	16
 2609              		.thumb_func
 2610              		.fpu softvfp
 2612              	nau7802_biase_curr:
 2613              	.LVL297:
 2614              	.LFB350:
 794:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_biase_curr(nau7802_t *adc, int mode) {
 2615              		.loc 1 794 64 is_stmt 1 view -0
 2616              		.cfi_startproc
 2617              		@ args = 0, pretend = 0, frame = 8
 2618              		@ frame_needed = 0, uses_anonymous_args = 0
 794:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_biase_curr(nau7802_t *adc, int mode) {
 2619              		.loc 1 794 64 is_stmt 0 view .LVU593
 2620 0000 30B5     		push	{r4, r5, lr}
 2621              	.LCFI61:
 2622              		.cfi_def_cfa_offset 12
 2623              		.cfi_offset 4, -12
 2624              		.cfi_offset 5, -8
 2625              		.cfi_offset 14, -4
 2626 0002 83B0     		sub	sp, sp, #12
 2627              	.LCFI62:
 2628              		.cfi_def_cfa_offset 24
 2629 0004 0500     		movs	r5, r0
 2630 0006 0C00     		movs	r4, r1
 795:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2631              		.loc 1 795 5 is_stmt 1 view .LVU594
 796:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2632              		.loc 1 796 5 view .LVU595
 798:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2633              		.loc 1 798 5 view .LVU596
 798:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2634              		.loc 1 798 11 is_stmt 0 view .LVU597
 2635 0008 6B46     		mov	r3, sp
 2636 000a DA1D     		adds	r2, r3, #7
 2637 000c 1C21     		movs	r1, #28
 2638              	.LVL298:
 798:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2639              		.loc 1 798 11 view .LVU598
 2640 000e FFF7FEFF 		bl	nau7802_reg_read
 2641              	.LVL299:
 799:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 7)) {
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 74


 2642              		.loc 1 799 5 is_stmt 1 view .LVU599
 799:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 7)) {
 2643              		.loc 1 799 8 is_stmt 0 view .LVU600
 2644 0012 0028     		cmp	r0, #0
 2645 0014 01D1     		bne	.L93
 799:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 7)) {
 2646              		.loc 1 799 23 discriminator 1 view .LVU601
 2647 0016 072C     		cmp	r4, #7
 2648 0018 01D9     		bls	.L94
 2649              	.LVL300:
 2650              	.L93:
 804:Core/Src/nau7802.c **** }
 2651              		.loc 1 804 1 view .LVU602
 2652 001a 03B0     		add	sp, sp, #12
 2653              		@ sp needed
 2654              	.LVL301:
 804:Core/Src/nau7802.c **** }
 2655              		.loc 1 804 1 view .LVU603
 2656 001c 30BD     		pop	{r4, r5, pc}
 2657              	.LVL302:
 2658              	.L94:
 803:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_MASTER_BIAS_CURR(mode));
 2659              		.loc 1 803 5 is_stmt 1 view .LVU604
 803:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_MASTER_BIAS_CURR(mode));
 2660              		.loc 1 803 12 is_stmt 0 view .LVU605
 2661 001e 2401     		lsls	r4, r4, #4
 2662              	.LVL303:
 803:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_MASTER_BIAS_CURR(mode));
 2663              		.loc 1 803 12 view .LVU606
 2664 0020 E2B2     		uxtb	r2, r4
 2665 0022 1C21     		movs	r1, #28
 2666 0024 2800     		movs	r0, r5
 2667              	.LVL304:
 803:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_MASTER_BIAS_CURR(mode));
 2668              		.loc 1 803 12 view .LVU607
 2669 0026 FFF7FEFF 		bl	nau7802_reg_write
 2670              	.LVL305:
 2671 002a F6E7     		b	.L93
 2672              		.cfi_endproc
 2673              	.LFE350:
 2675              		.section	.text.nau7802_adc_curr,"ax",%progbits
 2676              		.align	1
 2677              		.global	nau7802_adc_curr
 2678              		.syntax unified
 2679              		.code	16
 2680              		.thumb_func
 2681              		.fpu softvfp
 2683              	nau7802_adc_curr:
 2684              	.LVL306:
 2685              	.LFB351:
 820:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_adc_curr(nau7802_t *adc, int mode) {
 2686              		.loc 1 820 62 is_stmt 1 view -0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 8
 2689              		@ frame_needed = 0, uses_anonymous_args = 0
 820:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_adc_curr(nau7802_t *adc, int mode) {
 2690              		.loc 1 820 62 is_stmt 0 view .LVU609
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 75


 2691 0000 30B5     		push	{r4, r5, lr}
 2692              	.LCFI63:
 2693              		.cfi_def_cfa_offset 12
 2694              		.cfi_offset 4, -12
 2695              		.cfi_offset 5, -8
 2696              		.cfi_offset 14, -4
 2697 0002 83B0     		sub	sp, sp, #12
 2698              	.LCFI64:
 2699              		.cfi_def_cfa_offset 24
 2700 0004 0500     		movs	r5, r0
 2701 0006 0C00     		movs	r4, r1
 821:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2702              		.loc 1 821 5 is_stmt 1 view .LVU610
 822:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2703              		.loc 1 822 5 view .LVU611
 824:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2704              		.loc 1 824 5 view .LVU612
 824:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2705              		.loc 1 824 11 is_stmt 0 view .LVU613
 2706 0008 6B46     		mov	r3, sp
 2707 000a DA1D     		adds	r2, r3, #7
 2708 000c 1C21     		movs	r1, #28
 2709              	.LVL307:
 824:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2710              		.loc 1 824 11 view .LVU614
 2711 000e FFF7FEFF 		bl	nau7802_reg_read
 2712              	.LVL308:
 825:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 2713              		.loc 1 825 5 is_stmt 1 view .LVU615
 825:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 2714              		.loc 1 825 8 is_stmt 0 view .LVU616
 2715 0012 0028     		cmp	r0, #0
 2716 0014 01D1     		bne	.L96
 825:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 2717              		.loc 1 825 23 discriminator 1 view .LVU617
 2718 0016 032C     		cmp	r4, #3
 2719 0018 01D9     		bls	.L97
 2720              	.LVL309:
 2721              	.L96:
 830:Core/Src/nau7802.c **** }
 2722              		.loc 1 830 1 view .LVU618
 2723 001a 03B0     		add	sp, sp, #12
 2724              		@ sp needed
 2725              	.LVL310:
 830:Core/Src/nau7802.c **** }
 2726              		.loc 1 830 1 view .LVU619
 2727 001c 30BD     		pop	{r4, r5, pc}
 2728              	.LVL311:
 2729              	.L97:
 829:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_ADC_CURR(mode));
 2730              		.loc 1 829 5 is_stmt 1 view .LVU620
 829:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_ADC_CURR(mode));
 2731              		.loc 1 829 12 is_stmt 0 view .LVU621
 2732 001e A400     		lsls	r4, r4, #2
 2733              	.LVL312:
 829:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_ADC_CURR(mode));
 2734              		.loc 1 829 12 view .LVU622
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 76


 2735 0020 E2B2     		uxtb	r2, r4
 2736 0022 1C21     		movs	r1, #28
 2737 0024 2800     		movs	r0, r5
 2738              	.LVL313:
 829:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_ADC_CURR(mode));
 2739              		.loc 1 829 12 view .LVU623
 2740 0026 FFF7FEFF 		bl	nau7802_reg_write
 2741              	.LVL314:
 2742 002a F6E7     		b	.L96
 2743              		.cfi_endproc
 2744              	.LFE351:
 2746              		.section	.text.nau7802_pga_curr,"ax",%progbits
 2747              		.align	1
 2748              		.global	nau7802_pga_curr
 2749              		.syntax unified
 2750              		.code	16
 2751              		.thumb_func
 2752              		.fpu softvfp
 2754              	nau7802_pga_curr:
 2755              	.LVL315:
 2756              	.LFB352:
 845:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_curr(nau7802_t *adc, int mode) {
 2757              		.loc 1 845 62 is_stmt 1 view -0
 2758              		.cfi_startproc
 2759              		@ args = 0, pretend = 0, frame = 8
 2760              		@ frame_needed = 0, uses_anonymous_args = 0
 845:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_pga_curr(nau7802_t *adc, int mode) {
 2761              		.loc 1 845 62 is_stmt 0 view .LVU625
 2762 0000 30B5     		push	{r4, r5, lr}
 2763              	.LCFI65:
 2764              		.cfi_def_cfa_offset 12
 2765              		.cfi_offset 4, -12
 2766              		.cfi_offset 5, -8
 2767              		.cfi_offset 14, -4
 2768 0002 83B0     		sub	sp, sp, #12
 2769              	.LCFI66:
 2770              		.cfi_def_cfa_offset 24
 2771 0004 0500     		movs	r5, r0
 2772 0006 0C00     		movs	r4, r1
 846:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2773              		.loc 1 846 5 is_stmt 1 view .LVU626
 847:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2774              		.loc 1 847 5 view .LVU627
 849:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2775              		.loc 1 849 5 view .LVU628
 849:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2776              		.loc 1 849 11 is_stmt 0 view .LVU629
 2777 0008 6B46     		mov	r3, sp
 2778 000a DA1D     		adds	r2, r3, #7
 2779 000c 1C21     		movs	r1, #28
 2780              	.LVL316:
 849:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PWR_CTRL, &reg_state);
 2781              		.loc 1 849 11 view .LVU630
 2782 000e FFF7FEFF 		bl	nau7802_reg_read
 2783              	.LVL317:
 850:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 2784              		.loc 1 850 5 is_stmt 1 view .LVU631
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 77


 850:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 2785              		.loc 1 850 8 is_stmt 0 view .LVU632
 2786 0012 0028     		cmp	r0, #0
 2787 0014 01D1     		bne	.L99
 850:Core/Src/nau7802.c ****     if (ret != HAL_OK || (mode < 0 || mode > 3)) {
 2788              		.loc 1 850 23 discriminator 1 view .LVU633
 2789 0016 032C     		cmp	r4, #3
 2790 0018 01D9     		bls	.L100
 2791              	.LVL318:
 2792              	.L99:
 855:Core/Src/nau7802.c **** }
 2793              		.loc 1 855 1 view .LVU634
 2794 001a 03B0     		add	sp, sp, #12
 2795              		@ sp needed
 2796              	.LVL319:
 2797              	.LVL320:
 855:Core/Src/nau7802.c **** }
 2798              		.loc 1 855 1 view .LVU635
 2799 001c 30BD     		pop	{r4, r5, pc}
 2800              	.LVL321:
 2801              	.L100:
 854:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_PGA_CURR(mode));
 2802              		.loc 1 854 5 is_stmt 1 view .LVU636
 854:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_PGA_CURR(mode));
 2803              		.loc 1 854 12 is_stmt 0 view .LVU637
 2804 001e E2B2     		uxtb	r2, r4
 2805 0020 1C21     		movs	r1, #28
 2806 0022 2800     		movs	r0, r5
 2807              	.LVL322:
 854:Core/Src/nau7802.c ****     return nau7802_reg_write(adc, NAU7802_REG_PWR_CTRL, NAU7802_PWR_CTRL_PGA_CURR(mode));
 2808              		.loc 1 854 12 view .LVU638
 2809 0024 FFF7FEFF 		bl	nau7802_reg_write
 2810              	.LVL323:
 2811 0028 F7E7     		b	.L99
 2812              		.cfi_endproc
 2813              	.LFE352:
 2815              		.section	.text.nau7802_cready_read,"ax",%progbits
 2816              		.align	1
 2817              		.global	nau7802_cready_read
 2818              		.syntax unified
 2819              		.code	16
 2820              		.thumb_func
 2821              		.fpu softvfp
 2823              	nau7802_cready_read:
 2824              	.LVL324:
 2825              	.LFB354:
 887:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_cready_read(nau7802_t *adc) {
 2826              		.loc 1 887 55 is_stmt 1 view -0
 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 8
 2829              		@ frame_needed = 0, uses_anonymous_args = 0
 887:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_cready_read(nau7802_t *adc) {
 2830              		.loc 1 887 55 is_stmt 0 view .LVU640
 2831 0000 30B5     		push	{r4, r5, lr}
 2832              	.LCFI67:
 2833              		.cfi_def_cfa_offset 12
 2834              		.cfi_offset 4, -12
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 78


 2835              		.cfi_offset 5, -8
 2836              		.cfi_offset 14, -4
 2837 0002 83B0     		sub	sp, sp, #12
 2838              	.LCFI68:
 2839              		.cfi_def_cfa_offset 24
 2840 0004 0400     		movs	r4, r0
 888:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2841              		.loc 1 888 5 is_stmt 1 view .LVU641
 889:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2842              		.loc 1 889 5 view .LVU642
 891:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 2843              		.loc 1 891 5 view .LVU643
 891:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 2844              		.loc 1 891 11 is_stmt 0 view .LVU644
 2845 0006 6B46     		mov	r3, sp
 2846 0008 DD1D     		adds	r5, r3, #7
 2847 000a 2A00     		movs	r2, r5
 2848 000c 0021     		movs	r1, #0
 2849 000e FFF7FEFF 		bl	nau7802_reg_read
 2850              	.LVL325:
 892:Core/Src/nau7802.c ****     adc->cready = (reg_state & NAU7802_PUCTRL_CR_BIT) > 0;
 2851              		.loc 1 892 5 is_stmt 1 view .LVU645
 892:Core/Src/nau7802.c ****     adc->cready = (reg_state & NAU7802_PUCTRL_CR_BIT) > 0;
 2852              		.loc 1 892 30 is_stmt 0 view .LVU646
 2853 0012 2A78     		ldrb	r2, [r5]
 892:Core/Src/nau7802.c ****     adc->cready = (reg_state & NAU7802_PUCTRL_CR_BIT) > 0;
 2854              		.loc 1 892 55 view .LVU647
 2855 0014 5209     		lsrs	r2, r2, #5
 2856 0016 0123     		movs	r3, #1
 2857 0018 1340     		ands	r3, r2
 892:Core/Src/nau7802.c ****     adc->cready = (reg_state & NAU7802_PUCTRL_CR_BIT) > 0;
 2858              		.loc 1 892 17 view .LVU648
 2859 001a 2372     		strb	r3, [r4, #8]
 894:Core/Src/nau7802.c ****     return ret;
 2860              		.loc 1 894 5 is_stmt 1 view .LVU649
 895:Core/Src/nau7802.c **** }
 2861              		.loc 1 895 1 is_stmt 0 view .LVU650
 2862 001c 03B0     		add	sp, sp, #12
 2863              		@ sp needed
 2864              	.LVL326:
 895:Core/Src/nau7802.c **** }
 2865              		.loc 1 895 1 view .LVU651
 2866 001e 30BD     		pop	{r4, r5, pc}
 2867              		.cfi_endproc
 2868              	.LFE354:
 2870              		.section	.text.nau7802_puready_read,"ax",%progbits
 2871              		.align	1
 2872              		.global	nau7802_puready_read
 2873              		.syntax unified
 2874              		.code	16
 2875              		.thumb_func
 2876              		.fpu softvfp
 2878              	nau7802_puready_read:
 2879              	.LVL327:
 2880              	.LFB355:
 905:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_puready_read(nau7802_t *adc) {
 2881              		.loc 1 905 56 is_stmt 1 view -0
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 79


 2882              		.cfi_startproc
 2883              		@ args = 0, pretend = 0, frame = 8
 2884              		@ frame_needed = 0, uses_anonymous_args = 0
 905:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_puready_read(nau7802_t *adc) {
 2885              		.loc 1 905 56 is_stmt 0 view .LVU653
 2886 0000 30B5     		push	{r4, r5, lr}
 2887              	.LCFI69:
 2888              		.cfi_def_cfa_offset 12
 2889              		.cfi_offset 4, -12
 2890              		.cfi_offset 5, -8
 2891              		.cfi_offset 14, -4
 2892 0002 83B0     		sub	sp, sp, #12
 2893              	.LCFI70:
 2894              		.cfi_def_cfa_offset 24
 2895 0004 0400     		movs	r4, r0
 906:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2896              		.loc 1 906 5 is_stmt 1 view .LVU654
 907:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2897              		.loc 1 907 5 view .LVU655
 909:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 2898              		.loc 1 909 5 view .LVU656
 909:Core/Src/nau7802.c ****     ret = nau7802_reg_read(adc, NAU7802_REG_PUCTRL, &reg_state);
 2899              		.loc 1 909 11 is_stmt 0 view .LVU657
 2900 0006 6B46     		mov	r3, sp
 2901 0008 DD1D     		adds	r5, r3, #7
 2902 000a 2A00     		movs	r2, r5
 2903 000c 0021     		movs	r1, #0
 2904 000e FFF7FEFF 		bl	nau7802_reg_read
 2905              	.LVL328:
 910:Core/Src/nau7802.c ****     adc->puready = (reg_state & NAU7802_PUCTRL_PUR_BIT) > 0;
 2906              		.loc 1 910 5 is_stmt 1 view .LVU658
 910:Core/Src/nau7802.c ****     adc->puready = (reg_state & NAU7802_PUCTRL_PUR_BIT) > 0;
 2907              		.loc 1 910 31 is_stmt 0 view .LVU659
 2908 0012 2A78     		ldrb	r2, [r5]
 910:Core/Src/nau7802.c ****     adc->puready = (reg_state & NAU7802_PUCTRL_PUR_BIT) > 0;
 2909              		.loc 1 910 57 view .LVU660
 2910 0014 D208     		lsrs	r2, r2, #3
 2911 0016 0123     		movs	r3, #1
 2912 0018 1340     		ands	r3, r2
 910:Core/Src/nau7802.c ****     adc->puready = (reg_state & NAU7802_PUCTRL_PUR_BIT) > 0;
 2913              		.loc 1 910 18 view .LVU661
 2914 001a 6372     		strb	r3, [r4, #9]
 912:Core/Src/nau7802.c ****     return ret;
 2915              		.loc 1 912 5 is_stmt 1 view .LVU662
 913:Core/Src/nau7802.c **** }
 2916              		.loc 1 913 1 is_stmt 0 view .LVU663
 2917 001c 03B0     		add	sp, sp, #12
 2918              		@ sp needed
 2919              	.LVL329:
 913:Core/Src/nau7802.c **** }
 2920              		.loc 1 913 1 view .LVU664
 2921 001e 30BD     		pop	{r4, r5, pc}
 2922              		.cfi_endproc
 2923              	.LFE355:
 2925              		.section	.text.nau7802_offset_cal_read,"ax",%progbits
 2926              		.align	1
 2927              		.global	nau7802_offset_cal_read
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 80


 2928              		.syntax unified
 2929              		.code	16
 2930              		.thumb_func
 2931              		.fpu softvfp
 2933              	nau7802_offset_cal_read:
 2934              	.LVL330:
 2935              	.LFB356:
 926:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_offset_cal_read(nau7802_t *adc, int channel, int *reading) {
 2936              		.loc 1 926 86 is_stmt 1 view -0
 2937              		.cfi_startproc
 2938              		@ args = 0, pretend = 0, frame = 8
 2939              		@ frame_needed = 0, uses_anonymous_args = 0
 926:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_offset_cal_read(nau7802_t *adc, int channel, int *reading) {
 2940              		.loc 1 926 86 is_stmt 0 view .LVU666
 2941 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2942              	.LCFI71:
 2943              		.cfi_def_cfa_offset 20
 2944              		.cfi_offset 4, -20
 2945              		.cfi_offset 5, -16
 2946              		.cfi_offset 6, -12
 2947              		.cfi_offset 7, -8
 2948              		.cfi_offset 14, -4
 2949 0002 83B0     		sub	sp, sp, #12
 2950              	.LCFI72:
 2951              		.cfi_def_cfa_offset 32
 2952 0004 0500     		movs	r5, r0
 2953 0006 1600     		movs	r6, r2
 927:Core/Src/nau7802.c ****     uint8_t           reg_state;
 2954              		.loc 1 927 5 is_stmt 1 view .LVU667
 928:Core/Src/nau7802.c ****     uint8_t           chan_n_regs[3];
 2955              		.loc 1 928 5 view .LVU668
 929:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 2956              		.loc 1 929 5 view .LVU669
 930:Core/Src/nau7802.c ****     int32_t          call_offset = 0;
 2957              		.loc 1 930 5 view .LVU670
 2958              	.LVL331:
 932:Core/Src/nau7802.c ****     switch (channel) {
 2959              		.loc 1 932 5 view .LVU671
 2960 0008 0029     		cmp	r1, #0
 2961 000a 03D0     		beq	.L104
 2962 000c 0129     		cmp	r1, #1
 2963 000e 1DD0     		beq	.L105
 2964 0010 0023     		movs	r3, #0
 2965 0012 25E0     		b	.L106
 2966              	.L104:
 934:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_OCAL1_B0;
 2967              		.loc 1 934 9 view .LVU672
 934:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_OCAL1_B0;
 2968              		.loc 1 934 24 is_stmt 0 view .LVU673
 2969 0014 01AA     		add	r2, sp, #4
 2970              	.LVL332:
 934:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_OCAL1_B0;
 2971              		.loc 1 934 24 view .LVU674
 2972 0016 0521     		movs	r1, #5
 2973              	.LVL333:
 934:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_OCAL1_B0;
 2974              		.loc 1 934 24 view .LVU675
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 81


 2975 0018 1170     		strb	r1, [r2]
 935:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_OCAL1_B1;
 2976              		.loc 1 935 9 is_stmt 1 view .LVU676
 935:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_OCAL1_B1;
 2977              		.loc 1 935 24 is_stmt 0 view .LVU677
 2978 001a 0139     		subs	r1, r1, #1
 2979 001c 5170     		strb	r1, [r2, #1]
 936:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_OCAL1_B2;
 2980              		.loc 1 936 9 is_stmt 1 view .LVU678
 936:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_OCAL1_B2;
 2981              		.loc 1 936 24 is_stmt 0 view .LVU679
 2982 001e 0139     		subs	r1, r1, #1
 2983 0020 9170     		strb	r1, [r2, #2]
 937:Core/Src/nau7802.c ****         break;
 2984              		.loc 1 937 9 is_stmt 1 view .LVU680
 2985              	.L108:
 926:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_offset_cal_read(nau7802_t *adc, int channel, int *reading) {
 2986              		.loc 1 926 86 is_stmt 0 discriminator 1 view .LVU681
 2987 0022 0024     		movs	r4, #0
 2988 0024 0027     		movs	r7, #0
 2989              	.LVL334:
 2990              	.L107:
 951:Core/Src/nau7802.c ****     for (i = 0; i < 3; i++) {
 2991              		.loc 1 951 17 is_stmt 1 discriminator 1 view .LVU682
 951:Core/Src/nau7802.c ****     for (i = 0; i < 3; i++) {
 2992              		.loc 1 951 5 is_stmt 0 discriminator 1 view .LVU683
 2993 0026 022C     		cmp	r4, #2
 2994 0028 18DC     		bgt	.L110
 952:Core/Src/nau7802.c ****         ret = nau7802_reg_read(adc, chan_n_regs[i], &reg_state);
 2995              		.loc 1 952 9 is_stmt 1 view .LVU684
 952:Core/Src/nau7802.c ****         ret = nau7802_reg_read(adc, chan_n_regs[i], &reg_state);
 2996              		.loc 1 952 15 is_stmt 0 view .LVU685
 2997 002a 01AB     		add	r3, sp, #4
 2998              	.LVL335:
 952:Core/Src/nau7802.c ****         ret = nau7802_reg_read(adc, chan_n_regs[i], &reg_state);
 2999              		.loc 1 952 15 view .LVU686
 3000 002c 195D     		ldrb	r1, [r3, r4]
 3001 002e 6B46     		mov	r3, sp
 3002 0030 DA1D     		adds	r2, r3, #7
 3003 0032 2800     		movs	r0, r5
 3004 0034 FFF7FEFF 		bl	nau7802_reg_read
 3005              	.LVL336:
 3006 0038 031E     		subs	r3, r0, #0
 3007              	.LVL337:
 953:Core/Src/nau7802.c ****         if (ret != HAL_OK) {
 3008              		.loc 1 953 9 is_stmt 1 view .LVU687
 953:Core/Src/nau7802.c ****         if (ret != HAL_OK) {
 3009              		.loc 1 953 12 is_stmt 0 view .LVU688
 3010 003a 11D1     		bne	.L106
 956:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
 3011              		.loc 1 956 9 is_stmt 1 discriminator 2 view .LVU689
 956:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
 3012              		.loc 1 956 45 is_stmt 0 discriminator 2 view .LVU690
 3013 003c 0134     		adds	r4, r4, #1
 3014              	.LVL338:
 956:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
 3015              		.loc 1 956 40 discriminator 2 view .LVU691
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 82


 3016 003e E200     		lsls	r2, r4, #3
 956:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
 3017              		.loc 1 956 34 discriminator 2 view .LVU692
 3018 0040 6946     		mov	r1, sp
 3019 0042 0731     		adds	r1, r1, #7
 3020 0044 0978     		ldrb	r1, [r1]
 3021 0046 9140     		lsls	r1, r1, r2
 956:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
 3022              		.loc 1 956 21 discriminator 2 view .LVU693
 3023 0048 0F43     		orrs	r7, r1
 3024              	.LVL339:
 951:Core/Src/nau7802.c ****     for (i = 0; i < 3; i++) {
 3025              		.loc 1 951 24 is_stmt 1 discriminator 2 view .LVU694
 951:Core/Src/nau7802.c ****     for (i = 0; i < 3; i++) {
 3026              		.loc 1 951 24 is_stmt 0 discriminator 2 view .LVU695
 3027 004a ECE7     		b	.L107
 3028              	.LVL340:
 3029              	.L105:
 940:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_OCAL2_B0;
 3030              		.loc 1 940 9 is_stmt 1 view .LVU696
 940:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_OCAL2_B0;
 3031              		.loc 1 940 24 is_stmt 0 view .LVU697
 3032 004c 01AA     		add	r2, sp, #4
 3033              	.LVL341:
 940:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_OCAL2_B0;
 3034              		.loc 1 940 24 view .LVU698
 3035 004e 0C21     		movs	r1, #12
 3036              	.LVL342:
 940:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_OCAL2_B0;
 3037              		.loc 1 940 24 view .LVU699
 3038 0050 1170     		strb	r1, [r2]
 941:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_OCAL2_B1;
 3039              		.loc 1 941 9 is_stmt 1 view .LVU700
 941:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_OCAL2_B1;
 3040              		.loc 1 941 24 is_stmt 0 view .LVU701
 3041 0052 0139     		subs	r1, r1, #1
 3042 0054 5170     		strb	r1, [r2, #1]
 942:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_OCAL2_B2;
 3043              		.loc 1 942 9 is_stmt 1 view .LVU702
 942:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_OCAL2_B2;
 3044              		.loc 1 942 24 is_stmt 0 view .LVU703
 3045 0056 0139     		subs	r1, r1, #1
 3046 0058 9170     		strb	r1, [r2, #2]
 943:Core/Src/nau7802.c ****         break;
 3047              		.loc 1 943 9 is_stmt 1 view .LVU704
 3048 005a E2E7     		b	.L108
 3049              	.LVL343:
 3050              	.L110:
 961:Core/Src/nau7802.c ****     *reading = call_offset >> 8;
 3051              		.loc 1 961 5 view .LVU705
 961:Core/Src/nau7802.c ****     *reading = call_offset >> 8;
 3052              		.loc 1 961 28 is_stmt 0 view .LVU706
 3053 005c 3F12     		asrs	r7, r7, #8
 3054              	.LVL344:
 961:Core/Src/nau7802.c ****     *reading = call_offset >> 8;
 3055              		.loc 1 961 14 view .LVU707
 3056 005e 3760     		str	r7, [r6]
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 83


 962:Core/Src/nau7802.c ****     return ret;
 3057              		.loc 1 962 5 is_stmt 1 view .LVU708
 3058              	.LVL345:
 3059              	.L106:
 963:Core/Src/nau7802.c **** }
 3060              		.loc 1 963 1 is_stmt 0 view .LVU709
 3061 0060 1800     		movs	r0, r3
 3062 0062 03B0     		add	sp, sp, #12
 3063              		@ sp needed
 3064              	.LVL346:
 3065              	.LVL347:
 963:Core/Src/nau7802.c **** }
 3066              		.loc 1 963 1 view .LVU710
 3067 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 3068              		.cfi_endproc
 3069              	.LFE356:
 3071              		.section	.text.nau7802_gain_cal_read,"ax",%progbits
 3072              		.align	1
 3073              		.global	nau7802_gain_cal_read
 3074              		.syntax unified
 3075              		.code	16
 3076              		.thumb_func
 3077              		.fpu softvfp
 3079              	nau7802_gain_cal_read:
 3080              	.LVL348:
 3081              	.LFB357:
 976:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_gain_cal_read(nau7802_t *adc, int channel, int *reading) {
 3082              		.loc 1 976 84 is_stmt 1 view -0
 3083              		.cfi_startproc
 3084              		@ args = 0, pretend = 0, frame = 8
 3085              		@ frame_needed = 0, uses_anonymous_args = 0
 976:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_gain_cal_read(nau7802_t *adc, int channel, int *reading) {
 3086              		.loc 1 976 84 is_stmt 0 view .LVU712
 3087 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3088              	.LCFI73:
 3089              		.cfi_def_cfa_offset 20
 3090              		.cfi_offset 4, -20
 3091              		.cfi_offset 5, -16
 3092              		.cfi_offset 6, -12
 3093              		.cfi_offset 7, -8
 3094              		.cfi_offset 14, -4
 3095 0002 83B0     		sub	sp, sp, #12
 3096              	.LCFI74:
 3097              		.cfi_def_cfa_offset 32
 3098 0004 0500     		movs	r5, r0
 3099 0006 1600     		movs	r6, r2
 977:Core/Src/nau7802.c ****     uint8_t           reg_state;
 3100              		.loc 1 977 5 is_stmt 1 view .LVU713
 978:Core/Src/nau7802.c ****     uint8_t           chan_n_regs[3];
 3101              		.loc 1 978 5 view .LVU714
 979:Core/Src/nau7802.c ****     HAL_StatusTypeDef ret;
 3102              		.loc 1 979 5 view .LVU715
 980:Core/Src/nau7802.c ****     int32_t          call_offset = 0;
 3103              		.loc 1 980 5 view .LVU716
 3104              	.LVL349:
 982:Core/Src/nau7802.c ****     switch (channel) {
 3105              		.loc 1 982 5 view .LVU717
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 84


 3106 0008 0029     		cmp	r1, #0
 3107 000a 03D0     		beq	.L112
 3108 000c 0129     		cmp	r1, #1
 3109 000e 1DD0     		beq	.L113
 3110 0010 0023     		movs	r3, #0
 3111 0012 25E0     		b	.L114
 3112              	.L112:
 984:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_GCAL1_B0;
 3113              		.loc 1 984 9 view .LVU718
 984:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_GCAL1_B0;
 3114              		.loc 1 984 24 is_stmt 0 view .LVU719
 3115 0014 01AA     		add	r2, sp, #4
 3116              	.LVL350:
 984:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_GCAL1_B0;
 3117              		.loc 1 984 24 view .LVU720
 3118 0016 0921     		movs	r1, #9
 3119              	.LVL351:
 984:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_GCAL1_B0;
 3120              		.loc 1 984 24 view .LVU721
 3121 0018 1170     		strb	r1, [r2]
 985:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_GCAL1_B1;
 3122              		.loc 1 985 9 is_stmt 1 view .LVU722
 985:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_GCAL1_B1;
 3123              		.loc 1 985 24 is_stmt 0 view .LVU723
 3124 001a 0139     		subs	r1, r1, #1
 3125 001c 5170     		strb	r1, [r2, #1]
 986:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_GCAL1_B2;
 3126              		.loc 1 986 9 is_stmt 1 view .LVU724
 986:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_GCAL1_B2;
 3127              		.loc 1 986 24 is_stmt 0 view .LVU725
 3128 001e 0139     		subs	r1, r1, #1
 3129 0020 9170     		strb	r1, [r2, #2]
 987:Core/Src/nau7802.c ****         break;
 3130              		.loc 1 987 9 is_stmt 1 view .LVU726
 3131              	.L116:
 976:Core/Src/nau7802.c **** HAL_StatusTypeDef nau7802_gain_cal_read(nau7802_t *adc, int channel, int *reading) {
 3132              		.loc 1 976 84 is_stmt 0 discriminator 1 view .LVU727
 3133 0022 0024     		movs	r4, #0
 3134 0024 0027     		movs	r7, #0
 3135              	.LVL352:
 3136              	.L115:
1001:Core/Src/nau7802.c ****     for (i = 0; i < 3; i++) {
 3137              		.loc 1 1001 17 is_stmt 1 discriminator 1 view .LVU728
1001:Core/Src/nau7802.c ****     for (i = 0; i < 3; i++) {
 3138              		.loc 1 1001 5 is_stmt 0 discriminator 1 view .LVU729
 3139 0026 022C     		cmp	r4, #2
 3140 0028 18DC     		bgt	.L118
1002:Core/Src/nau7802.c ****         ret = nau7802_reg_read(adc, chan_n_regs[i], &reg_state);
 3141              		.loc 1 1002 9 is_stmt 1 view .LVU730
1002:Core/Src/nau7802.c ****         ret = nau7802_reg_read(adc, chan_n_regs[i], &reg_state);
 3142              		.loc 1 1002 15 is_stmt 0 view .LVU731
 3143 002a 01AB     		add	r3, sp, #4
 3144              	.LVL353:
1002:Core/Src/nau7802.c ****         ret = nau7802_reg_read(adc, chan_n_regs[i], &reg_state);
 3145              		.loc 1 1002 15 view .LVU732
 3146 002c 195D     		ldrb	r1, [r3, r4]
 3147 002e 6B46     		mov	r3, sp
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 85


 3148 0030 DA1D     		adds	r2, r3, #7
 3149 0032 2800     		movs	r0, r5
 3150 0034 FFF7FEFF 		bl	nau7802_reg_read
 3151              	.LVL354:
 3152 0038 031E     		subs	r3, r0, #0
 3153              	.LVL355:
1003:Core/Src/nau7802.c ****         if (ret != HAL_OK) {
 3154              		.loc 1 1003 9 is_stmt 1 view .LVU733
1003:Core/Src/nau7802.c ****         if (ret != HAL_OK) {
 3155              		.loc 1 1003 12 is_stmt 0 view .LVU734
 3156 003a 11D1     		bne	.L114
1006:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
 3157              		.loc 1 1006 9 is_stmt 1 discriminator 2 view .LVU735
1006:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
 3158              		.loc 1 1006 45 is_stmt 0 discriminator 2 view .LVU736
 3159 003c 0134     		adds	r4, r4, #1
 3160              	.LVL356:
1006:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
 3161              		.loc 1 1006 40 discriminator 2 view .LVU737
 3162 003e E200     		lsls	r2, r4, #3
1006:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
 3163              		.loc 1 1006 34 discriminator 2 view .LVU738
 3164 0040 6946     		mov	r1, sp
 3165 0042 0731     		adds	r1, r1, #7
 3166 0044 0978     		ldrb	r1, [r1]
 3167 0046 9140     		lsls	r1, r1, r2
1006:Core/Src/nau7802.c ****         call_offset |= reg_state << (8 * (i + 1));
 3168              		.loc 1 1006 21 discriminator 2 view .LVU739
 3169 0048 0F43     		orrs	r7, r1
 3170              	.LVL357:
1001:Core/Src/nau7802.c ****     for (i = 0; i < 3; i++) {
 3171              		.loc 1 1001 24 is_stmt 1 discriminator 2 view .LVU740
1001:Core/Src/nau7802.c ****     for (i = 0; i < 3; i++) {
 3172              		.loc 1 1001 24 is_stmt 0 discriminator 2 view .LVU741
 3173 004a ECE7     		b	.L115
 3174              	.LVL358:
 3175              	.L113:
 990:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_GCAL2_B0;
 3176              		.loc 1 990 9 is_stmt 1 view .LVU742
 990:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_GCAL2_B0;
 3177              		.loc 1 990 24 is_stmt 0 view .LVU743
 3178 004c 01AA     		add	r2, sp, #4
 3179              	.LVL359:
 990:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_GCAL2_B0;
 3180              		.loc 1 990 24 view .LVU744
 3181 004e 1021     		movs	r1, #16
 3182              	.LVL360:
 990:Core/Src/nau7802.c ****         chan_n_regs[0] = NAU7802_REG_GCAL2_B0;
 3183              		.loc 1 990 24 view .LVU745
 3184 0050 1170     		strb	r1, [r2]
 991:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_GCAL2_B1;
 3185              		.loc 1 991 9 is_stmt 1 view .LVU746
 991:Core/Src/nau7802.c ****         chan_n_regs[1] = NAU7802_REG_GCAL2_B1;
 3186              		.loc 1 991 24 is_stmt 0 view .LVU747
 3187 0052 0139     		subs	r1, r1, #1
 3188 0054 5170     		strb	r1, [r2, #1]
 992:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_GCAL2_B2;
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 86


 3189              		.loc 1 992 9 is_stmt 1 view .LVU748
 992:Core/Src/nau7802.c ****         chan_n_regs[2] = NAU7802_REG_GCAL2_B2;
 3190              		.loc 1 992 24 is_stmt 0 view .LVU749
 3191 0056 0139     		subs	r1, r1, #1
 3192 0058 9170     		strb	r1, [r2, #2]
 993:Core/Src/nau7802.c ****         break;
 3193              		.loc 1 993 9 is_stmt 1 view .LVU750
 3194 005a E2E7     		b	.L116
 3195              	.LVL361:
 3196              	.L118:
1011:Core/Src/nau7802.c ****     *reading = call_offset >> 8;
 3197              		.loc 1 1011 5 view .LVU751
1011:Core/Src/nau7802.c ****     *reading = call_offset >> 8;
 3198              		.loc 1 1011 28 is_stmt 0 view .LVU752
 3199 005c 3F12     		asrs	r7, r7, #8
 3200              	.LVL362:
1011:Core/Src/nau7802.c ****     *reading = call_offset >> 8;
 3201              		.loc 1 1011 14 view .LVU753
 3202 005e 3760     		str	r7, [r6]
1012:Core/Src/nau7802.c ****     return ret;
 3203              		.loc 1 1012 5 is_stmt 1 view .LVU754
 3204              	.LVL363:
 3205              	.L114:
1013:Core/Src/nau7802.c **** }
 3206              		.loc 1 1013 1 is_stmt 0 view .LVU755
 3207 0060 1800     		movs	r0, r3
 3208 0062 03B0     		add	sp, sp, #12
 3209              		@ sp needed
 3210              	.LVL364:
 3211              	.LVL365:
1013:Core/Src/nau7802.c **** }
 3212              		.loc 1 1013 1 view .LVU756
 3213 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 3214              		.cfi_endproc
 3215              	.LFE357:
 3217              		.text
 3218              	.Letext0:
 3219              		.file 2 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 3220              		.file 3 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 3221              		.file 4 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/system_stm32g0xx.h"
 3222              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g071xx.h"
 3223              		.file 6 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 3224              		.file 7 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_dma.h"
 3225              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_flash.h"
 3226              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_i2c.h"
 3227              		.file 10 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_uart.h"
 3228              		.file 11 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal.h"
 3229              		.file 12 "Core/Inc/i2c.h"
 3230              		.file 13 "/Applications/ARM/lib/gcc/arm-none-eabi/9.3.1/include/stddef.h"
 3231              		.file 14 "/Applications/ARM/arm-none-eabi/include/sys/_types.h"
 3232              		.file 15 "/Applications/ARM/arm-none-eabi/include/sys/reent.h"
 3233              		.file 16 "/Applications/ARM/arm-none-eabi/include/sys/lock.h"
 3234              		.file 17 "/Applications/ARM/arm-none-eabi/include/stdlib.h"
 3235              		.file 18 "Core/Inc/nau7802.h"
 3236              		.file 19 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h"
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 87


DEFINED SYMBOLS
                            *ABS*:0000000000000000 nau7802.c
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:16     .text.nau7802_init:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:24     .text.nau7802_init:0000000000000000 nau7802_init
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:72     .text.nau7802_conversion_read:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:79     .text.nau7802_conversion_read:0000000000000000 nau7802_conversion_read
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:147    .text.nau7802_reg_write:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:154    .text.nau7802_reg_write:0000000000000000 nau7802_reg_write
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:201    .text.nau7802_reg_read:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:208    .text.nau7802_reg_read:0000000000000000 nau7802_reg_read
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:249    .text.nau7802_avdd_source:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:256    .text.nau7802_avdd_source:0000000000000000 nau7802_avdd_source
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:337    .text.nau7802_oscs_source:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:344    .text.nau7802_oscs_source:0000000000000000 nau7802_oscs_source
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:422    .text.nau7802_pwr_analog:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:429    .text.nau7802_pwr_analog:0000000000000000 nau7802_pwr_analog
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:507    .text.nau7802_pwr_digital:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:514    .text.nau7802_pwr_digital:0000000000000000 nau7802_pwr_digital
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:592    .text.nau7802_reg_reset:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:599    .text.nau7802_reg_reset:0000000000000000 nau7802_reg_reset
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:677    .text.nau7802_cready_polarity:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:684    .text.nau7802_cready_polarity:0000000000000000 nau7802_cready_polarity
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:765    .text.nau7802_drdy_function:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:772    .text.nau7802_drdy_function:0000000000000000 nau7802_drdy_function
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:850    .text.nau7802_vldo_volts:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:857    .text.nau7802_vldo_volts:0000000000000000 nau7802_vldo_volts
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:921    .text.nau7802_pga_gain:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:928    .text.nau7802_pga_gain:0000000000000000 nau7802_pga_gain
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:990    .text.nau7802_ch_sel:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:997    .text.nau7802_ch_sel:0000000000000000 nau7802_ch_sel
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1082   .text.nau7802_samplerate:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1089   .text.nau7802_samplerate:0000000000000000 nau7802_samplerate
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1168   .text.nau7802_calibrate:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1175   .text.nau7802_calibrate:0000000000000000 nau7802_calibrate
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1338   .text.nau7802_crsd_en:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1345   .text.nau7802_crsd_en:0000000000000000 nau7802_crsd_en
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1426   .text.nau7802_fast_i2c_en:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1433   .text.nau7802_fast_i2c_en:0000000000000000 nau7802_fast_i2c_en
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1511   .text.nau7802_strong_i2c_pu_en:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1518   .text.nau7802_strong_i2c_pu_en:0000000000000000 nau7802_strong_i2c_pu_en
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1596   .text.nau7802_weak_i2c_pu_den:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1603   .text.nau7802_weak_i2c_pu_den:0000000000000000 nau7802_weak_i2c_pu_den
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1681   .text.nau7802_short_input:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1688   .text.nau7802_short_input:0000000000000000 nau7802_short_input
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1766   .text.nau7802_burnout_cs_en:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1773   .text.nau7802_burnout_cs_en:0000000000000000 nau7802_burnout_cs_en
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1851   .text.nau7802_temp_sense_en:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1858   .text.nau7802_temp_sense_en:0000000000000000 nau7802_temp_sense_en
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1936   .text.nau7802_bandgap_chop_en:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:1943   .text.nau7802_bandgap_chop_en:0000000000000000 nau7802_bandgap_chop_en
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2021   .text.nau7802_extended_cm:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2028   .text.nau7802_extended_cm:0000000000000000 nau7802_extended_cm
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2092   .text.nau7802_ldomode:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2099   .text.nau7802_ldomode:0000000000000000 nau7802_ldomode
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2177   .text.nau7802_pga_buff_en:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2184   .text.nau7802_pga_buff_en:0000000000000000 nau7802_pga_buff_en
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2262   .text.nau7802_pga_bypass_en:0000000000000000 $t
ARM GAS  /var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s 			page 88


/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2269   .text.nau7802_pga_bypass_en:0000000000000000 nau7802_pga_bypass_en
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2347   .text.nau7802_pga_inv_en:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2354   .text.nau7802_pga_inv_en:0000000000000000 nau7802_pga_inv_en
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2432   .text.nau7802_chop_den:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2439   .text.nau7802_chop_den:0000000000000000 nau7802_chop_den
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2517   .text.nau7802_pga_cap_en:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2524   .text.nau7802_pga_cap_en:0000000000000000 nau7802_pga_cap_en
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2605   .text.nau7802_biase_curr:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2612   .text.nau7802_biase_curr:0000000000000000 nau7802_biase_curr
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2676   .text.nau7802_adc_curr:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2683   .text.nau7802_adc_curr:0000000000000000 nau7802_adc_curr
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2747   .text.nau7802_pga_curr:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2754   .text.nau7802_pga_curr:0000000000000000 nau7802_pga_curr
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2816   .text.nau7802_cready_read:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2823   .text.nau7802_cready_read:0000000000000000 nau7802_cready_read
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2871   .text.nau7802_puready_read:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2878   .text.nau7802_puready_read:0000000000000000 nau7802_puready_read
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2926   .text.nau7802_offset_cal_read:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:2933   .text.nau7802_offset_cal_read:0000000000000000 nau7802_offset_cal_read
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:3072   .text.nau7802_gain_cal_read:0000000000000000 $t
/var/folders/b6/_lrwbzzx5qg46wbggw31g5280000gn/T//ccgGQleT.s:3079   .text.nau7802_gain_cal_read:0000000000000000 nau7802_gain_cal_read

UNDEFINED SYMBOLS
malloc
HAL_I2C_Mem_Read
HAL_I2C_Mem_Write
HAL_Delay
